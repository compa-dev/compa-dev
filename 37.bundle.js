(self.webpackChunkmy_app=self.webpackChunkmy_app||[]).push([[37],{6037:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>Ae});var a=n(7294),l=n(1120),r=n(7623),i=n(5059),o=n(1594),s=n(7257),c=n(4022),m=n(282),d=n(9895),p=n(2318),u=n(1267),h=n(3901),f=n(7585);const g=(0,l.Z)((e=>(0,r.Z)({root:{display:"flex",justifyContent:"left",flexWrap:"wrap",listStyle:"none",width:"100%",padding:e.spacing(.5),margin:"10px 10px 10px 10px",maxWidth:"800px"},chip:{margin:e.spacing(.5),"& .MuiChip-deleteIcon":{visibility:"hidden"},"&:hover":{"& .MuiChip-deleteIcon":{visibility:"visible"}}},placeHolderText:{fontSize:"0.8rem",color:"gray",marginTop:"4px",marginLeft:"10px"},button:{margin:"10px 10px 10px 10px",padding:"0px 20px 0px 10px",height:"2rem",borderRadius:"10px",fontSize:"1rem","& .MuiSvgIcon-root":{transition:"all 0.3s ease",marginRight:"10px"},"&:hover":{color:"white",background:"#303F9F",boxShadow:"0 8px 16px 0 rgba(172, 34, 34, 0.2)",cursor:"pointer","& .MuiSvgIcon-root":{transform:"rotate(90deg)"}}}})));function E({holdings:e,onChange:t,onDelete:n,onAdd:l}){const r=g();return a.createElement(a.Fragment,null,a.createElement("div",null,a.createElement(d.Z,{elevation:0,style:{display:"flex"}},a.createElement(d.Z,{component:"ul",className:r.root},0===e.length?a.createElement("div",{className:r.placeHolderText},"주식 추가 버튼을 클릭하여 주식을 추가하세요"):void 0,e.map((e=>{return a.createElement("li",{key:e.name},a.createElement(u.Z,{avatar:a.createElement(h.Z,null,"S"),label:e.name,onDelete:(t=e.name,()=>{n(t)}),className:r.chip}));var t}))),a.createElement(f.Z,{stockList:e,onAdd:l,onChange:t,onDelete:n}))))}var v=n(8463),x=n(8588),b=n(3301);const y=({selectedPF:e})=>a.createElement(a.Fragment,null,a.createElement("div",{style:{fontSize:"1.5rem"}},"선택된 포트폴리오"),a.createElement(b.Z,{values:e.weights.values,labels:e.weights.items,title:"",volatility:e.risk,returns:e.returns,sharpe:e.sharpe}));var w=n(7314),k=n(8920),Z=n(5258),S=n(65),C=n(1423),F=n(7748),N=n(8660),D=n(7968),P=n(2063),z=n(2305),T=n(9046);const L=(0,l.Z)((e=>(0,r.Z)({root:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto",fontSize:"1.2rem"}},infoCard:{float:"left",textAlign:"center"},description:{fontSize:"1.1rem","& > div":{fontSize:"1rem",fontWeight:"bold",letterSpacing:"1px",lineHeight:"216%"}},EfExplainIcon:{fontSize:"1.2rem",paddingLeft:"2px",fontStyle:"italic ",float:"left",color:"gray",transition:"all 0.3s ease","&:hover":{cursor:"pointer",color:"black",transform:"rotate(20deg)"}},backTestDescription:{fontSize:"1.0rem","& > div":{marginLeft:"10px"}},test:{"&:hover":{"& $number":{backgroundColor:"red"}}},number:{animation:`$myEffect 1000ms ${e.transitions.easing.easeInOut}`},numberDown:{animation:`$myEffectExit 1000ms ${e.transitions.easing.easeInOut}`,transform:"translateY(-200%)"},"@keyframes myEffect":{"0%":{opacity:.5,transform:"translateY(-200%)"},"100%":{opacity:1,transform:"translateY(0)"}},"@keyframes myEffectExit":{"0%":{opacity:.5,transform:"translateY(0)"},"100%":{opacity:1,transform:"translateY(-200%)"}}}))),M=({handleSelectedPF:e,frontierData:t,holdings:n})=>{const l=L(),[r,i]=(0,a.useState)(t.frontier[0]),[o,s]=(0,a.useState)(),[c,m]=(0,a.useState)(!1),[p,u]=(0,a.useState)("1000");let h=[],f=[],g=[],E=[];t.frontier.forEach((e=>{h.push(e.risk),f.push(e.returns)}));for(let e in t.specific)"max_returns"!==e&&"max_sharpe"!==e&&"min_risk"!==e||(g.push(t.specific[e].risk),E.push(t.specific[e].returns));return(0,a.useEffect)((()=>{m(!1);let e=r.weights.items.map((e=>{var t;return(null===(t=n.find((t=>t.name===e?t.code:"")))||void 0===t?void 0:t.code)||""}));(0,z.o)({code:e,weight:r.weights.values}).then((e=>{s(e),m(!0)}))}),[r,n]),a.createElement(a.Fragment,null,a.createElement("div",{className:l.root},a.createElement("div",null,a.createElement(d.Z,{className:l.infoCard,elevation:0},a.createElement("div",{style:{marginLeft:"20px"}},a.createElement("div",{style:{paddingLeft:"60px",paddingBottom:"2px",float:"left"}},"효율적 경계선 모델"),a.createElement(P.Z,{className:l.EfExplainIcon,onMouseEnter:()=>{},onMouseLeave:()=>{}})),a.createElement(N.Z,{data:[{x:h,y:f,mode:"lines",line:{shape:"spline"},name:"EF 모델 추천",hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"},{x:g,y:E,mode:"markers",name:"Dr.폴리오 추천",marker:{size:12,symbol:"star"},hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"}],layout:{margin:{t:0,b:10,r:0,l:10},width:300,height:300,xaxis:{showticklabels:!1,title:"risk"},yaxis:{showticklabels:!1,title:"return"},showlegend:!1},config:{displayModeBar:!1},onClick:e=>{i(t.frontier[e.points[0].pointIndex])}})),a.createElement(d.Z,{className:l.infoCard,elevation:0},a.createElement("div",null,"모델 실행 결과"),c&&void 0!==o?a.createElement(a.Fragment,null,a.createElement(N.Z,{className:l.test,data:[{x:o.days,y:o.values.map((e=>Math.round(1e3*e))),mode:"lines",line:{shape:"spline"},name:"Lines"}],layout:{margin:{t:0,b:30,r:50,l:0},width:300,height:200,showlegend:!1,xaxis:{tickformat:"%Y %b %d"},yaxis:{side:"right"}},config:{displayModeBar:!1},onHover:e=>{e.points[0].y&&u(String(e.points[0].y))}}),a.createElement("br",null),a.createElement("div",{className:l.backTestDescription},a.createElement("div",null," 1000만원 투자시"),a.createElement("div",null,"최종 평가액 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}},Math.round(1e3*o.values[o.values.length-1])),"만원"),a.createElement("div",null,"최종 수익율 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}},Math.round(100*o.values[o.values.length-1])),"%"))):a.createElement("div",null,a.createElement(T.Z,{width:300,height:300,description:"테스트 분석중..."}))),a.createElement("div",{className:l.description}," ",a.createElement("div",null,"* 금융 포트폴리오 모델 ",a.createElement("span",{style:{color:"red",fontWeight:"bold"}},"Efficient frontier 활용")),a.createElement("div",null,"* 과거 ",a.createElement("span",{style:{color:"red",fontWeight:"bold"}},"360 Days")," 금융 정보 기반"))),a.createElement(D.Z,{title:"해당 포트폴리오",info:r,onPfClick:e})))},I=(0,l.Z)((e=>(0,r.Z)({root:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto"}}}))),O=({handleSelectedPF:e,recommnedData:t})=>{const n=I();let l=t.specific;return a.createElement(a.Fragment,null,a.createElement("div",{className:n.root},a.createElement(D.Z,{title:"안정 중시형",info:l.min_risk,onPfClick:e}),a.createElement(D.Z,{title:"밸런스형",info:l.max_sharpe,onPfClick:e}),a.createElement(D.Z,{title:"수익 중시형",info:l.max_returns,onPfClick:e})))},W=(0,l.Z)((e=>(0,r.Z)({root:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto",fontSize:"1.2rem"}},infoCard:{float:"left",textAlign:"center"},description:{fontSize:"1.1rem","& > div":{fontSize:"1rem",fontWeight:"bold",letterSpacing:"1px",lineHeight:"216%"}},EfExplainIcon:{fontSize:"1.2rem",paddingLeft:"2px",fontStyle:"italic ",float:"left",color:"gray",transition:"all 0.3s ease","&:hover":{cursor:"pointer",color:"black",transform:"rotate(20deg)"}},backTestDescription:{fontSize:"1.0rem","& > div":{marginLeft:"10px"}}}))),R=({handleSelectedPF:e,frontierData:t,holdings:n})=>{const l=W(),[r,i]=(0,a.useState)(t.frontier[0]),[o,s]=(0,a.useState)(),[c,m]=(0,a.useState)(!1);let p=[],u=[],h=[],f=[];t.frontier.forEach((e=>{p.push(e.risk),u.push(e.returns)}));for(let e in t.specific)"max_returns"!==e&&"max_sharpe"!==e&&"min_risk"!==e||(h.push(t.specific[e].risk),f.push(t.specific[e].returns));return(0,a.useEffect)((()=>{m(!1);let e=r.weights.items.map((e=>{var t;return(null===(t=n.find((t=>t.name===e?t.code:"")))||void 0===t?void 0:t.code)||""}));(0,z.o)({code:e,weight:r.weights.values}).then((e=>{s(e),m(!0)}))}),[r,n]),a.createElement(a.Fragment,null,a.createElement("div",{className:l.root},a.createElement("div",null,a.createElement(d.Z,{className:l.infoCard,elevation:0},a.createElement("div",{style:{marginLeft:"20px"}},a.createElement("div",{style:{paddingLeft:"60px",paddingBottom:"2px",float:"left"}},"효율적 경계선 모델"),a.createElement(P.Z,{className:l.EfExplainIcon,onMouseEnter:()=>{},onMouseLeave:()=>{}})),a.createElement(N.Z,{data:[{x:p,y:u,mode:"lines",line:{shape:"spline"},name:"EF 모델 추천",hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"},{x:h,y:f,mode:"markers",name:"Dr.폴리오 추천",marker:{size:12,symbol:"star"},hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"}],layout:{margin:{t:0,b:10,r:0,l:10},width:300,height:300,xaxis:{showticklabels:!1,title:"risk"},yaxis:{showticklabels:!1,title:"return"},showlegend:!1},config:{displayModeBar:!1},onClick:e=>{i(t.frontier[e.points[0].pointIndex])}})),a.createElement(d.Z,{className:l.infoCard,elevation:0},a.createElement("div",null,"모델 실행 결과"),c&&void 0!==o?a.createElement(a.Fragment,null,a.createElement(N.Z,{data:[{x:o.days,y:o.values.map((e=>Math.round(1e3*e))),mode:"lines",line:{shape:"spline"},name:"Lines"}],layout:{margin:{t:0,b:30,r:50,l:0},width:300,height:200,showlegend:!1,xaxis:{tickformat:"%Y %b %d"},yaxis:{side:"right"}},config:{displayModeBar:!1}}),a.createElement("div",{className:l.backTestDescription},a.createElement("div",null," 1000만원 투자시"),a.createElement("div",null,"예상 평가액 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}}," ",Math.round(1e3*o.values[o.values.length-1])),"만원"),a.createElement("div",null,"예상 수익율 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}}," ",Math.round(100*o.values[o.values.length-1])),"%"))):a.createElement("div",null,a.createElement(T.Z,{width:300,height:300,description:"테스트 분석중..."}))),a.createElement("div",{className:l.description}," ",a.createElement("div",null,"* 금융 포트폴리오 모델 ",a.createElement("span",{style:{color:"red",fontWeight:"bold"}},"Efficient frontier 활용")),a.createElement("div",null,"* Deep learning 모델을 통한 주가 변동성 예측"),a.createElement("div",null,"* 과거 ",a.createElement("span",{style:{color:"red",fontWeight:"bold"}},"30 Days")," 금융 정보 기반"))),a.createElement(D.Z,{title:"Clicked Model",info:r,onPfClick:e})))};var B=n(991),j=n.n(B);n(1421);const A=(0,l.Z)((e=>(0,r.Z)({root:{height:"460px"},slider:{overflow:"hidden",height:"100%"},content:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto",fontSize:"1rem"}}}))),_=({handleSelectedPF:e,holdings:t,similarETFData:n})=>{const l=A();let r=n;return a.createElement(a.Fragment,null,a.createElement("div",{className:l.root},a.createElement(j(),{className:l.slider,style:{}},r.map(((t,n)=>{let r={returns:t.returns,risk:t.risk,sharpe:1,weights:{items:t.info.map((e=>e.name)),values:t.info.map((e=>Number((Number(e.percent)/100).toFixed(2))))}};return a.createElement("div",{className:l.content,key:t.name,style:{backgroundColor:"white"}},a.createElement(D.Z,{title:t.name,info:r,onPfClick:e}),a.createElement(d.Z,{elevation:0,style:{paddingLeft:"20px",marginTop:"120px"}},a.createElement("div",{style:{fontSize:"1.5rem"}},"ETF 정보"),a.createElement("div",null,"ETF명 : ",t.name),a.createElement("div",null,"종목코드 : ",t.code),a.createElement("div",null,"유사율 : ",t.match_weight.toFixed(2),"%"),a.createElement("div",null,"순위 : ",n+1)))})))))},$=["loading"];function Y(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}const H=(e="Loading...",t="100%",n="100%")=>l=>class extends a.Component{render(){const r=this.props,{loading:i}=r,o=Y(r,$);return i?a.createElement(T.Z,{height:n,width:t,description:e}):a.createElement(l,o)}},X=["children","value","index"];function G(){return(G=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function K(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}function U(e){const{children:t,value:n,index:l}=e,r=K(e,X);return a.createElement("div",G({role:"tabpanel",hidden:n!==l,id:`full-width-tabpanel-${l}`,"aria-labelledby":`full-width-tab-${l}`},r),n===l&&a.createElement(F.Z,{p:3},a.createElement(p.Z,null,t)))}function q(e){return{id:`full-width-tab-${e}`,"aria-controls":`full-width-tabpanel-${e}`}}const J=(0,l.Z)((e=>({root:{backgroundColor:e.palette.background.paper,width:1e3,"& span":{fontSize:"1rem"}}}))),Q=H("포트폴리오 분석중","900px","508px")(M),V=H("AI 분석중...","900px","508px")(R),ee=H("Dr.폴리오 추천중...","900px","508px")(O),te=H("ETF 분석중...","900px","508px")(_);function ne({holdings:e,frontierData:t,frontierAIData:n,similarETFData:l,handleSelectedPF:r}){const i=J(),o=(0,k.Z)(),[s,c]=a.useState(0);return a.createElement("div",{className:i.root},a.createElement(Z.Z,{position:"static",color:"default"},a.createElement(S.Z,{value:s,onChange:(e,t)=>{c(t)},indicatorColor:"primary",textColor:"primary",variant:"fullWidth","aria-label":"full width tabs example"},a.createElement(C.Z,G({label:"리스크 vs. 보상"},q(0))),a.createElement(C.Z,G({label:"(AI 기반) 리스크 vs. 보상"},q(1))),a.createElement(C.Z,G({label:"Dr.폴리오 추천"},q(2))),a.createElement(C.Z,G({label:"관련 ETF 추천"},q(3))))),a.createElement(w.Z,{axis:"rtl"===o.direction?"x-reverse":"x",index:s,onChangeIndex:e=>{c(e)}},a.createElement(U,{value:s,index:0,dir:o.direction},a.createElement(Q,{loading:void 0===t,handleSelectedPF:r,holdings:e,frontierData:t})),a.createElement(U,{value:s,index:1,dir:o.direction},a.createElement(V,{loading:void 0===n,handleSelectedPF:r,holdings:e,frontierData:n})),a.createElement(U,{value:s,index:2,dir:o.direction},a.createElement(ee,{loading:void 0===t,handleSelectedPF:r,recommnedData:t})),a.createElement(U,{value:s,index:3,dir:o.direction},a.createElement(te,{loading:void 0===l,handleSelectedPF:r,holdings:e,similarETFData:l}))))}var ae=n(5886),le=n(8642),re=n(2122),ie=n(1253),oe=n(6010),se=(n(5697),n(9693)),ce=n(4670),me=a.forwardRef((function(e,t){var n=e.animation,l=void 0===n?"pulse":n,r=e.classes,i=e.className,o=e.component,s=void 0===o?"span":o,c=e.height,m=e.variant,d=void 0===m?"text":m,p=e.width,u=(0,ie.Z)(e,["animation","classes","className","component","height","variant","width"]),h=Boolean(u.children);return a.createElement(s,(0,re.Z)({ref:t,className:(0,oe.Z)(r.root,r[d],i,h&&[r.withChildren,!p&&r.fitContent,!c&&r.heightAuto],!1!==l&&r[l])},u,{style:(0,re.Z)({width:p,height:c},u.style)}))}));const de=(0,ce.Z)((function(e){return{root:{display:"block",backgroundColor:(0,se.U1)(e.palette.text.primary,"light"===e.palette.type?.11:.13),height:"1.2em"},text:{marginTop:0,marginBottom:0,height:"auto",transformOrigin:"0 60%",transform:"scale(1, 0.60)",borderRadius:e.shape.borderRadius,"&:empty:before":{content:'"\\00a0"'}},rect:{},circle:{borderRadius:"50%"},pulse:{animation:"$pulse 1.5s ease-in-out 0.5s infinite"},"@keyframes pulse":{"0%":{opacity:1},"50%":{opacity:.4},"100%":{opacity:1}},wave:{position:"relative",overflow:"hidden","&::after":{animation:"$wave 1.6s linear 0.5s infinite",background:"linear-gradient(90deg, transparent, ".concat(e.palette.action.hover,", transparent)"),content:'""',position:"absolute",transform:"translateX(-100%)",bottom:0,left:0,right:0,top:0}},"@keyframes wave":{"0%":{transform:"translateX(-100%)"},"60%":{transform:"translateX(100%)"},"100%":{transform:"translateX(100%)"}},withChildren:{"& > *":{visibility:"hidden"}},fitContent:{maxWidth:"fit-content"},heightAuto:{height:"auto"}}}),{name:"MuiSkeleton"})(me),pe=()=>a.createElement("div",{style:{display:"flex",justifyContent:"center",flexDirection:"column",alignItems:"center"}},a.createElement(de,{variant:"text",style:{width:"70%",height:"3rem"}}),a.createElement(de,{variant:"circle",style:{width:"15rem",height:"15rem",paddingTop:"1rem"}}),a.createElement("div",{style:{width:"100%",display:"flex",justifyContent:"space-around",paddingTop:"1.5rem"}},a.createElement(de,{variant:"rect",width:"4rem",height:"4rem"}),a.createElement(de,{variant:"rect",width:"4rem",height:"4rem"}),a.createElement(de,{variant:"rect",width:"4rem",height:"4rem"})),a.createElement("div",{style:{width:"90%",display:"flex",justifyContent:"flex-end",paddingTop:"1rem"}},a.createElement(de,{variant:"rect",width:"5rem",height:"2rem"}))),ue=(0,a.createContext)({selectedPF:void 0,setSelectedPF(){},updateItems(){}}),he=({children:e})=>{const[t,n]=(0,a.useState)(void 0),l={selectedPF:t,setSelectedPF:n,updateItems:e=>{if(void 0===t)return;let a=t;a.weights.items=e,n(a)}};return a.createElement(ue.Provider,{value:l},e)},fe=H()(y),ge=({holdings:e})=>{const[t,n]=(0,a.useState)(),[l,r]=(0,a.useState)(),[i,o]=(0,a.useState)(),[s,c]=a.useState(!1),[m,d]=(0,a.useState)(),p=a.useRef(),{selectedPF:u,setSelectedPF:h}=(0,a.useContext)(ue);return(0,a.useEffect)((()=>{let t=e.map((e=>{var t;return{name:e.name,code:e.code,weight:(null==m||null===(t=m.find((t=>t.code===e.code||t.name===e.name)))||void 0===t?void 0:t.weight)||0}}));(0,x.u)(t,"semi_variance").then((e=>{n(e)})),(0,x.u)(t,"semi_absolute").then((e=>{r(e)})),(0,le.y)(t).then((e=>{o(e)}))}),[e,m]),a.createElement(a.Fragment,null,a.createElement("div",{className:"SelectedPortfolio",style:{display:"flex"}},a.createElement("div",{style:{paddingRight:"20px"}},a.createElement(ne,{handleSelectedPF:e=>{c(!0),h(e),p.current=window.setTimeout((()=>{c(!1)}),500)},holdings:e,frontierData:t,frontierAIData:l,similarETFData:i})),a.createElement(ae.Z,{style:{fontSize:"5rem",margin:"auto",marginLeft:"10px",marginRight:"10px"}}),a.createElement("div",null,a.createElement(v.Z,{style:{width:"17.5rem",height:"28rem",textAlign:"center",marginTop:"73px"}},void 0===u?a.createElement(pe,null):a.createElement(fe,{loading:s,selectedPF:u})))))};var Ee=n(1749),ve=n(4845);const xe=(0,l.Z)({root:{width:250},stockName:{width:"100px",whiteSpace:"nowrap",textOverflow:"ellipsis",overflow:"hidden"}});function be(e){const t=xe(),[n,l]=a.useState(e.value);return a.createElement("div",{className:t.root},a.createElement(Ee.Z,{container:!0,spacing:2,alignItems:"center"},a.createElement(p.Z,{className:t.stockName,id:"input-slider",gutterBottom:!0},e.name),a.createElement(Ee.Z,{item:!0,xs:!0},a.createElement(ve.Z,{value:"number"==typeof n?e.value:0,onChange:(t,a)=>{l(a),e.onChange(e.name,Number(n))},"aria-labelledby":"input-slider",min:0,max:1,step:.001}))))}var ye=n(8623),we=n(9669),ke=n.n(we),Ze=n(3318);let Se={amounts:[{amount:8,code:"003550",name:"LG",price:128e3},{amount:9,code:"005380",name:"현대차",price:126500},{amount:4,code:"036570",name:"엔씨소프트",price:212e3},{amount:11,code:"035720",name:"카카오",price:81500},{amount:45,code:"000660",name:"SK하이닉스",price:23650},{amount:17,code:"015760",name:"한국전력",price:113500},{amount:2,code:"005930",name:"삼성전자",price:83e4},{amount:5,code:"068270",name:"셀트리온",price:266e3}],remains:109250};var Ce=n(2302),Fe=n(9613),Ne=n(8222),De=n(6847),Pe=n(3750),ze=n(7394);const Te=[{id:"name",label:"종목"},{id:"price",label:"가격"},{id:"amount",label:"수량"}],Le=(0,l.Z)({root:{width:"100%"},container:{maxHeight:270,maxWidth:300}});function Me({amounts:e}){const t=Le();return a.createElement(d.Z,{className:t.root,elevation:0},a.createElement(De.Z,{className:t.container},a.createElement(Ce.Z,{stickyHeader:!0,"aria-label":"sticky table",size:"small"},a.createElement(Pe.Z,null,a.createElement(ze.Z,null,Te.map((e=>a.createElement(Ne.Z,{key:e.id},e.label))))),a.createElement(Fe.Z,null,e.map((e=>a.createElement(ze.Z,{hover:!0,role:"checkbox",tabIndex:0,key:e.code+"table"},a.createElement(Ne.Z,{key:e.code,align:"left"},e.name),a.createElement(Ne.Z,{key:e.code,align:"left"},e.price),a.createElement(Ne.Z,{key:e.code,align:"center"},e.amount))))))))}const Ie=(0,l.Z)((e=>(0,r.Z)({root:{width:"800px",height:"500px"},card:{boxShadow:"0 4px 8px 0 rgba(0, 0, 0, 0.2)",height:"500px",margin:"10px 100px 100px 100px",position:"relative"},button:{"& .MuiSvgIcon-root":{transition:"all 0.3s ease"},"&:hover":{background:"#B6EBFF",boxShadow:"0 16px 24px 0 rgba(172, 34, 34, 0.2)",cursor:"pointer","& .MuiSvgIcon-root":{transform:"rotate(180deg)"}}},"@global":{"*::-webkit-scrollbar":{width:"0.4em"},"*::-webkit-scrollbar-track":{"-webkit-box-shadow":"inset 0 0 6px rgba(0,0,0,0.00)"},"*::-webkit-scrollbar-thumb":{backgroundColor:"#2E2E2E",outline:"1px solid #E6E6FF",borderRadius:"20px"}},backTestDescription:{fontSize:"1.0rem"}})));function Oe({holdings:e,open:t,finalWeightList:n,onClose:l}){const r=Ie(),[i,o]=(0,a.useState)(),[s,c]=(0,a.useState)();return(0,a.useEffect)((()=>{if(!t)return;let a=n.items.map((t=>{var n;return(null===(n=e.find((e=>e.name===t?e.code:"")))||void 0===n?void 0:n.code)||""}));(async function(e,t=1e7){let n;return!1===Ze.nL?(n=Se,await(0,Ze._v)(2e3),n):(await ke()({method:"post",url:"http://192.168.175.140:5000/discrete",headers:{"Content-Type":"application/json"},data:JSON.stringify({codes:e.code,weights:e.weight,cash:t})}).then((function(e){n=e.data})).catch((function(e){})),n)})({code:a,weight:n.values}).then((e=>{o(e)})),(0,z.o)({code:a,weight:n.values}).then((e=>{c(e)}))}),[n,t,e]),a.createElement(ye.Z,{onClose:()=>{l()},"aria-labelledby":"simple-dialog-title",open:t,maxWidth:"md"},a.createElement("div",{className:r.root},a.createElement("h1",{style:{paddingLeft:"300px"}},"최종 투자 정보"),a.createElement("div",{style:{float:"left",width:"50%"}},void 0!==s?a.createElement("div",{style:{paddingLeft:"60px",paddingTop:"30px"}},a.createElement("div",{style:{fontSize:"1.2rem",paddingLeft:"100px"}}," 예상 투자 실적"),a.createElement(N.Z,{data:[{x:s.days,y:s.values.map((e=>Math.round(1e3*e))),mode:"lines",line:{shape:"spline"},name:"Lines"}],layout:{margin:{t:0,b:30,r:50,l:0},width:300,height:200,showlegend:!1,xaxis:{tickformat:"%Y %b %d"},yaxis:{side:"right"}},config:{displayModeBar:!1}}),a.createElement("div",{className:r.backTestDescription},a.createElement("div",null," 1000만원 투자시"),a.createElement("div",null,"예상 평가액 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}}," ",Math.round(1e3*s.values[s.values.length-1])),"만원"),a.createElement("div",null,"예상 수익율 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}}," ",Math.round(100*s.values[s.values.length-1])),"%"))):a.createElement("div",null,a.createElement(T.Z,{width:300,height:200,description:"ETF 분석중..."}))),a.createElement("div",{style:{float:"left",width:"50%"}},a.createElement("div",{style:{paddingLeft:"60px",paddingTop:"20px"}},void 0!==i?a.createElement("div",null,a.createElement("div",{style:{width:"100px",float:"left"}}," 총 투자 금액 :"),a.createElement("div",null," 1000만원"),a.createElement("div",{style:{width:"100px",float:"left"}}," 남은 금액 :"),a.createElement("div",null," ",Math.round(i.remains/1e4),"만원"),a.createElement("br",null),a.createElement(Me,{amounts:i.amounts})):a.createElement("div",null,a.createElement(T.Z,{width:300,height:200,description:"ETF 분석중..."})))),a.createElement(m.Z,{variant:"contained",color:"primary",size:"medium",style:{position:"absolute",bottom:"10px",right:"10px"}},"Buy")))}var We=n(6210);const Re=(0,l.Z)((e=>(0,r.Z)({root:{width:"800px",height:"500px"},card:{boxShadow:"0 4px 8px 0 rgba(0, 0, 0, 0.2)",width:"800px",height:"500px",margin:"10px 100px 100px 100px",position:"relative"},stockSlider:{float:"left",paddingLeft:"80px",paddingRight:"10px",maxHeight:"300px",overflowY:"scroll",overflowX:"hidden"},button:{"& .MuiSvgIcon-root":{transition:"all 0.3s ease"},"&:hover":{background:"#B6EBFF",boxShadow:"0 16px 24px 0 rgba(172, 34, 34, 0.2)",cursor:"pointer","& .MuiSvgIcon-root":{transform:"rotate(180deg)"}}},"@global":{"*::-webkit-scrollbar":{width:"0.4em"},"*::-webkit-scrollbar-track":{"-webkit-box-shadow":"inset 0 0 6px rgba(0,0,0,0.00)"},"*::-webkit-scrollbar-thumb":{backgroundColor:"#2E2E2E",outline:"1px solid #E6E6FF",borderRadius:"20px"}}}))),Be=({holdings:e})=>{const t=Re();let{selectedPF:n,setSelectedPF:l}=(0,a.useContext)(ue);void 0===n&&(n={returns:0,risk:0,sharpe:0,weights:{items:["none"],values:[1]}});const r=[...n.weights.values],[i,o]=(0,a.useState)({items:[...n.weights.items],values:[...n.weights.values]}),s=(e,t)=>{let n={items:[...i.items],values:[...i.values]};n.values[n.items.indexOf(e)]=t,o(n)},[c,d]=a.useState(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:t.root},a.createElement(v.Z,{className:t.card},a.createElement("h2",{style:{paddingLeft:"300px"}},"포트폴리오 최종 결정"),a.createElement("div",{style:{float:"left",width:"50%"}},a.createElement("div",{style:{paddingLeft:"60px",paddingTop:"20px"}},a.createElement(N.Z,{data:[{labels:i.items,values:i.values,type:"pie",hoverinfo:"label+percent",textinfo:"label+percent",textfont:{size:15,family:"",color:""},sort:!1,textposition:"inside",insidetextorientation:"horizontal"}],layout:{width:300,height:300,margin:{t:30,b:20,r:0,l:0},showlegend:!1},config:{displayModeBar:!1}}))),a.createElement("div",{style:{float:"left",width:"50%"}},a.createElement(m.Z,{className:t.button,style:{float:"right",marginRight:"60px"},onClick:()=>{o({items:[...i.items],values:[...r]})}},a.createElement(We.Z,null)," 되돌리기"),a.createElement("div",{className:t.stockSlider},i.values.map(((e,t)=>a.createElement(be,{name:i.items[t],value:e,key:i.items[t],onChange:s})))),a.createElement(m.Z,{variant:"contained",color:"primary",size:"medium",style:{position:"absolute",bottom:"10px",right:"10px"},onClick:()=>{d(!0)}},"confirm"),a.createElement(Oe,{holdings:e,finalWeightList:i,open:c,onClose:()=>{d(!1)}})))))},je=(0,l.Z)((e=>(0,r.Z)({root:{width:"100%"},button:{marginTop:e.spacing(1),marginRight:e.spacing(1)},actionsContainer:{marginBottom:e.spacing(2)},resetContainer:{padding:e.spacing(3)}})));function Ae(){const e=je(),[t,n]=a.useState(0),l=["Choose Stock","Select Portfolio","Confirm Portfolio"],r=()=>{n((e=>e+1))},u=()=>{n((e=>e-1))},[h,f]=a.useState([{name:"SK하이닉스",code:"003550"},{name:"LG",code:"005380"},{name:"현대차",code:"036570"},{name:"삼성전자",code:"035720"},{name:"한국전력",code:"000660"},{name:"카카오",code:"015760"},{name:"엔씨소프트",code:"005930"},{name:"셀트리온",code:"068270"}]),g=(e,t)=>{f((n=>n.map((n=>n.name!==e?n:{name:n.name,code:n.code,weight:t}))))},v=(e,t)=>{h.find((n=>n.name===e||n.code===t))||f((n=>n.concat({name:e,code:t})))},x=e=>{f((t=>t.filter((t=>t.name!==e))))};return a.createElement("div",{className:e.root},a.createElement(he,null,a.createElement(i.Z,{activeStep:t,orientation:"vertical"},l.map(((n,i)=>a.createElement(o.Z,{key:n},a.createElement(s.Z,null,n),a.createElement(c.Z,null,function({step:e,holdings:t,onChange:n,onDelete:l,onAdd:r}){switch(e){case 0:return a.createElement(E,{holdings:t,onChange:n,onDelete:l,onAdd:r});case 1:return a.createElement(ge,{holdings:t});case 2:return a.createElement(Be,{holdings:t});default:return"Unknown step"}}({step:i,holdings:h,onAdd:v,onChange:g,onDelete:x}),a.createElement("div",{className:e.actionsContainer},a.createElement("div",null,a.createElement(m.Z,{disabled:0===t,onClick:u,className:e.button},"Back"),a.createElement(m.Z,{variant:"contained",color:"primary",onClick:r,className:e.button},t===l.length-1?"Finish":"Next"))))))))),t===l.length&&a.createElement(d.Z,{square:!0,elevation:0,className:e.resetContainer},a.createElement(p.Z,null,"All steps completed - you're finished"),a.createElement(m.Z,{onClick:()=>{n(0)},className:e.button},"Reset")))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,