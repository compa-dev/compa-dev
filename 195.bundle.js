(self.webpackChunkmy_app=self.webpackChunkmy_app||[]).push([[195],{195:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>Ie});var a=n(7294),l=n(1120),r=n(7623),i=n(5059),o=n(1594),s=n(7257),c=n(4022),m=n(282),d=n(9895),p=n(2318),u=n(1267),h=n(3901),f=n(7585);const g=(0,l.Z)((e=>(0,r.Z)({root:{display:"flex",justifyContent:"left",flexWrap:"wrap",listStyle:"none",width:"100%",padding:e.spacing(.5),margin:"10px 10px 10px 10px",maxWidth:"800px"},chip:{margin:e.spacing(.5),"& .MuiChip-deleteIcon":{visibility:"hidden"},"&:hover":{"& .MuiChip-deleteIcon":{visibility:"visible"}}},placeHolderText:{fontSize:"0.8rem",color:"gray",marginTop:"4px",marginLeft:"10px"},button:{margin:"10px 10px 10px 10px",padding:"0px 20px 0px 10px",height:"2rem",borderRadius:"10px",fontSize:"1rem","& .MuiSvgIcon-root":{transition:"all 0.3s ease",marginRight:"10px"},"&:hover":{color:"white",background:"#303F9F",boxShadow:"0 8px 16px 0 rgba(172, 34, 34, 0.2)",cursor:"pointer","& .MuiSvgIcon-root":{transform:"rotate(90deg)"}}}})));function E({holdings:e,onChange:t,onDelete:n,onAdd:l}){const r=g();return a.createElement(a.Fragment,null,a.createElement("div",null,a.createElement(d.Z,{elevation:0,style:{display:"flex"}},a.createElement(d.Z,{component:"ul",className:r.root},0===e.length?a.createElement("div",{className:r.placeHolderText},"주식 추가 버튼을 클릭하여 주식을 추가하세요"):void 0,e.map((e=>{return a.createElement("li",{key:e.name},a.createElement(u.Z,{avatar:a.createElement(h.Z,null,"S"),label:e.name,onDelete:(t=e.name,()=>{n(t)}),className:r.chip}));var t}))),a.createElement(f.Z,{stockList:e,onAdd:l,onChange:t,onDelete:n}))))}var v=n(8463),x=n(8588),b=n(8623);const y=({selectedPF:e})=>a.createElement(a.Fragment,null,a.createElement("div",{style:{fontSize:"1.5rem"}},"선택된 포트폴리오"),a.createElement(b.Z,{values:e.weights.values,labels:e.weights.items,title:"",volatility:e.risk,returns:e.returns,sharpe:e.sharpe}));var w=n(7314),k=n(8920),Z=n(5258),S=n(65),C=n(1423),F=n(7748),N=n(8660),D=n(7968),P=n(2063),z=n(2305),L=n(9046);const T=(0,l.Z)((e=>(0,r.Z)({root:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto",fontSize:"1.2rem"}},infoCard:{float:"left",textAlign:"center"},description:{fontSize:"1.1rem","& > div":{fontSize:"1rem",fontWeight:"bold",letterSpacing:"1px",lineHeight:"216%"}},EfExplainIcon:{fontSize:"1.2rem",paddingLeft:"2px",fontStyle:"italic ",float:"left",color:"gray",transition:"all 0.3s ease","&:hover":{cursor:"pointer",color:"black",transform:"rotate(20deg)"}},backTestDescription:{fontSize:"1.0rem","& > div":{marginLeft:"10px"}},test:{"&:hover":{"& $number":{backgroundColor:"red"}}},number:{animation:`$myEffect 1000ms ${e.transitions.easing.easeInOut}`},numberDown:{animation:`$myEffectExit 1000ms ${e.transitions.easing.easeInOut}`,transform:"translateY(-200%)"},"@keyframes myEffect":{"0%":{opacity:.5,transform:"translateY(-200%)"},"100%":{opacity:1,transform:"translateY(0)"}},"@keyframes myEffectExit":{"0%":{opacity:.5,transform:"translateY(0)"},"100%":{opacity:1,transform:"translateY(-200%)"}}}))),M=({handleSelectedPF:e,frontierData:t,holdings:n})=>{const l=T(),[r,i]=(0,a.useState)(t.frontier[0]),[o,s]=(0,a.useState)(),[c,m]=(0,a.useState)(!1),[p,u]=(0,a.useState)("1000");let h=[],f=[],g=[],E=[];t.frontier.forEach((e=>{h.push(e.risk),f.push(e.returns)}));for(let e in t.specific)"max_returns"!==e&&"max_sharpe"!==e&&"min_risk"!==e||(g.push(t.specific[e].risk),E.push(t.specific[e].returns));return(0,a.useEffect)((()=>{m(!1);let e=r.weights.items.map((e=>{var t;return(null===(t=n.find((t=>t.name===e?t.code:"")))||void 0===t?void 0:t.code)||""}));(0,z.o)({code:e,weight:r.weights.values}).then((e=>{s(e),m(!0)}))}),[r,n]),a.createElement(a.Fragment,null,a.createElement("div",{className:l.root},a.createElement("div",null,a.createElement(d.Z,{className:l.infoCard,elevation:0},a.createElement("div",{style:{marginLeft:"20px"}},a.createElement("div",{style:{paddingLeft:"60px",paddingBottom:"2px",float:"left"}},"효율적 경계선 모델"),a.createElement(P.Z,{className:l.EfExplainIcon,onMouseEnter:()=>{},onMouseLeave:()=>{}})),a.createElement(N.Z,{data:[{x:h,y:f,mode:"lines",line:{shape:"spline"},name:"EF 모델 추천",hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"},{x:g,y:E,mode:"markers",name:"Dr.폴리오 추천",marker:{size:12,symbol:"star"},hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"}],layout:{margin:{t:0,b:10,r:0,l:10},width:300,height:300,xaxis:{showticklabels:!1,title:"risk"},yaxis:{showticklabels:!1,title:"return"},showlegend:!1},config:{displayModeBar:!1},onClick:e=>{i(t.frontier[e.points[0].pointIndex])}})),a.createElement(d.Z,{className:l.infoCard,elevation:0},a.createElement("div",null,"모델 실행 결과"),c&&void 0!==o?a.createElement(a.Fragment,null,a.createElement(N.Z,{className:l.test,data:[{x:o.days,y:o.values.map((e=>Math.round(1e3*e))),mode:"lines",line:{shape:"spline"},name:"Lines"}],layout:{margin:{t:0,b:30,r:50,l:0},width:300,height:200,showlegend:!1,xaxis:{tickformat:"%Y %b %d"},yaxis:{side:"right"}},config:{displayModeBar:!1},onHover:e=>{e.points[0].y&&u(String(e.points[0].y))}}),a.createElement("br",null),a.createElement("div",{className:l.backTestDescription},a.createElement("div",null," 1000만원 투자시"),a.createElement("div",null,"최종 평가액 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}},Math.round(1e3*o.values[o.values.length-1])),"만원"),a.createElement("div",null,"최종 수익율 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}},Math.round(100*o.values[o.values.length-1])),"%"))):a.createElement("div",null,a.createElement(L.Z,{width:300,height:300,description:"테스트 분석중..."}))),a.createElement("div",{className:l.description}," ",a.createElement("div",null,"* 금융 포트폴리오 모델 ",a.createElement("span",{style:{color:"red",fontWeight:"bold"}},"Efficient frontier 활용")),a.createElement("div",null,"* 과거 ",a.createElement("span",{style:{color:"red",fontWeight:"bold"}},"360 Days")," 금융 정보 기반"))),a.createElement(D.Z,{title:"해당 포트폴리오",info:r,onPfClick:e})))},I=(0,l.Z)((e=>(0,r.Z)({root:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto"}}}))),O=({handleSelectedPF:e,recommnedData:t})=>{const n=I();let l=t.specific;return a.createElement(a.Fragment,null,a.createElement("div",{className:n.root},a.createElement(D.Z,{title:"안정 중시형",info:l.min_risk,onPfClick:e}),a.createElement(D.Z,{title:"밸런스형",info:l.max_sharpe,onPfClick:e}),a.createElement(D.Z,{title:"수익 중시형",info:l.max_returns,onPfClick:e})))},W=(0,l.Z)((e=>(0,r.Z)({root:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto",fontSize:"1.2rem"}},infoCard:{float:"left",textAlign:"center"},description:{fontSize:"1.1rem","& > div":{fontSize:"1rem",fontWeight:"bold",letterSpacing:"1px",lineHeight:"216%"}},EfExplainIcon:{fontSize:"1.2rem",paddingLeft:"2px",fontStyle:"italic ",float:"left",color:"gray",transition:"all 0.3s ease","&:hover":{cursor:"pointer",color:"black",transform:"rotate(20deg)"}},backTestDescription:{fontSize:"1.0rem","& > div":{marginLeft:"10px"}}}))),R=({handleSelectedPF:e,frontierData:t,holdings:n})=>{const l=W(),[r,i]=(0,a.useState)(t.frontier[0]),[o,s]=(0,a.useState)(),[c,m]=(0,a.useState)(!1);let p=[],u=[],h=[],f=[];t.frontier.forEach((e=>{p.push(e.risk),u.push(e.returns)}));for(let e in t.specific)"max_returns"!==e&&"max_sharpe"!==e&&"min_risk"!==e||(h.push(t.specific[e].risk),f.push(t.specific[e].returns));return(0,a.useEffect)((()=>{m(!1);let e=r.weights.items.map((e=>{var t;return(null===(t=n.find((t=>t.name===e?t.code:"")))||void 0===t?void 0:t.code)||""}));(0,z.o)({code:e,weight:r.weights.values}).then((e=>{s(e),m(!0)}))}),[r,n]),a.createElement(a.Fragment,null,a.createElement("div",{className:l.root},a.createElement("div",null,a.createElement(d.Z,{className:l.infoCard,elevation:0},a.createElement("div",{style:{marginLeft:"20px"}},a.createElement("div",{style:{paddingLeft:"60px",paddingBottom:"2px",float:"left"}},"효율적 경계선 모델"),a.createElement(P.Z,{className:l.EfExplainIcon,onMouseEnter:()=>{},onMouseLeave:()=>{}})),a.createElement(N.Z,{data:[{x:p,y:u,mode:"lines",line:{shape:"spline"},name:"EF 모델 추천",hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"},{x:h,y:f,mode:"markers",name:"Dr.폴리오 추천",marker:{size:12,symbol:"star"},hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"}],layout:{margin:{t:0,b:10,r:0,l:10},width:300,height:300,xaxis:{showticklabels:!1,title:"risk"},yaxis:{showticklabels:!1,title:"return"},showlegend:!1},config:{displayModeBar:!1},onClick:e=>{i(t.frontier[e.points[0].pointIndex])}})),a.createElement(d.Z,{className:l.infoCard,elevation:0},a.createElement("div",null,"모델 실행 결과"),c&&void 0!==o?a.createElement(a.Fragment,null,a.createElement(N.Z,{data:[{x:o.days,y:o.values.map((e=>Math.round(1e3*e))),mode:"lines",line:{shape:"spline"},name:"Lines"}],layout:{margin:{t:0,b:30,r:50,l:0},width:300,height:200,showlegend:!1,xaxis:{tickformat:"%Y %b %d"},yaxis:{side:"right"}},config:{displayModeBar:!1}}),a.createElement("div",{className:l.backTestDescription},a.createElement("div",null," 1000만원 투자시"),a.createElement("div",null,"예상 평가액 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}}," ",Math.round(1e3*o.values[o.values.length-1])),"만원"),a.createElement("div",null,"예상 수익율 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}}," ",Math.round(100*o.values[o.values.length-1])),"%"))):a.createElement("div",null,a.createElement(L.Z,{width:300,height:300,description:"테스트 분석중..."}))),a.createElement("div",{className:l.description}," ",a.createElement("div",null,"* 금융 포트폴리오 모델 ",a.createElement("span",{style:{color:"red",fontWeight:"bold"}},"Efficient frontier 활용")),a.createElement("div",null,"* Deep learning 모델을 통한 주가 변동성 예측"),a.createElement("div",null,"* 과거 ",a.createElement("span",{style:{color:"red",fontWeight:"bold"}},"30 Days")," 금융 정보 기반"))),a.createElement(D.Z,{title:"Clicked Model",info:r,onPfClick:e})))};var B=n(991),j=n.n(B);n(1421);const _=(0,l.Z)((e=>(0,r.Z)({root:{height:"460px"},slider:{overflow:"hidden",height:"100%"},content:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto",fontSize:"1rem"}}}))),A=({handleSelectedPF:e,holdings:t,similarETFData:n})=>{const l=_();let r=n;return a.createElement(a.Fragment,null,a.createElement("div",{className:l.root},a.createElement(j(),{className:l.slider,style:{}},r.map(((t,n)=>{let r={returns:t.returns,risk:t.risk,sharpe:1,weights:{items:t.info.map((e=>e.name)),values:t.info.map((e=>Number((Number(e.percent)/100).toFixed(2))))}};return a.createElement("div",{className:l.content,key:t.name,style:{backgroundColor:"white"}},a.createElement(D.Z,{title:t.name,info:r,onPfClick:e}),a.createElement(d.Z,{elevation:0,style:{paddingLeft:"20px",marginTop:"120px"}},a.createElement("div",{style:{fontSize:"1.5rem"}},"ETF 정보"),a.createElement("div",null,"ETF명 : ",t.name),a.createElement("div",null,"종목코드 : ",t.code),a.createElement("div",null,"유사율 : ",t.match_weight.toFixed(2),"%"),a.createElement("div",null,"순위 : ",n+1)))})))))},Y=["loading"];function $(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}const H=(e="Loading...",t="100%",n="100%")=>l=>class extends a.Component{render(){const r=this.props,{loading:i}=r,o=$(r,Y);return i?a.createElement(L.Z,{height:n,width:t,description:e}):a.createElement(l,o)}},G=["children","value","index"];function K(){return(K=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function q(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}function J(e){const{children:t,value:n,index:l}=e,r=q(e,G);return a.createElement("div",K({role:"tabpanel",hidden:n!==l,id:`full-width-tabpanel-${l}`,"aria-labelledby":`full-width-tab-${l}`},r),n===l&&a.createElement(F.Z,{p:3},a.createElement(p.Z,null,t)))}function U(e){return{id:`full-width-tab-${e}`,"aria-controls":`full-width-tabpanel-${e}`}}const X=(0,l.Z)((e=>({root:{backgroundColor:e.palette.background.paper,width:1e3,"& span":{fontSize:"1rem"}}}))),Q=H("포트폴리오 분석중","900px","508px")(M),V=H("AI 분석중...","900px","508px")(R),ee=H("Dr.폴리오 추천중...","900px","508px")(O),te=H("ETF 분석중...","900px","508px")(A);function ne({holdings:e,frontierData:t,frontierAIData:n,similarETFData:l,handleSelectedPF:r}){const i=X(),o=(0,k.Z)(),[s,c]=a.useState(0);return a.createElement("div",{className:i.root},a.createElement(Z.Z,{position:"static",color:"default"},a.createElement(S.Z,{value:s,onChange:(e,t)=>{c(t)},indicatorColor:"primary",textColor:"primary",variant:"fullWidth","aria-label":"full width tabs example"},a.createElement(C.Z,K({label:"리스크 vs. 보상"},U(0))),a.createElement(C.Z,K({label:"(AI 기반) 리스크 vs. 보상"},U(1))),a.createElement(C.Z,K({label:"Dr.폴리오 추천"},U(2))),a.createElement(C.Z,K({label:"관련 ETF 추천"},U(3))))),a.createElement(w.Z,{axis:"rtl"===o.direction?"x-reverse":"x",index:s,onChangeIndex:e=>{c(e)}},a.createElement(J,{value:s,index:0,dir:o.direction},a.createElement(Q,{loading:void 0===t,handleSelectedPF:r,holdings:e,frontierData:t})),a.createElement(J,{value:s,index:1,dir:o.direction},a.createElement(V,{loading:void 0===n,handleSelectedPF:r,holdings:e,frontierData:n})),a.createElement(J,{value:s,index:2,dir:o.direction},a.createElement(ee,{loading:void 0===t,handleSelectedPF:r,recommnedData:t})),a.createElement(J,{value:s,index:3,dir:o.direction},a.createElement(te,{loading:void 0===l,handleSelectedPF:r,holdings:e,similarETFData:l}))))}var ae=n(5886),le=n(8642),re=n(8365);const ie=()=>a.createElement("div",{style:{display:"flex",justifyContent:"center",flexDirection:"column",alignItems:"center"}},a.createElement(re.Z,{variant:"text",style:{width:"70%",height:"3rem"}}),a.createElement(re.Z,{variant:"circle",style:{width:"15rem",height:"15rem",paddingTop:"1rem"}}),a.createElement("div",{style:{width:"100%",display:"flex",justifyContent:"space-around",paddingTop:"1.5rem"}},a.createElement(re.Z,{variant:"rect",width:"4rem",height:"4rem"}),a.createElement(re.Z,{variant:"rect",width:"4rem",height:"4rem"}),a.createElement(re.Z,{variant:"rect",width:"4rem",height:"4rem"})),a.createElement("div",{style:{width:"90%",display:"flex",justifyContent:"flex-end",paddingTop:"1rem"}},a.createElement(re.Z,{variant:"rect",width:"5rem",height:"2rem"}))),oe=(0,a.createContext)({selectedPF:void 0,setSelectedPF(){},updateItems(){}}),se=({children:e})=>{const[t,n]=(0,a.useState)(void 0),l={selectedPF:t,setSelectedPF:n,updateItems:e=>{if(void 0===t)return;let a=t;a.weights.items=e,n(a)}};return a.createElement(oe.Provider,{value:l},e)},ce=H()(y),me=({holdings:e})=>{const[t,n]=(0,a.useState)(),[l,r]=(0,a.useState)(),[i,o]=(0,a.useState)(),[s,c]=a.useState(!1),[m,d]=(0,a.useState)(),p=a.useRef(),{selectedPF:u,setSelectedPF:h}=(0,a.useContext)(oe);return(0,a.useEffect)((()=>{let t=e.map((e=>{var t;return{name:e.name,code:e.code,weight:(null==m||null===(t=m.find((t=>t.code===e.code||t.name===e.name)))||void 0===t?void 0:t.weight)||0}}));(0,x.u)(t,"semi_variance").then((e=>{n(e)})),(0,x.u)(t,"semi_absolute").then((e=>{r(e)})),(0,le.y)(t).then((e=>{o(e)}))}),[e,m]),a.createElement(a.Fragment,null,a.createElement("div",{className:"SelectedPortfolio",style:{display:"flex"}},a.createElement("div",{style:{paddingRight:"20px"}},a.createElement(ne,{handleSelectedPF:e=>{c(!0),h(e),p.current=window.setTimeout((()=>{c(!1)}),500)},holdings:e,frontierData:t,frontierAIData:l,similarETFData:i})),a.createElement(ae.Z,{style:{fontSize:"5rem",margin:"auto",marginLeft:"10px",marginRight:"10px"}}),a.createElement("div",null,a.createElement(v.Z,{style:{width:"17.5rem",height:"28rem",textAlign:"center",marginTop:"73px"}},void 0===u?a.createElement(ie,null):a.createElement(ce,{loading:s,selectedPF:u})))))};var de=n(1749),pe=n(4845);const ue=(0,l.Z)({root:{width:250},stockName:{width:"100px",whiteSpace:"nowrap",textOverflow:"ellipsis",overflow:"hidden"}});function he(e){const t=ue(),[n,l]=a.useState(e.value);return a.createElement("div",{className:t.root},a.createElement(de.Z,{container:!0,spacing:2,alignItems:"center"},a.createElement(p.Z,{className:t.stockName,id:"input-slider",gutterBottom:!0},e.name),a.createElement(de.Z,{item:!0,xs:!0},a.createElement(pe.Z,{value:"number"==typeof n?e.value:0,onChange:(t,a)=>{l(a),e.onChange(e.name,Number(n))},"aria-labelledby":"input-slider",min:0,max:1,step:.001}))))}var fe=n(270),ge=n(9669),Ee=n.n(ge),ve=n(3318);let xe={amounts:[{amount:8,code:"003550",name:"LG",price:128e3},{amount:9,code:"005380",name:"현대차",price:126500},{amount:4,code:"036570",name:"엔씨소프트",price:212e3},{amount:11,code:"035720",name:"카카오",price:81500},{amount:45,code:"000660",name:"SK하이닉스",price:23650},{amount:17,code:"015760",name:"한국전력",price:113500},{amount:2,code:"005930",name:"삼성전자",price:83e4},{amount:5,code:"068270",name:"셀트리온",price:266e3}],remains:109250};var be=n(2302),ye=n(9613),we=n(8222),ke=n(6847),Ze=n(3750),Se=n(7394);const Ce=[{id:"name",label:"종목"},{id:"price",label:"가격"},{id:"amount",label:"수량"}],Fe=(0,l.Z)({root:{width:"100%"},container:{maxHeight:270,maxWidth:300}});function Ne({amounts:e}){const t=Fe();return a.createElement(d.Z,{className:t.root,elevation:0},a.createElement(ke.Z,{className:t.container},a.createElement(be.Z,{stickyHeader:!0,"aria-label":"sticky table",size:"small"},a.createElement(Ze.Z,null,a.createElement(Se.Z,null,Ce.map((e=>a.createElement(we.Z,{key:e.id},e.label))))),a.createElement(ye.Z,null,e.map((e=>a.createElement(Se.Z,{hover:!0,role:"checkbox",tabIndex:0,key:e.code+"table"},a.createElement(we.Z,{key:e.code,align:"left"},e.name),a.createElement(we.Z,{key:e.code,align:"left"},e.price),a.createElement(we.Z,{key:e.code,align:"center"},e.amount))))))))}const De=(0,l.Z)((e=>(0,r.Z)({root:{width:"800px",height:"500px"},card:{boxShadow:"0 4px 8px 0 rgba(0, 0, 0, 0.2)",height:"500px",margin:"10px 100px 100px 100px",position:"relative"},button:{"& .MuiSvgIcon-root":{transition:"all 0.3s ease"},"&:hover":{background:"#B6EBFF",boxShadow:"0 16px 24px 0 rgba(172, 34, 34, 0.2)",cursor:"pointer","& .MuiSvgIcon-root":{transform:"rotate(180deg)"}}},"@global":{"*::-webkit-scrollbar":{width:"0.4em"},"*::-webkit-scrollbar-track":{"-webkit-box-shadow":"inset 0 0 6px rgba(0,0,0,0.00)"},"*::-webkit-scrollbar-thumb":{backgroundColor:"#2E2E2E",outline:"1px solid #E6E6FF",borderRadius:"20px"}},backTestDescription:{fontSize:"1.0rem"}})));function Pe({holdings:e,open:t,finalWeightList:n,onClose:l}){const r=De(),[i,o]=(0,a.useState)(),[s,c]=(0,a.useState)();return(0,a.useEffect)((()=>{if(!t)return;let a=n.items.map((t=>{var n;return(null===(n=e.find((e=>e.name===t?e.code:"")))||void 0===n?void 0:n.code)||""}));(async function(e,t=1e7){let n;return!1===ve.nL?(n=xe,await(0,ve._v)(2e3),n):(await Ee()({method:"post",url:"http://192.168.175.140:5000/discrete",headers:{"Content-Type":"application/json"},data:JSON.stringify({codes:e.code,weights:e.weight,cash:t})}).then((function(e){n=e.data})).catch((function(e){})),n)})({code:a,weight:n.values}).then((e=>{o(e)})),(0,z.o)({code:a,weight:n.values}).then((e=>{c(e)}))}),[n,t,e]),a.createElement(fe.Z,{onClose:()=>{l()},"aria-labelledby":"simple-dialog-title",open:t,maxWidth:"md"},a.createElement("div",{className:r.root},a.createElement("h1",{style:{paddingLeft:"300px"}},"최종 투자 정보"),a.createElement("div",{style:{float:"left",width:"50%"}},void 0!==s?a.createElement("div",{style:{paddingLeft:"60px",paddingTop:"30px"}},a.createElement("div",{style:{fontSize:"1.2rem",paddingLeft:"100px"}}," 예상 투자 실적"),a.createElement(N.Z,{data:[{x:s.days,y:s.values.map((e=>Math.round(1e3*e))),mode:"lines",line:{shape:"spline"},name:"Lines"}],layout:{margin:{t:0,b:30,r:50,l:0},width:300,height:200,showlegend:!1,xaxis:{tickformat:"%Y %b %d"},yaxis:{side:"right"}},config:{displayModeBar:!1}}),a.createElement("div",{className:r.backTestDescription},a.createElement("div",null," 1000만원 투자시"),a.createElement("div",null,"예상 평가액 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}}," ",Math.round(1e3*s.values[s.values.length-1])),"만원"),a.createElement("div",null,"예상 수익율 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}}," ",Math.round(100*s.values[s.values.length-1])),"%"))):a.createElement("div",null,a.createElement(L.Z,{width:300,height:200,description:"ETF 분석중..."}))),a.createElement("div",{style:{float:"left",width:"50%"}},a.createElement("div",{style:{paddingLeft:"60px",paddingTop:"20px"}},void 0!==i?a.createElement("div",null,a.createElement("div",{style:{width:"100px",float:"left"}}," 총 투자 금액 :"),a.createElement("div",null," 1000만원"),a.createElement("div",{style:{width:"100px",float:"left"}}," 남은 금액 :"),a.createElement("div",null," ",Math.round(i.remains/1e4),"만원"),a.createElement("br",null),a.createElement(Ne,{amounts:i.amounts})):a.createElement("div",null,a.createElement(L.Z,{width:300,height:200,description:"ETF 분석중..."})))),a.createElement(m.Z,{variant:"contained",color:"primary",size:"medium",style:{position:"absolute",bottom:"10px",right:"10px"}},"Buy")))}var ze=n(6210);const Le=(0,l.Z)((e=>(0,r.Z)({root:{width:"800px",height:"500px"},card:{boxShadow:"0 4px 8px 0 rgba(0, 0, 0, 0.2)",width:"800px",height:"500px",margin:"10px 100px 100px 100px",position:"relative"},stockSlider:{float:"left",paddingLeft:"80px",paddingRight:"10px",maxHeight:"300px",overflowY:"scroll",overflowX:"hidden"},button:{"& .MuiSvgIcon-root":{transition:"all 0.3s ease"},"&:hover":{background:"#B6EBFF",boxShadow:"0 16px 24px 0 rgba(172, 34, 34, 0.2)",cursor:"pointer","& .MuiSvgIcon-root":{transform:"rotate(180deg)"}}},"@global":{"*::-webkit-scrollbar":{width:"0.4em"},"*::-webkit-scrollbar-track":{"-webkit-box-shadow":"inset 0 0 6px rgba(0,0,0,0.00)"},"*::-webkit-scrollbar-thumb":{backgroundColor:"#2E2E2E",outline:"1px solid #E6E6FF",borderRadius:"20px"}}}))),Te=({holdings:e})=>{const t=Le();let{selectedPF:n,setSelectedPF:l}=(0,a.useContext)(oe);void 0===n&&(n={returns:0,risk:0,sharpe:0,weights:{items:["none"],values:[1]}});const r=[...n.weights.values],[i,o]=(0,a.useState)({items:[...n.weights.items],values:[...n.weights.values]}),s=(e,t)=>{let n={items:[...i.items],values:[...i.values]};n.values[n.items.indexOf(e)]=t,o(n)},[c,d]=a.useState(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:t.root},a.createElement(v.Z,{className:t.card},a.createElement("h2",{style:{paddingLeft:"300px"}},"포트폴리오 최종 결정"),a.createElement("div",{style:{float:"left",width:"50%"}},a.createElement("div",{style:{paddingLeft:"60px",paddingTop:"20px"}},a.createElement(N.Z,{data:[{labels:i.items,values:i.values,type:"pie",hoverinfo:"label+percent",textinfo:"label+percent",textfont:{size:15,family:"",color:""},sort:!1,textposition:"inside",insidetextorientation:"horizontal"}],layout:{width:300,height:300,margin:{t:30,b:20,r:0,l:0},showlegend:!1},config:{displayModeBar:!1}}))),a.createElement("div",{style:{float:"left",width:"50%"}},a.createElement(m.Z,{className:t.button,style:{float:"right",marginRight:"60px"},onClick:()=>{o({items:[...i.items],values:[...r]})}},a.createElement(ze.Z,null)," 되돌리기"),a.createElement("div",{className:t.stockSlider},i.values.map(((e,t)=>a.createElement(he,{name:i.items[t],value:e,key:i.items[t],onChange:s})))),a.createElement(m.Z,{variant:"contained",color:"primary",size:"medium",style:{position:"absolute",bottom:"10px",right:"10px"},onClick:()=>{d(!0)}},"confirm"),a.createElement(Pe,{holdings:e,finalWeightList:i,open:c,onClose:()=>{d(!1)}})))))},Me=(0,l.Z)((e=>(0,r.Z)({root:{width:"100%"},button:{marginTop:e.spacing(1),marginRight:e.spacing(1)},actionsContainer:{marginBottom:e.spacing(2)},resetContainer:{padding:e.spacing(3)}})));function Ie(){const e=Me(),[t,n]=a.useState(0),l=["Choose Stock","Select Portfolio","Confirm Portfolio"],r=()=>{n((e=>e+1))},u=()=>{n((e=>e-1))},[h,f]=a.useState([{name:"SK하이닉스",code:"003550"},{name:"LG",code:"005380"},{name:"현대차",code:"036570"},{name:"삼성전자",code:"035720"},{name:"한국전력",code:"000660"},{name:"카카오",code:"015760"},{name:"엔씨소프트",code:"005930"},{name:"셀트리온",code:"068270"}]),g=(e,t)=>{f((n=>n.map((n=>n.name!==e?n:{name:n.name,code:n.code,weight:t}))))},v=(e,t)=>{h.find((n=>n.name===e||n.code===t))||f((n=>n.concat({name:e,code:t})))},x=e=>{f((t=>t.filter((t=>t.name!==e))))};return a.createElement("div",{className:e.root},a.createElement(se,null,a.createElement(i.Z,{activeStep:t,orientation:"vertical"},l.map(((n,i)=>a.createElement(o.Z,{key:n},a.createElement(s.Z,null,n),a.createElement(c.Z,null,function({step:e,holdings:t,onChange:n,onDelete:l,onAdd:r}){switch(e){case 0:return a.createElement(E,{holdings:t,onChange:n,onDelete:l,onAdd:r});case 1:return a.createElement(me,{holdings:t});case 2:return a.createElement(Te,{holdings:t});default:return"Unknown step"}}({step:i,holdings:h,onAdd:v,onChange:g,onDelete:x}),a.createElement("div",{className:e.actionsContainer},a.createElement("div",null,a.createElement(m.Z,{disabled:0===t,onClick:u,className:e.button},"Back"),a.createElement(m.Z,{variant:"contained",color:"primary",onClick:r,className:e.button},t===l.length-1?"Finish":"Next"))))))))),t===l.length&&a.createElement(d.Z,{square:!0,elevation:0,className:e.resetContainer},a.createElement(p.Z,null,"All steps completed - you're finished"),a.createElement(m.Z,{onClick:()=>{n(0)},className:e.button},"Reset")))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9zcmMvY29tcG9uZW50L21haW4vY3JlYXRlUGFnZS9jb21wb25lbnQvc3RvY2tDaGlwR3JvdXAvU3RvY2tDaGlwR3JvdXAudHN4Iiwid2VicGFjazovL215LWFwcC8uL3NyYy9jb21wb25lbnQvbWFpbi9jcmVhdGVQYWdlL2NvbXBvbmVudC9zZWxlY3RlZFBvcnRmb2xpby9jb21wb25lbnQvQ3VycmVudFNlbGVjdGVkUEYudHN4Iiwid2VicGFjazovL215LWFwcC8uL3NyYy9jb21wb25lbnQvbWFpbi9jcmVhdGVQYWdlL2NvbXBvbmVudC9zZWxlY3RlZFBvcnRmb2xpby9jb21wb25lbnQvdGFwQ29tcG9uZW50L1RhcEVmZmljaWVudEZyb250aWVyLnRzeCIsIndlYnBhY2s6Ly9teS1hcHAvLi9zcmMvY29tcG9uZW50L21haW4vY3JlYXRlUGFnZS9jb21wb25lbnQvc2VsZWN0ZWRQb3J0Zm9saW8vY29tcG9uZW50L3RhcENvbXBvbmVudC9UYXBSZWNvbW1lbmRQb3J0Zm9saW8udHN4Iiwid2VicGFjazovL215LWFwcC8uL3NyYy9jb21wb25lbnQvbWFpbi9jcmVhdGVQYWdlL2NvbXBvbmVudC9zZWxlY3RlZFBvcnRmb2xpby9jb21wb25lbnQvdGFwQ29tcG9uZW50L1RhcEVmZmljaWVudEZyb250aWVyQUkudHN4Iiwid2VicGFjazovL215LWFwcC8uL3NyYy9jb21wb25lbnQvbWFpbi9jcmVhdGVQYWdlL2NvbXBvbmVudC9zZWxlY3RlZFBvcnRmb2xpby9jb21wb25lbnQvdGFwQ29tcG9uZW50L1RhcFNpbWlsYXJFVEYudHN4Iiwid2VicGFjazovL215LWFwcC8uL3NyYy9jb21wb25lbnQvY29tbW9uL2hvYy9XaXRoTG9hZGluZy50c3giLCJ3ZWJwYWNrOi8vbXktYXBwLy4vc3JjL2NvbXBvbmVudC9tYWluL2NyZWF0ZVBhZ2UvY29tcG9uZW50L3NlbGVjdGVkUG9ydGZvbGlvL2NvbXBvbmVudC9Qb3J0Zm9saW9UYWJMYXlvdXQudHN4Iiwid2VicGFjazovL215LWFwcC8uL3NyYy9jb21wb25lbnQvY29tbW9uL3dpZGdldC9TZWxlY3RlZFBGU2tlbGV0b24udHN4Iiwid2VicGFjazovL215LWFwcC8uL3NyYy9jb250ZXh0cy9TZWxlY3RlZFBvcnRGb2xpb0NvbnRleHQudHN4Iiwid2VicGFjazovL215LWFwcC8uL3NyYy9jb21wb25lbnQvbWFpbi9jcmVhdGVQYWdlL2NvbXBvbmVudC9zZWxlY3RlZFBvcnRmb2xpby9TZWxlY3RlZFBvcnRmb2xpby50c3giLCJ3ZWJwYWNrOi8vbXktYXBwLy4vc3JjL2NvbXBvbmVudC9tYWluL2NyZWF0ZVBhZ2UvY29tcG9uZW50L2NvbmZpcm1Qb3J0Zm9saW8vY29tcG9uZW50L1dlaWdodFNsaWRlci50c3giLCJ3ZWJwYWNrOi8vbXktYXBwLy4vc3JjL3NlcnZpY2UvZ2V0RGlzY3JldGVBbW91bnQudHN4Iiwid2VicGFjazovL215LWFwcC8uL3NyYy9jb21wb25lbnQvbWFpbi9jcmVhdGVQYWdlL2NvbXBvbmVudC9jb25maXJtUG9ydGZvbGlvL2NvbXBvbmVudC9TdG9ja1RhYmxlLnRzeCIsIndlYnBhY2s6Ly9teS1hcHAvLi9zcmMvY29tcG9uZW50L21haW4vY3JlYXRlUGFnZS9jb21wb25lbnQvY29uZmlybVBvcnRmb2xpby9jb21wb25lbnQvQ29uZmlybURpYWxvZy50c3giLCJ3ZWJwYWNrOi8vbXktYXBwLy4vc3JjL2NvbXBvbmVudC9tYWluL2NyZWF0ZVBhZ2UvY29tcG9uZW50L2NvbmZpcm1Qb3J0Zm9saW8vQ29uZmlybVBvcnRmb2xpby50c3giLCJ3ZWJwYWNrOi8vbXktYXBwLy4vc3JjL2NvbXBvbmVudC9tYWluL2NyZWF0ZVBhZ2UvQ3JlYXRlUGFnZS50c3giXSwibmFtZXMiOlsidXNlU3R5bGVzIiwibWFrZVN0eWxlcyIsInRoZW1lIiwiY3JlYXRlU3R5bGVzIiwicm9vdCIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsImZsZXhXcmFwIiwibGlzdFN0eWxlIiwid2lkdGgiLCJwYWRkaW5nIiwic3BhY2luZyIsIm1hcmdpbiIsIm1heFdpZHRoIiwiY2hpcCIsInZpc2liaWxpdHkiLCJwbGFjZUhvbGRlclRleHQiLCJmb250U2l6ZSIsImNvbG9yIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsImJ1dHRvbiIsImhlaWdodCIsImJvcmRlclJhZGl1cyIsInRyYW5zaXRpb24iLCJtYXJnaW5SaWdodCIsImJhY2tncm91bmQiLCJib3hTaGFkb3ciLCJjdXJzb3IiLCJ0cmFuc2Zvcm0iLCJTdG9ja0NoaXBHcm91cCIsImhvbGRpbmdzIiwib25DaGFuZ2UiLCJvbkRlbGV0ZSIsIm9uQWRkIiwiY2xhc3NlcyIsIlBhcGVyIiwiZWxldmF0aW9uIiwic3R5bGUiLCJjb21wb25lbnQiLCJjbGFzc05hbWUiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJtYXAiLCJpdGVtIiwia2V5IiwibmFtZSIsIkNoaXAiLCJhdmF0YXIiLCJBdmF0YXIiLCJsYWJlbCIsIkFkZFN0b2NrIiwic3RvY2tMaXN0Iiwic2VsZWN0ZWRQRiIsIlBvcnRmb2xpb0luZm9DYXJkIiwidmFsdWVzIiwid2VpZ2h0cyIsImxhYmVscyIsIml0ZW1zIiwidGl0bGUiLCJ2b2xhdGlsaXR5IiwicmlzayIsInJldHVybnMiLCJzaGFycGUiLCJpbmZvQ2FyZCIsImZsb2F0IiwidGV4dEFsaWduIiwiZGVzY3JpcHRpb24iLCJmb250V2VpZ2h0IiwibGV0dGVyU3BhY2luZyIsImxpbmVIZWlnaHQiLCJFZkV4cGxhaW5JY29uIiwicGFkZGluZ0xlZnQiLCJmb250U3R5bGUiLCJiYWNrVGVzdERlc2NyaXB0aW9uIiwidGVzdCIsImJhY2tncm91bmRDb2xvciIsIm51bWJlciIsImFuaW1hdGlvbiIsInRyYW5zaXRpb25zIiwiZWFzaW5nIiwiZWFzZUluT3V0IiwibnVtYmVyRG93biIsIm9wYWNpdHkiLCJoYW5kbGVTZWxlY3RlZFBGIiwiZnJvbnRpZXJEYXRhIiwiY2xpY2tlZFBGIiwic2V0Q2xpY2tlZFBGIiwidXNlU3RhdGUiLCJmcm9udGllciIsImJhY2tUZXN0Iiwic2V0QmFja1Rlc3QiLCJ0ZXN0RmluaXNoIiwic2V0VGVzdEZpbmlzaCIsImhvdmVyUHJpY2UiLCJzZXRIb3ZlclByaWNlIiwiZnJvbnRpZXJYIiwiZnJvbnRpZXJZIiwic3BlY2lmaWNYIiwic3BlY2lmaWNZIiwiZm9yRWFjaCIsInB1c2giLCJzcGVjaWZpYyIsInVzZUVmZmVjdCIsImNvZGVMaXN0IiwiZmluZCIsInRhcmdldCIsImNvZGUiLCJnZXRCYWNrVGVzdCIsIndlaWdodCIsInRoZW4iLCJyZXMiLCJwYWRkaW5nQm90dG9tIiwiRXJyb3IiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJkYXRhIiwieCIsInkiLCJtb2RlIiwibGluZSIsInNoYXBlIiwiaG92ZXJ0ZW1wbGF0ZSIsIm1hcmtlciIsInNpemUiLCJzeW1ib2wiLCJsYXlvdXQiLCJ0IiwiYiIsInIiLCJsIiwieGF4aXMiLCJzaG93dGlja2xhYmVscyIsInlheGlzIiwic2hvd2xlZ2VuZCIsImNvbmZpZyIsImRpc3BsYXlNb2RlQmFyIiwib25DbGljayIsImUiLCJwb2ludHMiLCJwb2ludEluZGV4IiwiZGF5cyIsIk1hdGgiLCJyb3VuZCIsInRpY2tmb3JtYXQiLCJzaWRlIiwib25Ib3ZlciIsImV2ZW50IiwiU3RyaW5nIiwiTG9hZGluZ1Byb2dyZXNzIiwiUG9ydGZvbGlvSW5mb0NhcmRXaXRoQnRuIiwiaW5mbyIsIm9uUGZDbGljayIsInJlY29tbW5lZERhdGEiLCJtaW5fcmlzayIsIm1heF9zaGFycGUiLCJtYXhfcmV0dXJucyIsInNsaWRlciIsIm92ZXJmbG93IiwiY29udGVudCIsInNpbWlsYXJFVEZEYXRhIiwic2ltaWxhckVURiIsImluZGV4IiwiTnVtYmVyIiwicGVyY2VudCIsInRvRml4ZWQiLCJtYXRjaF93ZWlnaHQiLCJsb2FkaW5nTWVzc2FnZSIsIkNvbXBvbmVudCIsIlJlYWN0IiwicmVuZGVyIiwidGhpcyIsInByb3BzIiwibG9hZGluZyIsIlRhYlBhbmVsIiwiY2hpbGRyZW4iLCJ2YWx1ZSIsIm90aGVyIiwicm9sZSIsImhpZGRlbiIsImlkIiwiQm94IiwicCIsIlR5cG9ncmFwaHkiLCJhMTF5UHJvcHMiLCJwYWxldHRlIiwicGFwZXIiLCJUYXBFZmZpY2llbnRGcm9udGllcldpdGhMb2FkaW5nIiwiV2l0aExvYWRpbmciLCJUYXBFZmZpY2llbnRGcm9udGllciIsIlRhcEVmZmljaWVudEZyb250aWVyQUlXaXRoTG9hZGluZyIsIlRhcEVmZmljaWVudEZyb250aWVyQUkiLCJUYXBSZWNvbW1lbmRQb3J0Zm9saW9XaXRoTG9hZGluZyIsIlRhcFJlY29tbWVuZFBvcnRmb2xpbyIsIlRhcFNpbWlsYXJFVEZXaXRoTG9hZGluZyIsIlRhcFNpbWlsYXJFVEYiLCJQb3J0Zm9saW9UYWJMYXlvdXQiLCJmcm9udGllckFJRGF0YSIsInVzZVRoZW1lIiwic2V0VmFsdWUiLCJBcHBCYXIiLCJwb3NpdGlvbiIsIlRhYnMiLCJuZXdWYWx1ZSIsImluZGljYXRvckNvbG9yIiwidGV4dENvbG9yIiwidmFyaWFudCIsIlRhYiIsImF4aXMiLCJkaXJlY3Rpb24iLCJvbkNoYW5nZUluZGV4IiwiZGlyIiwiZmxleERpcmVjdGlvbiIsImFsaWduSXRlbXMiLCJTa2VsZXRvbiIsInBhZGRpbmdUb3AiLCJTZWxlY3RlZFBvcnRGb2xpb0NvbnRleHQiLCJjcmVhdGVDb250ZXh0Iiwic2V0U2VsZWN0ZWRQRiIsInVwZGF0ZUl0ZW1zIiwiU2VsZWN0ZWRQb3J0Rm9saW9Qcm92aWRlciIsImluaXRhbFZhbHVlIiwicHJldmlvdXNQRiIsIlByb3ZpZGVyIiwiQ3VycmVudFNlbGVjdGVkUEZXaXRoTG9hZGluZyIsIkN1cnJlbnRTZWxlY3RlZFBGIiwic2V0RnJvbnRpZXJEYXRhIiwic2V0RnJvbnRpZXJBSURhdGEiLCJzZXRTaW1pbGFyRVRGRGF0YSIsInNldExvYWRpbmciLCJob2xkaW5nc1dlaWdodHMiLCJzZXRIb2xkaW5nc1dlaWdodHMiLCJ0aW1lciIsInVzZUNvbnRleHQiLCJ0YXJnZXRIb2xkaW5ncyIsImhvbGRpbmciLCJnZXRFZmZpY2llbnRGcm9udGllciIsImdldFNpbWlsYXJFVEYiLCJwYWRkaW5nUmlnaHQiLCJwb3J0Zm9saW8iLCJjdXJyZW50Iiwid2luZG93Iiwic2V0VGltZW91dCIsIkRvdWJsZUFycm93IiwiQ2FyZCIsInN0b2NrTmFtZSIsIndoaXRlU3BhY2UiLCJ0ZXh0T3ZlcmZsb3ciLCJXZWlnaHRTbGlkZXIiLCJwcm9wIiwiR3JpZCIsImNvbnRhaW5lciIsImd1dHRlckJvdHRvbSIsInhzIiwiU2xpZGVyIiwibWluIiwibWF4Iiwic3RlcCIsInRlc3RBbW91bnQiLCJhbW91bnRzIiwiYW1vdW50IiwicHJpY2UiLCJyZW1haW5zIiwiY29sdW1ucyIsIm1heEhlaWdodCIsIlN0b2NrVGFibGUiLCJUYWJsZUNvbnRhaW5lciIsIlRhYmxlIiwic3RpY2t5SGVhZGVyIiwiVGFibGVIZWFkIiwiVGFibGVSb3ciLCJjb2x1bW4iLCJUYWJsZUNlbGwiLCJUYWJsZUJvZHkiLCJob3ZlciIsInRhYkluZGV4IiwiYWxpZ24iLCJjYXJkIiwib3V0bGluZSIsIkNvbmZpcm1EaWFsb2ciLCJvcGVuIiwiZmluYWxXZWlnaHRMaXN0Iiwib25DbG9zZSIsImRpc2NyZXRlQW1vdW50Iiwic2V0RGlzY3JldGVBbW91bnQiLCJhc3luYyIsImNhc2giLCJyZXN1bHQiLCJzZXJ2aWNlT25PZmYiLCJzbGVlcCIsImF4aW9zIiwibWV0aG9kIiwidXJsIiwiaGVhZGVycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb2RlcyIsInJlc3BvbnNlIiwiY2F0Y2giLCJlcnJvciIsImdldERpc2NyZXRlQW1vdW50IiwiRGlhbG9nIiwiQnV0dG9uIiwiYm90dG9tIiwicmlnaHQiLCJzdG9ja1NsaWRlciIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsIm9yaWdpbmFsV2VpZ2h0Iiwid2VpZ2h0TGlzdCIsInNldFdlaWdodExpc3QiLCJjaGFuZ2VkIiwiaW5kZXhPZiIsInNldE9wZW4iLCJ0eXBlIiwiaG92ZXJpbmZvIiwidGV4dGluZm8iLCJ0ZXh0Zm9udCIsImZhbWlseSIsInNvcnQiLCJ0ZXh0cG9zaXRpb24iLCJpbnNpZGV0ZXh0b3JpZW50YXRpb24iLCJSZWZyZXNoIiwiYWN0aW9uc0NvbnRhaW5lciIsIm1hcmdpbkJvdHRvbSIsInJlc2V0Q29udGFpbmVyIiwiQ3JlYXRlUGFnZSIsImFjdGl2ZVN0ZXAiLCJzZXRBY3RpdmVTdGVwIiwic3RlcHMiLCJoYW5kbGVOZXh0IiwicHJldkFjdGl2ZVN0ZXAiLCJoYW5kbGVCYWNrIiwic2V0SG9sZGluZ3MiLCJjb25jYXQiLCJmaWx0ZXIiLCJTdGVwcGVyIiwib3JpZW50YXRpb24iLCJTdGVwIiwiU3RlcExhYmVsIiwiU3RlcENvbnRlbnQiLCJnZXRTdGVwQ29udGVudCIsImRpc2FibGVkIiwic3F1YXJlIl0sIm1hcHBpbmdzIjoia1FBUUEsTUFBTUEsR0FBWUMsUUFBWUMsSUFDNUJDLE9BQWEsQ0FDWEMsS0FBTSxDQUNKQyxRQUFTLE9BQ1RDLGVBQWdCLE9BQ2hCQyxTQUFVLE9BQ1ZDLFVBQVcsT0FDWEMsTUFBTyxPQUNQQyxRQUFTUixFQUFNUyxRQUFRLElBQ3ZCQyxPQUFRLHNCQUNSQyxTQUFVLFNBRVpDLEtBQU0sQ0FDSkYsT0FBUVYsRUFBTVMsUUFBUSxJQUN0Qix3QkFBeUIsQ0FDdkJJLFdBQVksVUFFZCxVQUFXLENBQ1Qsd0JBQXlCLENBQ3ZCQSxXQUFZLGFBSWxCQyxnQkFBaUIsQ0FDZkMsU0FBVSxTQUNWQyxNQUFPLE9BQ1BDLFVBQVcsTUFDWEMsV0FBWSxRQUVkQyxPQUFRLENBQ05ULE9BQVEsc0JBQ1JGLFFBQVMsb0JBQ1RZLE9BQVEsT0FDUkMsYUFBYyxPQUNkTixTQUFVLE9BRVYscUJBQXNCLENBQ3BCTyxXQUFZLGdCQUNaQyxZQUFhLFFBRWYsVUFBVyxDQUNUUCxNQUFPLFFBQ1BRLFdBQVksVUFDWkMsVUFBVyxzQ0FDWEMsT0FBUSxVQUNSLHFCQUFzQixDQUNwQkMsVUFBVyx1QkFjTixTQUFTQyxHQUFlLFNBQUVDLEVBQUYsU0FBWUMsRUFBWixTQUFzQkMsRUFB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LFVBQVdMLEVBQVFkLFFBQWpEIiwiZmlsZSI6IjE5NS5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNyZWF0ZVN0eWxlcywgbWFrZVN0eWxlcywgVGhlbWUgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XHJcbmltcG9ydCBDaGlwIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9DaGlwXCI7XHJcbmltcG9ydCBQYXBlciBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvUGFwZXJcIjtcclxuaW1wb3J0IHsgQXZhdGFyIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XHJcbmltcG9ydCBBZGRTdG9jayBmcm9tIFwic3JjL2NvbXBvbmVudC9jb21tb24vYWRkU3RvY2svQWRkU3RvY2tcIjtcclxuaW1wb3J0IHsgSG9sZGluZyB9IGZyb20gXCIuLi8uLi9DcmVhdGVQYWdlXCI7XHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZTogVGhlbWUpID0+XHJcbiAgY3JlYXRlU3R5bGVzKHtcclxuICAgIHJvb3Q6IHtcclxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXHJcbiAgICAgIGp1c3RpZnlDb250ZW50OiBcImxlZnRcIixcclxuICAgICAgZmxleFdyYXA6IFwid3JhcFwiLFxyXG4gICAgICBsaXN0U3R5bGU6IFwibm9uZVwiLFxyXG4gICAgICB3aWR0aDogXCIxMDAlXCIsXHJcbiAgICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMC41KSxcclxuICAgICAgbWFyZ2luOiBcIjEwcHggMTBweCAxMHB4IDEwcHhcIixcclxuICAgICAgbWF4V2lkdGg6IFwiODAwcHhcIixcclxuICAgIH0sXHJcbiAgICBjaGlwOiB7XHJcbiAgICAgIG1hcmdpbjogdGhlbWUuc3BhY2luZygwLjUpLFxyXG4gICAgICBcIiYgLk11aUNoaXAtZGVsZXRlSWNvblwiOiB7XHJcbiAgICAgICAgdmlzaWJpbGl0eTogXCJoaWRkZW5cIixcclxuICAgICAgfSxcclxuICAgICAgXCImOmhvdmVyXCI6IHtcclxuICAgICAgICBcIiYgLk11aUNoaXAtZGVsZXRlSWNvblwiOiB7XHJcbiAgICAgICAgICB2aXNpYmlsaXR5OiBcInZpc2libGVcIixcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHBsYWNlSG9sZGVyVGV4dDoge1xyXG4gICAgICBmb250U2l6ZTogXCIwLjhyZW1cIixcclxuICAgICAgY29sb3I6IFwiZ3JheVwiLFxyXG4gICAgICBtYXJnaW5Ub3A6IFwiNHB4XCIsXHJcbiAgICAgIG1hcmdpbkxlZnQ6IFwiMTBweFwiLFxyXG4gICAgfSxcclxuICAgIGJ1dHRvbjoge1xyXG4gICAgICBtYXJnaW46IFwiMTBweCAxMHB4IDEwcHggMTBweFwiLFxyXG4gICAgICBwYWRkaW5nOiBcIjBweCAyMHB4IDBweCAxMHB4XCIsXHJcbiAgICAgIGhlaWdodDogXCIycmVtXCIsXHJcbiAgICAgIGJvcmRlclJhZGl1czogXCIxMHB4XCIsXHJcbiAgICAgIGZvbnRTaXplOiBcIjFyZW1cIixcclxuXHJcbiAgICAgIFwiJiAuTXVpU3ZnSWNvbi1yb290XCI6IHtcclxuICAgICAgICB0cmFuc2l0aW9uOiBcImFsbCAwLjNzIGVhc2VcIixcclxuICAgICAgICBtYXJnaW5SaWdodDogXCIxMHB4XCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIFwiJjpob3ZlclwiOiB7XHJcbiAgICAgICAgY29sb3I6IFwid2hpdGVcIixcclxuICAgICAgICBiYWNrZ3JvdW5kOiBcIiMzMDNGOUZcIixcclxuICAgICAgICBib3hTaGFkb3c6IFwiMCA4cHggMTZweCAwIHJnYmEoMTcyLCAzNCwgMzQsIDAuMilcIixcclxuICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxyXG4gICAgICAgIFwiJiAuTXVpU3ZnSWNvbi1yb290XCI6IHtcclxuICAgICAgICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoOTBkZWcpXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfSlcclxuKTtcclxuXHJcbmludGVyZmFjZSBTdG9ja0xpc3RMYXlvdXRQcm9wIHtcclxuICBob2xkaW5nczogSG9sZGluZ1tdO1xyXG4gIG9uQ2hhbmdlKG5hbWU6IHN0cmluZywgdmFsdWU6IG51bWJlcik6IHZvaWQ7XHJcbiAgb25EZWxldGUobmFtZTogc3RyaW5nKTogdm9pZDtcclxuICBvbkFkZChuYW1lOiBzdHJpbmcsIGNvZGU6IHN0cmluZyk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0b2NrQ2hpcEdyb3VwKHsgaG9sZGluZ3MsIG9uQ2hhbmdlLCBvbkRlbGV0ZSwgb25BZGQgfTogU3RvY2tMaXN0TGF5b3V0UHJvcCkge1xyXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlRGVsZXRlID0gKG5hbWU6IHN0cmluZykgPT4gKCkgPT4ge1xyXG4gICAgb25EZWxldGUobmFtZSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPFBhcGVyIGVsZXZhdGlvbj17MH0gc3R5bGU9e3sgZGlzcGxheTogXCJmbGV4XCIgfX0+XHJcbiAgICAgICAgICA8UGFwZXIgY29tcG9uZW50PVwidWxcIiBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XHJcbiAgICAgICAgICAgIHtob2xkaW5ncy5sZW5ndGggPT09IDAgPyAoXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucGxhY2VIb2xkZXJUZXh0fT7so7zsi50g7LaU6rCAIOuyhO2KvOydhCDtgbTrpq3tlZjsl6wg7KO87Iud7J2EIOy2lOqwgO2VmOyEuOyalDwvZGl2PlxyXG4gICAgICAgICAgICApIDogdW5kZWZpbmVkfVxyXG4gICAgICAgICAgICB7aG9sZGluZ3MubWFwKChpdGVtKSA9PiAoXHJcbiAgICAgICAgICAgICAgPGxpIGtleT17aXRlbS5uYW1lfT5cclxuICAgICAgICAgICAgICAgIDxDaGlwXHJcbiAgICAgICAgICAgICAgICAgIGF2YXRhcj17PEF2YXRhcj5TPC9BdmF0YXI+fVxyXG4gICAgICAgICAgICAgICAgICBsYWJlbD17aXRlbS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICBvbkRlbGV0ZT17aGFuZGxlRGVsZXRlKGl0ZW0ubmFtZSl9XHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5jaGlwfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICApKX1cclxuICAgICAgICAgIDwvUGFwZXI+XHJcbiAgICAgICAgICA8QWRkU3RvY2sgc3RvY2tMaXN0PXtob2xkaW5nc30gb25BZGQ9e29uQWRkfSBvbkNoYW5nZT17b25DaGFuZ2V9IG9uRGVsZXRlPXtvbkRlbGV0ZX0gLz5cclxuICAgICAgICA8L1BhcGVyPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn1cclxuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFBvcnRmb2xpb0luZm9DYXJkIGZyb20gXCJzcmMvY29tcG9uZW50L2NvbW1vbi93aWRnZXQvUG9ydGZvbGlvSW5mb0NhcmRcIjtcclxuaW1wb3J0IHsgUlJTVyB9IGZyb20gXCJzcmMvc2VydmljZS9nZXRFZmZpY2llbnRGcm9udGllclwiO1xyXG5cclxuaW50ZXJmYWNlIEN1cnJlbnRTZWxlY3RlZFBGUHJvcCB7XHJcbiAgc2VsZWN0ZWRQRjogUlJTVztcclxufVxyXG5cclxuY29uc3QgQ3VycmVudFNlbGVjdGVkUEYgPSAoeyBzZWxlY3RlZFBGIH06IEN1cnJlbnRTZWxlY3RlZFBGUHJvcCkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8ZGl2IHN0eWxlPXt7IGZvbnRTaXplOiBcIjEuNXJlbVwiIH19PuyEoO2DneuQnCDtj6ztirjtj7TrpqzsmKQ8L2Rpdj5cclxuICAgICAgPFBvcnRmb2xpb0luZm9DYXJkXHJcbiAgICAgICAgdmFsdWVzPXtzZWxlY3RlZFBGLndlaWdodHMudmFsdWVzfVxyXG4gICAgICAgIGxhYmVscz17c2VsZWN0ZWRQRi53ZWlnaHRzLml0ZW1zfVxyXG4gICAgICAgIHRpdGxlPXtcIlwifVxyXG4gICAgICAgIHZvbGF0aWxpdHk9e3NlbGVjdGVkUEYucmlza31cclxuICAgICAgICByZXR1cm5zPXtzZWxlY3RlZFBGLnJldHVybnN9XHJcbiAgICAgICAgc2hhcnBlPXtzZWxlY3RlZFBGLnNoYXJwZX1cclxuICAgICAgLz5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDdXJyZW50U2VsZWN0ZWRQRjtcclxuIiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MgKi9cclxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXHJcbmltcG9ydCB7IFBhcGVyIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XHJcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQbG90IGZyb20gXCJyZWFjdC1wbG90bHkuanNcIjtcclxuaW1wb3J0IHsgVGhlbWUsIGNyZWF0ZVN0eWxlcywgbWFrZVN0eWxlcyB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXNcIjtcclxuaW1wb3J0IHsgRnJvbnRpZXJEYXRhLCBSUlNXIH0gZnJvbSBcInNyYy9zZXJ2aWNlL2dldEVmZmljaWVudEZyb250aWVyXCI7XHJcbmltcG9ydCBQb3J0Zm9saW9JbmZvQ2FyZFdpdGhCdG4gZnJvbSBcInNyYy9jb21wb25lbnQvY29tbW9uL3dpZGdldC9Qb3J0Zm9saW9JbmZvQ2FyZFdpdGhCdG5cIjtcclxuaW1wb3J0IEVycm9ySWNvbiBmcm9tIFwiQG1hdGVyaWFsLXVpL2ljb25zL0Vycm9yXCI7XHJcbmltcG9ydCB7IEJhY2tUZXN0RGF0YSwgZ2V0QmFja1Rlc3QgfSBmcm9tIFwic3JjL3NlcnZpY2UvZ2V0QmFja1Rlc3RcIjtcclxuaW1wb3J0IExvYWRpbmdQcm9ncmVzcyBmcm9tIFwic3JjL2NvbXBvbmVudC9jb21tb24vd2lkZ2V0L0xvYWRpbmdQcm9ncmVzc1wiO1xyXG5pbXBvcnQgUHJpY2VTY3JvbGxlciBmcm9tIFwiLi9QcmljZVNjcm9sbGVyXCI7XHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZTogVGhlbWUpID0+XHJcbiAgY3JlYXRlU3R5bGVzKHtcclxuICAgIHJvb3Q6IHtcclxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXHJcbiAgICAgIGZsZXhXcmFwOiBcIndyYXBcIixcclxuICAgICAgXCImID4gKlwiOiB7XHJcbiAgICAgICAgbWFyZ2luOiBcImF1dG9cIixcclxuICAgICAgICBmb250U2l6ZTogXCIxLjJyZW1cIixcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBpbmZvQ2FyZDoge1xyXG4gICAgICBmbG9hdDogXCJsZWZ0XCIsXHJcbiAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcclxuICAgIH0sXHJcbiAgICBkZXNjcmlwdGlvbjoge1xyXG4gICAgICBmb250U2l6ZTogXCIxLjFyZW1cIixcclxuICAgICAgXCImID4gZGl2XCI6IHtcclxuICAgICAgICBmb250U2l6ZTogXCIxcmVtXCIsXHJcbiAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIsXHJcbiAgICAgICAgbGV0dGVyU3BhY2luZzogXCIxcHhcIixcclxuICAgICAgICBsaW5lSGVpZ2h0OiBcIjIxNiVcIixcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBFZkV4cGxhaW5JY29uOiB7XHJcbiAgICAgIGZvbnRTaXplOiBcIjEuMnJlbVwiLFxyXG4gICAgICBwYWRkaW5nTGVmdDogXCIycHhcIixcclxuICAgICAgZm9udFN0eWxlOiBcIml0YWxpYyBcIixcclxuICAgICAgZmxvYXQ6IFwibGVmdFwiLFxyXG4gICAgICBjb2xvcjogXCJncmF5XCIsXHJcbiAgICAgIHRyYW5zaXRpb246IFwiYWxsIDAuM3MgZWFzZVwiLFxyXG4gICAgICBcIiY6aG92ZXJcIjoge1xyXG4gICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXHJcbiAgICAgICAgY29sb3I6IFwiYmxhY2tcIixcclxuICAgICAgICB0cmFuc2Zvcm06IFwicm90YXRlKDIwZGVnKVwiLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIGJhY2tUZXN0RGVzY3JpcHRpb246IHtcclxuICAgICAgZm9udFNpemU6IFwiMS4wcmVtXCIsXHJcbiAgICAgIFwiJiA+IGRpdlwiOiB7XHJcbiAgICAgICAgbWFyZ2luTGVmdDogXCIxMHB4XCIsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgdGVzdDoge1xyXG4gICAgICBcIiY6aG92ZXJcIjoge1xyXG4gICAgICAgIFwiJiAkbnVtYmVyXCI6IHtcclxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZWRcIixcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIG51bWJlcjoge1xyXG4gICAgICBhbmltYXRpb246IGAkbXlFZmZlY3QgMTAwMG1zICR7dGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dH1gLFxyXG4gICAgfSxcclxuICAgIG51bWJlckRvd246IHtcclxuICAgICAgYW5pbWF0aW9uOiBgJG15RWZmZWN0RXhpdCAxMDAwbXMgJHt0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0fWAsXHJcbiAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGVZKC0yMDAlKVwiLFxyXG4gICAgfSxcclxuICAgIFwiQGtleWZyYW1lcyBteUVmZmVjdFwiOiB7XHJcbiAgICAgIFwiMCVcIjoge1xyXG4gICAgICAgIG9wYWNpdHk6IDAuNSxcclxuICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlWSgtMjAwJSlcIixcclxuICAgICAgfSxcclxuICAgICAgXCIxMDAlXCI6IHtcclxuICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGVZKDApXCIsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgXCJAa2V5ZnJhbWVzIG15RWZmZWN0RXhpdFwiOiB7XHJcbiAgICAgIFwiMCVcIjoge1xyXG4gICAgICAgIG9wYWNpdHk6IDAuNSxcclxuICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlWSgwKVwiLFxyXG4gICAgICB9LFxyXG4gICAgICBcIjEwMCVcIjoge1xyXG4gICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTIwMCUpXCIsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH0pXHJcbik7XHJcblxyXG5pbnRlcmZhY2UgVGFwRWZmaWNpZW50RnJvbnRpZXJQcm9wIHtcclxuICBoYW5kbGVTZWxlY3RlZFBGOiAocG9ydGZvbGlvOiBSUlNXKSA9PiB2b2lkO1xyXG4gIGZyb250aWVyRGF0YTogRnJvbnRpZXJEYXRhO1xyXG4gIGhvbGRpbmdzOiB7IG5hbWU6IHN0cmluZzsgY29kZTogc3RyaW5nIH1bXTtcclxufVxyXG5cclxuY29uc3QgVGFwRWZmaWNpZW50RnJvbnRpZXIgPSAoeyBoYW5kbGVTZWxlY3RlZFBGLCBmcm9udGllckRhdGEsIGhvbGRpbmdzIH06IFRhcEVmZmljaWVudEZyb250aWVyUHJvcCkgPT4ge1xyXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcclxuXHJcbiAgY29uc3QgW2NsaWNrZWRQRiwgc2V0Q2xpY2tlZFBGXSA9IHVzZVN0YXRlPFJSU1c+KGZyb250aWVyRGF0YS5mcm9udGllclswXSk7XHJcbiAgY29uc3QgW2JhY2tUZXN0LCBzZXRCYWNrVGVzdF0gPSB1c2VTdGF0ZTxCYWNrVGVzdERhdGE+KCk7XHJcbiAgY29uc3QgW3Rlc3RGaW5pc2gsIHNldFRlc3RGaW5pc2hdID0gdXNlU3RhdGU8Qm9vbGVhbj4oZmFsc2UpO1xyXG4gIGNvbnN0IFtob3ZlclByaWNlLCBzZXRIb3ZlclByaWNlXSA9IHVzZVN0YXRlPHN0cmluZz4oXCIxMDAwXCIpO1xyXG4gIC8vbGV0IGhvdmVyUHJpY2UgPSBcIjBcIjtcclxuXHJcbiAgbGV0IGZyb250aWVyWDogbnVtYmVyW10gPSBbXTtcclxuICBsZXQgZnJvbnRpZXJZOiBudW1iZXJbXSA9IFtdO1xyXG4gIGxldCBzcGVjaWZpY1g6IG51bWJlcltdID0gW107XHJcbiAgbGV0IHNwZWNpZmljWTogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgZnJvbnRpZXJEYXRhLmZyb250aWVyLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgIGZyb250aWVyWC5wdXNoKGl0ZW0ucmlzayk7XHJcbiAgICBmcm9udGllclkucHVzaChpdGVtLnJldHVybnMpO1xyXG4gIH0pO1xyXG4gIGZvciAobGV0IGtleSBpbiBmcm9udGllckRhdGEuc3BlY2lmaWMpIHtcclxuICAgIGlmIChrZXkgPT09IFwibWF4X3JldHVybnNcIiB8fCBrZXkgPT09IFwibWF4X3NoYXJwZVwiIHx8IGtleSA9PT0gXCJtaW5fcmlza1wiKSB7XHJcbiAgICAgIHNwZWNpZmljWC5wdXNoKGZyb250aWVyRGF0YS5zcGVjaWZpY1trZXldIS5yaXNrKTtcclxuICAgICAgc3BlY2lmaWNZLnB1c2goZnJvbnRpZXJEYXRhLnNwZWNpZmljW2tleV0hLnJldHVybnMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHNldFRlc3RGaW5pc2goZmFsc2UpO1xyXG4gICAgbGV0IGNvZGVMaXN0ID0gY2xpY2tlZFBGLndlaWdodHMuaXRlbXMubWFwKChpdGVtKSA9PiB7XHJcbiAgICAgIHJldHVybiBob2xkaW5ncy5maW5kKCh0YXJnZXQpID0+ICh0YXJnZXQubmFtZSA9PT0gaXRlbSA/IHRhcmdldC5jb2RlIDogXCJcIikpPy5jb2RlIHx8IFwiXCI7XHJcbiAgICB9KTtcclxuXHJcbiAgICBnZXRCYWNrVGVzdCh7IGNvZGU6IGNvZGVMaXN0LCB3ZWlnaHQ6IGNsaWNrZWRQRi53ZWlnaHRzLnZhbHVlcyB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgc2V0QmFja1Rlc3QocmVzKTtcclxuICAgICAgc2V0VGVzdEZpbmlzaCh0cnVlKTtcclxuICAgIH0pO1xyXG4gIH0sIFtjbGlja2VkUEYsIGhvbGRpbmdzXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPFBhcGVyIGNsYXNzTmFtZT17Y2xhc3Nlcy5pbmZvQ2FyZH0gZWxldmF0aW9uPXswfT5cclxuICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBtYXJnaW5MZWZ0OiBcIjIwcHhcIiB9fT5cclxuICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiBcIjYwcHhcIiwgcGFkZGluZ0JvdHRvbTogXCIycHhcIiwgZmxvYXQ6IFwibGVmdFwiIH19Pu2aqOycqOyggSDqsr3qs4TshKAg66qo6424PC9kaXY+XHJcbiAgICAgICAgICAgICAgPEVycm9ySWNvblxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLkVmRXhwbGFpbkljb259XHJcbiAgICAgICAgICAgICAgICBvbk1vdXNlRW50ZXI9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJvbk1vdXNlRW50ZXJcIik7XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwib25Nb3VzZUxlYXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPFBsb3RcclxuICAgICAgICAgICAgICBkYXRhPXtbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHg6IGZyb250aWVyWCxcclxuICAgICAgICAgICAgICAgICAgeTogZnJvbnRpZXJZLFxyXG4gICAgICAgICAgICAgICAgICBtb2RlOiBcImxpbmVzXCIsXHJcbiAgICAgICAgICAgICAgICAgIGxpbmU6IHsgc2hhcGU6IFwic3BsaW5lXCIgfSxcclxuICAgICAgICAgICAgICAgICAgbmFtZTogXCJFRiDrqqjrjbgg7LaU7LKcXCIsXHJcbiAgICAgICAgICAgICAgICAgIGhvdmVydGVtcGxhdGU6IGA8Yj5SZXR1cm48L2I+OiAle3k6LjVmfTxicj48Yj5SaXNrPC9iPjogJXt4Oi41Zn08YnI+YCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHg6IHNwZWNpZmljWCxcclxuICAgICAgICAgICAgICAgICAgeTogc3BlY2lmaWNZLFxyXG4gICAgICAgICAgICAgICAgICBtb2RlOiBcIm1hcmtlcnNcIixcclxuICAgICAgICAgICAgICAgICAgbmFtZTogXCJEci7tj7TrpqzsmKQg7LaU7LKcXCIsXHJcbiAgICAgICAgICAgICAgICAgIG1hcmtlcjogeyBzaXplOiAxMiwgc3ltYm9sOiBcInN0YXJcIiB9LFxyXG4gICAgICAgICAgICAgICAgICBob3ZlcnRlbXBsYXRlOiBgPGI+UmV0dXJuPC9iPjogJXt5Oi41Zn08YnI+PGI+UmlzazwvYj46ICV7eDouNWZ9PGJyPmAsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAgICAgbGF5b3V0PXt7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IHsgdDogMCwgYjogMTAsIHI6IDAsIGw6IDEwIH0sXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMzAwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDAsXHJcbiAgICAgICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgICBzaG93dGlja2xhYmVsczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBcInJpc2tcIixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgICBzaG93dGlja2xhYmVsczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBcInJldHVyblwiLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNob3dsZWdlbmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgY29uZmlnPXt7IGRpc3BsYXlNb2RlQmFyOiBmYWxzZSB9fVxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHNldENsaWNrZWRQRihmcm9udGllckRhdGEuZnJvbnRpZXJbZS5wb2ludHNbMF0ucG9pbnRJbmRleF0pO1xyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L1BhcGVyPlxyXG5cclxuICAgICAgICAgIDxQYXBlciBjbGFzc05hbWU9e2NsYXNzZXMuaW5mb0NhcmR9IGVsZXZhdGlvbj17MH0+XHJcbiAgICAgICAgICAgIDxkaXY+66qo6424IOyLpO2WiSDqsrDqs7w8L2Rpdj5cclxuICAgICAgICAgICAge3Rlc3RGaW5pc2ggJiYgYmFja1Rlc3QgIT09IHVuZGVmaW5lZCA/IChcclxuICAgICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgPFBsb3RcclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnRlc3R9XHJcbiAgICAgICAgICAgICAgICAgIGRhdGE9e1tcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB4OiBiYWNrVGVzdC5kYXlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgeTogYmFja1Rlc3QudmFsdWVzLm1hcCgoaXRlbSkgPT4gTWF0aC5yb3VuZChpdGVtICogMTAwMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJsaW5lc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbGluZTogeyBzaGFwZTogXCJzcGxpbmVcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJMaW5lc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAgICAgICAgIGxheW91dD17e1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogeyB0OiAwLCBiOiAzMCwgcjogNTAsIGw6IDAgfSxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMzAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dsZWdlbmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aWNrZm9ybWF0OiBcIiVZICViICVkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgc2lkZTogXCJyaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgIGNvbmZpZz17eyBkaXNwbGF5TW9kZUJhcjogZmFsc2UgfX1cclxuICAgICAgICAgICAgICAgICAgb25Ib3Zlcj17KGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnBvaW50c1swXS55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzZXRIb3ZlclByaWNlKFN0cmluZyhldmVudC5wb2ludHNbMF0ueSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmJhY2tUZXN0RGVzY3JpcHRpb259PlxyXG4gICAgICAgICAgICAgICAgICB7LyogPFByaWNlU2Nyb2xsZXIgbnVtYmVyTGVuZ3RoPXtob3ZlclByaWNlLmxlbmd0aH0gY3VycmVudE51bWJlcj17aG92ZXJQcmljZX0gc3VmZml4PXtcIuunjFwifSAvPiAqL31cclxuICAgICAgICAgICAgICAgICAgPGRpdj4gMTAwMOunjOybkCDtiKzsnpDsi5w8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICDstZzsooUg7Y+J6rCA7JWhIDpcclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCJibGFja1wiLCBmb250V2VpZ2h0OiBcImJvbGRcIiwgZm9udFNpemU6IFwiMS4ycmVtXCIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7TWF0aC5yb3VuZChiYWNrVGVzdC52YWx1ZXNbYmFja1Rlc3QudmFsdWVzLmxlbmd0aCAtIDFdICogMTAwMCl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIOunjOybkFxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICDstZzsooUg7IiY7J217JyoIDpcclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCJibGFja1wiLCBmb250V2VpZ2h0OiBcImJvbGRcIiwgZm9udFNpemU6IFwiMS4ycmVtXCIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7TWF0aC5yb3VuZChiYWNrVGVzdC52YWx1ZXNbYmFja1Rlc3QudmFsdWVzLmxlbmd0aCAtIDFdICogMTAwKX1cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgJVxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8TG9hZGluZ1Byb2dyZXNzIHdpZHRoPXszMDB9IGhlaWdodD17MzAwfSBkZXNjcmlwdGlvbj17XCLthYzsiqTtirgg67aE7ISd7KSRLi4uXCJ9IC8+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICA8L1BhcGVyPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZGVzY3JpcHRpb259PlxyXG4gICAgICAgICAgICAmbmJzcDtcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAqIOq4iOyctSDtj6ztirjtj7TrpqzsmKQg66qo6424IDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcInJlZFwiLCBmb250V2VpZ2h0OiBcImJvbGRcIiB9fT5FZmZpY2llbnQgZnJvbnRpZXIg7Zmc7JqpPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAqIOqzvOqxsCA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCJyZWRcIiwgZm9udFdlaWdodDogXCJib2xkXCIgfX0+MzYwIERheXM8L3NwYW4+IOq4iOyctSDsoJXrs7Qg6riw67CYXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPFBvcnRmb2xpb0luZm9DYXJkV2l0aEJ0biB0aXRsZT17XCLtlbTri7kg7Y+s7Yq47Y+066as7JikXCJ9IGluZm89e2NsaWNrZWRQRn0gb25QZkNsaWNrPXtoYW5kbGVTZWxlY3RlZFBGfSAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUYXBFZmZpY2llbnRGcm9udGllcjtcclxuIiwiaW1wb3J0IHsgVGhlbWUsIGNyZWF0ZVN0eWxlcywgbWFrZVN0eWxlcyB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXNcIjtcclxuaW1wb3J0IFBvcnRmb2xpb0luZm9DYXJkV2l0aEJ0biBmcm9tIFwic3JjL2NvbXBvbmVudC9jb21tb24vd2lkZ2V0L1BvcnRmb2xpb0luZm9DYXJkV2l0aEJ0blwiO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IEZyb250aWVyRGF0YSB9IGZyb20gXCJzcmMvc2VydmljZS9nZXRFZmZpY2llbnRGcm9udGllclwiO1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWU6IFRoZW1lKSA9PlxyXG4gIGNyZWF0ZVN0eWxlcyh7XHJcbiAgICByb290OiB7XHJcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxyXG4gICAgICBmbGV4V3JhcDogXCJ3cmFwXCIsXHJcbiAgICAgIFwiJiA+ICpcIjoge1xyXG4gICAgICAgIG1hcmdpbjogXCJhdXRvXCIsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH0pXHJcbik7XHJcblxyXG5pbnRlcmZhY2UgUlJTVyB7XHJcbiAgcmV0dXJuczogbnVtYmVyO1xyXG4gIHJpc2s6IG51bWJlcjtcclxuICBzaGFycGU6IG51bWJlcjtcclxuICB3ZWlnaHRzOiB7XHJcbiAgICBpdGVtczogc3RyaW5nW107XHJcbiAgICB2YWx1ZXM6IG51bWJlcltdO1xyXG4gIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBUYXBSZWNvbW1lbmRQb3J0Zm9saW9Qcm9wIHtcclxuICByZWNvbW1uZWREYXRhOiBGcm9udGllckRhdGE7XHJcbiAgaGFuZGxlU2VsZWN0ZWRQRjogKHBvcnRmb2xpbzogUlJTVykgPT4gdm9pZDtcclxufVxyXG5cclxuaW50ZXJmYWNlIHRlc3RUYXBSZWNvbW1lbmRQb3J0Zm9saW9Qcm9wIHtcclxuICBtaW5fcmlzazogUlJTVztcclxuICBtYXhfcmV0dXJuczogUlJTVztcclxuICBtYXhfc2hhcnBlOiBSUlNXO1xyXG59XHJcblxyXG5jb25zdCBUYXBSZWNvbW1lbmRQb3J0Zm9saW8gPSAoeyBoYW5kbGVTZWxlY3RlZFBGLCByZWNvbW1uZWREYXRhIH06IFRhcFJlY29tbWVuZFBvcnRmb2xpb1Byb3ApID0+IHtcclxuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcbiAgbGV0IHNwZWNpZmljOiB0ZXN0VGFwUmVjb21tZW5kUG9ydGZvbGlvUHJvcCA9IHJlY29tbW5lZERhdGEuc3BlY2lmaWM7XHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9PlxyXG4gICAgICAgIDxQb3J0Zm9saW9JbmZvQ2FyZFdpdGhCdG4gdGl0bGU9e1wi7JWI7KCVIOykkeyLnO2YlVwifSBpbmZvPXtzcGVjaWZpYy5taW5fcmlza30gb25QZkNsaWNrPXtoYW5kbGVTZWxlY3RlZFBGfSAvPlxyXG4gICAgICAgIDxQb3J0Zm9saW9JbmZvQ2FyZFdpdGhCdG4gdGl0bGU9e1wi67C465+w7Iqk7ZiVXCJ9IGluZm89e3NwZWNpZmljLm1heF9zaGFycGV9IG9uUGZDbGljaz17aGFuZGxlU2VsZWN0ZWRQRn0gLz5cclxuICAgICAgICA8UG9ydGZvbGlvSW5mb0NhcmRXaXRoQnRuIHRpdGxlPXtcIuyImOydtSDspJHsi5ztmJVcIn0gaW5mbz17c3BlY2lmaWMubWF4X3JldHVybnN9IG9uUGZDbGljaz17aGFuZGxlU2VsZWN0ZWRQRn0gLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGFwUmVjb21tZW5kUG9ydGZvbGlvO1xyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcyAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmVcIjtcclxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFBsb3QgZnJvbSBcInJlYWN0LXBsb3RseS5qc1wiO1xyXG5pbXBvcnQgeyBUaGVtZSwgY3JlYXRlU3R5bGVzLCBtYWtlU3R5bGVzIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlc1wiO1xyXG5pbXBvcnQgeyBGcm9udGllckRhdGEsIFJSU1cgfSBmcm9tIFwic3JjL3NlcnZpY2UvZ2V0RWZmaWNpZW50RnJvbnRpZXJcIjtcclxuaW1wb3J0IFBvcnRmb2xpb0luZm9DYXJkV2l0aEJ0biBmcm9tIFwic3JjL2NvbXBvbmVudC9jb21tb24vd2lkZ2V0L1BvcnRmb2xpb0luZm9DYXJkV2l0aEJ0blwiO1xyXG5pbXBvcnQgRXJyb3JJY29uIGZyb20gXCJAbWF0ZXJpYWwtdWkvaWNvbnMvRXJyb3JcIjtcclxuaW1wb3J0IHsgQmFja1Rlc3REYXRhLCBnZXRCYWNrVGVzdCB9IGZyb20gXCJzcmMvc2VydmljZS9nZXRCYWNrVGVzdFwiO1xyXG5pbXBvcnQgTG9hZGluZ1Byb2dyZXNzIGZyb20gXCJzcmMvY29tcG9uZW50L2NvbW1vbi93aWRnZXQvTG9hZGluZ1Byb2dyZXNzXCI7XHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZTogVGhlbWUpID0+XHJcbiAgY3JlYXRlU3R5bGVzKHtcclxuICAgIHJvb3Q6IHtcclxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXHJcbiAgICAgIGZsZXhXcmFwOiBcIndyYXBcIixcclxuXHJcbiAgICAgIFwiJiA+ICpcIjoge1xyXG4gICAgICAgIG1hcmdpbjogXCJhdXRvXCIsXHJcbiAgICAgICAgZm9udFNpemU6IFwiMS4ycmVtXCIsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgaW5mb0NhcmQ6IHtcclxuICAgICAgZmxvYXQ6IFwibGVmdFwiLFxyXG4gICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXHJcbiAgICB9LFxyXG4gICAgZGVzY3JpcHRpb246IHtcclxuICAgICAgZm9udFNpemU6IFwiMS4xcmVtXCIsXHJcbiAgICAgIFwiJiA+IGRpdlwiOiB7XHJcbiAgICAgICAgZm9udFNpemU6IFwiMXJlbVwiLFxyXG4gICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxyXG4gICAgICAgIGxldHRlclNwYWNpbmc6IFwiMXB4XCIsXHJcbiAgICAgICAgbGluZUhlaWdodDogXCIyMTYlXCIsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgRWZFeHBsYWluSWNvbjoge1xyXG4gICAgICBmb250U2l6ZTogXCIxLjJyZW1cIixcclxuICAgICAgcGFkZGluZ0xlZnQ6IFwiMnB4XCIsXHJcbiAgICAgIGZvbnRTdHlsZTogXCJpdGFsaWMgXCIsXHJcbiAgICAgIGZsb2F0OiBcImxlZnRcIixcclxuICAgICAgY29sb3I6IFwiZ3JheVwiLFxyXG4gICAgICB0cmFuc2l0aW9uOiBcImFsbCAwLjNzIGVhc2VcIixcclxuICAgICAgXCImOmhvdmVyXCI6IHtcclxuICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxyXG4gICAgICAgIGNvbG9yOiBcImJsYWNrXCIsXHJcbiAgICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZSgyMGRlZylcIixcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBiYWNrVGVzdERlc2NyaXB0aW9uOiB7XHJcbiAgICAgIGZvbnRTaXplOiBcIjEuMHJlbVwiLFxyXG4gICAgICBcIiYgPiBkaXZcIjoge1xyXG4gICAgICAgIG1hcmdpbkxlZnQ6IFwiMTBweFwiLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICB9KVxyXG4pO1xyXG5cclxuaW50ZXJmYWNlIFRhcEVmZmljaWVudEZyb250aWVyQUlQcm9wIHtcclxuICBoYW5kbGVTZWxlY3RlZFBGOiAocG9ydGZvbGlvOiBSUlNXKSA9PiB2b2lkO1xyXG4gIGZyb250aWVyRGF0YTogRnJvbnRpZXJEYXRhO1xyXG4gIGhvbGRpbmdzOiB7IG5hbWU6IHN0cmluZzsgY29kZTogc3RyaW5nIH1bXTtcclxufVxyXG5cclxuY29uc3QgVGFwRWZmaWNpZW50RnJvbnRpZXJBSSA9ICh7IGhhbmRsZVNlbGVjdGVkUEYsIGZyb250aWVyRGF0YSwgaG9sZGluZ3MgfTogVGFwRWZmaWNpZW50RnJvbnRpZXJBSVByb3ApID0+IHtcclxuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcblxyXG4gIGNvbnN0IFtjbGlja2VkUEYsIHNldENsaWNrZWRQRl0gPSB1c2VTdGF0ZTxSUlNXPihmcm9udGllckRhdGEuZnJvbnRpZXJbMF0pO1xyXG4gIGNvbnN0IFtiYWNrVGVzdCwgc2V0QmFja1Rlc3RdID0gdXNlU3RhdGU8QmFja1Rlc3REYXRhPigpO1xyXG4gIGNvbnN0IFt0ZXN0RmluaXNoLCBzZXRUZXN0RmluaXNoXSA9IHVzZVN0YXRlPEJvb2xlYW4+KGZhbHNlKTtcclxuXHJcbiAgbGV0IGZyb250aWVyWDogbnVtYmVyW10gPSBbXTtcclxuICBsZXQgZnJvbnRpZXJZOiBudW1iZXJbXSA9IFtdO1xyXG4gIGxldCBzcGVjaWZpY1g6IG51bWJlcltdID0gW107XHJcbiAgbGV0IHNwZWNpZmljWTogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgZnJvbnRpZXJEYXRhLmZyb250aWVyLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgIGZyb250aWVyWC5wdXNoKGl0ZW0ucmlzayk7XHJcbiAgICBmcm9udGllclkucHVzaChpdGVtLnJldHVybnMpO1xyXG4gIH0pO1xyXG4gIGZvciAobGV0IGtleSBpbiBmcm9udGllckRhdGEuc3BlY2lmaWMpIHtcclxuICAgIGlmIChrZXkgPT09IFwibWF4X3JldHVybnNcIiB8fCBrZXkgPT09IFwibWF4X3NoYXJwZVwiIHx8IGtleSA9PT0gXCJtaW5fcmlza1wiKSB7XHJcbiAgICAgIHNwZWNpZmljWC5wdXNoKGZyb250aWVyRGF0YS5zcGVjaWZpY1trZXldIS5yaXNrKTtcclxuICAgICAgc3BlY2lmaWNZLnB1c2goZnJvbnRpZXJEYXRhLnNwZWNpZmljW2tleV0hLnJldHVybnMpO1xyXG4gICAgfVxyXG4gIH1cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgc2V0VGVzdEZpbmlzaChmYWxzZSk7XHJcbiAgICBsZXQgY29kZUxpc3QgPSBjbGlja2VkUEYud2VpZ2h0cy5pdGVtcy5tYXAoKGl0ZW0pID0+IHtcclxuICAgICAgcmV0dXJuIGhvbGRpbmdzLmZpbmQoKHRhcmdldCkgPT4gKHRhcmdldC5uYW1lID09PSBpdGVtID8gdGFyZ2V0LmNvZGUgOiBcIlwiKSk/LmNvZGUgfHwgXCJcIjtcclxuICAgIH0pO1xyXG5cclxuICAgIGdldEJhY2tUZXN0KHsgY29kZTogY29kZUxpc3QsIHdlaWdodDogY2xpY2tlZFBGLndlaWdodHMudmFsdWVzIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBzZXRCYWNrVGVzdChyZXMpO1xyXG4gICAgICBzZXRUZXN0RmluaXNoKHRydWUpO1xyXG4gICAgfSk7XHJcbiAgfSwgW2NsaWNrZWRQRiwgaG9sZGluZ3NdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9PlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8UGFwZXIgY2xhc3NOYW1lPXtjbGFzc2VzLmluZm9DYXJkfSBlbGV2YXRpb249ezB9PlxyXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpbkxlZnQ6IFwiMjBweFwiIH19PlxyXG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgcGFkZGluZ0xlZnQ6IFwiNjBweFwiLCBwYWRkaW5nQm90dG9tOiBcIjJweFwiLCBmbG9hdDogXCJsZWZ0XCIgfX0+7Zqo7Jyo7KCBIOqyveqzhOyEoCDrqqjrjbg8L2Rpdj5cclxuICAgICAgICAgICAgICA8RXJyb3JJY29uXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuRWZFeHBsYWluSWNvbn1cclxuICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9uTW91c2VFbnRlclwiKTtcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJvbk1vdXNlTGVhdmVcIik7XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8UGxvdFxyXG4gICAgICAgICAgICAgIGRhdGE9e1tcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgeDogZnJvbnRpZXJYLFxyXG4gICAgICAgICAgICAgICAgICB5OiBmcm9udGllclksXHJcbiAgICAgICAgICAgICAgICAgIG1vZGU6IFwibGluZXNcIixcclxuICAgICAgICAgICAgICAgICAgbGluZTogeyBzaGFwZTogXCJzcGxpbmVcIiB9LFxyXG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIkVGIOuqqOuNuCDstpTsspxcIixcclxuICAgICAgICAgICAgICAgICAgaG92ZXJ0ZW1wbGF0ZTogYDxiPlJldHVybjwvYj46ICV7eTouNWZ9PGJyPjxiPlJpc2s8L2I+OiAle3g6LjVmfTxicj5gLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgeDogc3BlY2lmaWNYLFxyXG4gICAgICAgICAgICAgICAgICB5OiBzcGVjaWZpY1ksXHJcbiAgICAgICAgICAgICAgICAgIG1vZGU6IFwibWFya2Vyc1wiLFxyXG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIkRyLu2PtOumrOyYpCDstpTsspxcIixcclxuICAgICAgICAgICAgICAgICAgbWFya2VyOiB7IHNpemU6IDEyLCBzeW1ib2w6IFwic3RhclwiIH0sXHJcbiAgICAgICAgICAgICAgICAgIGhvdmVydGVtcGxhdGU6IGA8Yj5SZXR1cm48L2I+OiAle3k6LjVmfTxicj48Yj5SaXNrPC9iPjogJXt4Oi41Zn08YnI+YCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgXX1cclxuICAgICAgICAgICAgICBsYXlvdXQ9e3tcclxuICAgICAgICAgICAgICAgIG1hcmdpbjogeyB0OiAwLCBiOiAxMCwgcjogMCwgbDogMTAgfSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAzMDAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwMCxcclxuICAgICAgICAgICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgIHNob3d0aWNrbGFiZWxzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgdGl0bGU6IFwicmlza1wiLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgIHNob3d0aWNrbGFiZWxzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgdGl0bGU6IFwicmV0dXJuXCIsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2hvd2xlZ2VuZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICBjb25maWc9e3sgZGlzcGxheU1vZGVCYXI6IGZhbHNlIH19XHJcbiAgICAgICAgICAgICAgb25DbGljaz17KGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0Q2xpY2tlZFBGKGZyb250aWVyRGF0YS5mcm9udGllcltlLnBvaW50c1swXS5wb2ludEluZGV4XSk7XHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvUGFwZXI+XHJcbiAgICAgICAgICA8UGFwZXIgY2xhc3NOYW1lPXtjbGFzc2VzLmluZm9DYXJkfSBlbGV2YXRpb249ezB9PlxyXG4gICAgICAgICAgICA8ZGl2PuuqqOuNuCDsi6Ttlokg6rKw6rO8PC9kaXY+XHJcbiAgICAgICAgICAgIHt0ZXN0RmluaXNoICYmIGJhY2tUZXN0ICE9PSB1bmRlZmluZWQgPyAoXHJcbiAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgIDxQbG90XHJcbiAgICAgICAgICAgICAgICAgIGRhdGE9e1tcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB4OiBiYWNrVGVzdC5kYXlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgeTogYmFja1Rlc3QudmFsdWVzLm1hcCgoaXRlbSkgPT4gTWF0aC5yb3VuZChpdGVtICogMTAwMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJsaW5lc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbGluZTogeyBzaGFwZTogXCJzcGxpbmVcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJMaW5lc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAgICAgICAgIGxheW91dD17e1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogeyB0OiAwLCBiOiAzMCwgcjogNTAsIGw6IDAgfSxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMzAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dsZWdlbmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aWNrZm9ybWF0OiBcIiVZICViICVkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgc2lkZTogXCJyaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgIGNvbmZpZz17eyBkaXNwbGF5TW9kZUJhcjogZmFsc2UgfX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5iYWNrVGVzdERlc2NyaXB0aW9ufT5cclxuICAgICAgICAgICAgICAgICAgPGRpdj4gMTAwMOunjOybkCDtiKzsnpDsi5w8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICDsmIjsg4Eg7Y+J6rCA7JWhIDpcclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCJibGFja1wiLCBmb250V2VpZ2h0OiBcImJvbGRcIiwgZm9udFNpemU6IFwiMS4ycmVtXCIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7XCIgXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICB7TWF0aC5yb3VuZChiYWNrVGVzdC52YWx1ZXNbYmFja1Rlc3QudmFsdWVzLmxlbmd0aCAtIDFdICogMTAwMCl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIOunjOybkFxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICDsmIjsg4Eg7IiY7J217JyoIDpcclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCJibGFja1wiLCBmb250V2VpZ2h0OiBcImJvbGRcIiwgZm9udFNpemU6IFwiMS4ycmVtXCIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7XCIgXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICB7TWF0aC5yb3VuZChiYWNrVGVzdC52YWx1ZXNbYmFja1Rlc3QudmFsdWVzLmxlbmd0aCAtIDFdICogMTAwKX1cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgJVxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8TG9hZGluZ1Byb2dyZXNzIHdpZHRoPXszMDB9IGhlaWdodD17MzAwfSBkZXNjcmlwdGlvbj17XCLthYzsiqTtirgg67aE7ISd7KSRLi4uXCJ9IC8+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICA8L1BhcGVyPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZGVzY3JpcHRpb259PlxyXG4gICAgICAgICAgICAmbmJzcDtcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAqIOq4iOyctSDtj6ztirjtj7TrpqzsmKQg66qo6424IDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcInJlZFwiLCBmb250V2VpZ2h0OiBcImJvbGRcIiB9fT5FZmZpY2llbnQgZnJvbnRpZXIg7Zmc7JqpPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdj4qIERlZXAgbGVhcm5pbmcg66qo64247J2EIO2Gte2VnCDso7zqsIAg67OA64+Z7ISxIOyYiOy4oTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICog6rO86rGwIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcInJlZFwiLCBmb250V2VpZ2h0OiBcImJvbGRcIiB9fT4zMCBEYXlzPC9zcGFuPiDquIjsnLUg7KCV67O0IOq4sOuwmFxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxQb3J0Zm9saW9JbmZvQ2FyZFdpdGhCdG4gdGl0bGU9e1wiQ2xpY2tlZCBNb2RlbFwifSBpbmZvPXtjbGlja2VkUEZ9IG9uUGZDbGljaz17aGFuZGxlU2VsZWN0ZWRQRn0gLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGFwRWZmaWNpZW50RnJvbnRpZXJBSTtcclxuIiwiaW1wb3J0IHsgVGhlbWUsIGNyZWF0ZVN0eWxlcywgbWFrZVN0eWxlcyB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXNcIjtcclxuaW1wb3J0IFBvcnRmb2xpb0luZm9DYXJkV2l0aEJ0biBmcm9tIFwic3JjL2NvbXBvbmVudC9jb21tb24vd2lkZ2V0L1BvcnRmb2xpb0luZm9DYXJkV2l0aEJ0blwiO1xyXG5pbXBvcnQgeyBFVEZEYXRhIH0gZnJvbSBcInNyYy9zZXJ2aWNlL2dldFNpbWlsYXJFVEZcIjtcclxuaW1wb3J0IEF3ZXNvbWVTbGlkZXIgZnJvbSBcInJlYWN0LWF3ZXNvbWUtc2xpZGVyXCI7XHJcbmltcG9ydCBcInJlYWN0LWF3ZXNvbWUtc2xpZGVyL2Rpc3Qvc3R5bGVzLmNzc1wiO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFBhcGVyIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZTogVGhlbWUpID0+XHJcbiAgY3JlYXRlU3R5bGVzKHtcclxuICAgIHJvb3Q6IHtcclxuICAgICAgaGVpZ2h0OiBcIjQ2MHB4XCIsXHJcbiAgICB9LFxyXG4gICAgc2xpZGVyOiB7XHJcbiAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxyXG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxyXG4gICAgfSxcclxuICAgIGNvbnRlbnQ6IHtcclxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXHJcbiAgICAgIGZsZXhXcmFwOiBcIndyYXBcIixcclxuICAgICAgXCImID4gKlwiOiB7XHJcbiAgICAgICAgbWFyZ2luOiBcImF1dG9cIixcclxuICAgICAgICBmb250U2l6ZTogXCIxcmVtXCIsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH0pXHJcbik7XHJcblxyXG5pbnRlcmZhY2UgUlJTVyB7XHJcbiAgcmV0dXJuczogbnVtYmVyO1xyXG4gIHJpc2s6IG51bWJlcjtcclxuICBzaGFycGU6IG51bWJlcjtcclxuICB3ZWlnaHRzOiB7XHJcbiAgICBpdGVtczogc3RyaW5nW107XHJcbiAgICB2YWx1ZXM6IG51bWJlcltdO1xyXG4gIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBUYXBTaW1pbGFyRVRGUHJvcCB7XHJcbiAgaG9sZGluZ3M6IHsgbmFtZTogc3RyaW5nOyBjb2RlOiBzdHJpbmcgfVtdO1xyXG4gIHNpbWlsYXJFVEZEYXRhOiBFVEZEYXRhW107XHJcbiAgaGFuZGxlU2VsZWN0ZWRQRjogKHBvcnRmb2xpbzogUlJTVykgPT4gdm9pZDtcclxufVxyXG5cclxuY29uc3QgVGFwU2ltaWxhckVURiA9ICh7IGhhbmRsZVNlbGVjdGVkUEYsIGhvbGRpbmdzLCBzaW1pbGFyRVRGRGF0YSB9OiBUYXBTaW1pbGFyRVRGUHJvcCkgPT4ge1xyXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcclxuICBsZXQgc2ltaWxhckVURjogRVRGRGF0YVtdID0gc2ltaWxhckVURkRhdGE7XHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9PlxyXG4gICAgICAgIDxBd2Vzb21lU2xpZGVyIGNsYXNzTmFtZT17Y2xhc3Nlcy5zbGlkZXJ9IHN0eWxlPXt7fX0+XHJcbiAgICAgICAgICB7c2ltaWxhckVURi5tYXAoKGl0ZW06IEVURkRhdGEsIGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgbGV0IGluZm8gPSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuczogaXRlbS5yZXR1cm5zLFxyXG4gICAgICAgICAgICAgIHJpc2s6IGl0ZW0ucmlzayxcclxuICAgICAgICAgICAgICBzaGFycGU6IDEsXHJcbiAgICAgICAgICAgICAgd2VpZ2h0czoge1xyXG4gICAgICAgICAgICAgICAgaXRlbXM6IGl0ZW0uaW5mby5tYXAoKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgdmFsdWVzOiBpdGVtLmluZm8ubWFwKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIoKE51bWJlcihpdGVtLnBlcmNlbnQpIC8gMTAwKS50b0ZpeGVkKDIpKTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIO2PrO2VqO2VmOqzoCDsnojripQg7KO87Iud66eMIOq1rO2VmOuKlCDroZzsp4FcclxuICAgICAgICAgICAgLy8gbGV0IG1hdGNoZWRMaXN0ID0gaG9sZGluZ3MuZmlsdGVyKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIC8vICAgcmV0dXJuIGluZm8ud2VpZ2h0cy5pdGVtcy5pbmNsdWRlcyhpdGVtLm5hbWUpO1xyXG4gICAgICAgICAgICAvLyB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50fSBrZXk9e2l0ZW0ubmFtZX0gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBcIndoaXRlXCIgfX0+XHJcbiAgICAgICAgICAgICAgICA8UG9ydGZvbGlvSW5mb0NhcmRXaXRoQnRuIHRpdGxlPXtpdGVtLm5hbWV9IGluZm89e2luZm99IG9uUGZDbGljaz17aGFuZGxlU2VsZWN0ZWRQRn0gLz5cclxuICAgICAgICAgICAgICAgIDxQYXBlciBlbGV2YXRpb249ezB9IHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiBcIjIwcHhcIiwgbWFyZ2luVG9wOiBcIjEyMHB4XCIgfX0+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgZm9udFNpemU6IFwiMS41cmVtXCIgfX0+RVRGIOygleuztDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2PkVURuuqhSA6IHtpdGVtLm5hbWV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXY+7KKF66qp7L2U65OcIDoge2l0ZW0uY29kZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdj7snKDsgqzsnKggOiB7aXRlbS5tYXRjaF93ZWlnaHQudG9GaXhlZCgyKX0lPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXY+7Iic7JyEIDoge2luZGV4ICsgMX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvUGFwZXI+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9KX1cclxuICAgICAgICA8L0F3ZXNvbWVTbGlkZXI+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhcFNpbWlsYXJFVEY7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IExvYWRpbmdQcm9ncmVzcyBmcm9tIFwic3JjL2NvbXBvbmVudC9jb21tb24vd2lkZ2V0L0xvYWRpbmdQcm9ncmVzc1wiO1xyXG5cclxuaW50ZXJmYWNlIFdpdGhMb2FkaW5nUHJvcHMge1xyXG4gIGxvYWRpbmc6IGJvb2xlYW47XHJcbn1cclxuXHJcbmNvbnN0IHdpdGhMb2FkaW5nID1cclxuICAobG9hZGluZ01lc3NhZ2UgPSBcIkxvYWRpbmcuLi5cIiwgd2lkdGggPSBcIjEwMCVcIiwgaGVpZ2h0ID0gXCIxMDAlXCIpID0+XHJcbiAgPFAgZXh0ZW5kcyBvYmplY3Q+KENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxQPikgPT5cclxuICAgIGNsYXNzIFdpdGhMb2FkaW5nIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFAgJiBXaXRoTG9hZGluZ1Byb3BzPiB7XHJcbiAgICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB7IGxvYWRpbmcsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgICAgIHJldHVybiBsb2FkaW5nID8gKFxyXG4gICAgICAgICAgPExvYWRpbmdQcm9ncmVzcyBoZWlnaHQ9e2hlaWdodH0gd2lkdGg9e3dpZHRofSBkZXNjcmlwdGlvbj17bG9hZGluZ01lc3NhZ2V9IC8+XHJcbiAgICAgICAgKSA6IChcclxuICAgICAgICAgIDxDb21wb25lbnQgey4uLihwcm9wcyBhcyBQKX0gLz5cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgd2l0aExvYWRpbmc7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFN3aXBlYWJsZVZpZXdzIGZyb20gXCJyZWFjdC1zd2lwZWFibGUtdmlld3NcIjtcclxuaW1wb3J0IHsgbWFrZVN0eWxlcywgVGhlbWUsIHVzZVRoZW1lIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlc1wiO1xyXG5pbXBvcnQgQXBwQmFyIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9BcHBCYXJcIjtcclxuaW1wb3J0IFRhYnMgZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL1RhYnNcIjtcclxuaW1wb3J0IFRhYiBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvVGFiXCI7XHJcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5XCI7XHJcbmltcG9ydCBCb3ggZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL0JveFwiO1xyXG5pbXBvcnQgVGFwRWZmaWNpZW50RnJvbnRpZXIgZnJvbSBcIi4vdGFwQ29tcG9uZW50L1RhcEVmZmljaWVudEZyb250aWVyXCI7XHJcbmltcG9ydCBUYXBSZWNvbW1lbmRQb3J0Zm9saW8gZnJvbSBcIi4vdGFwQ29tcG9uZW50L1RhcFJlY29tbWVuZFBvcnRmb2xpb1wiO1xyXG5pbXBvcnQgeyBGcm9udGllckRhdGEsIFJSU1cgfSBmcm9tIFwic3JjL3NlcnZpY2UvZ2V0RWZmaWNpZW50RnJvbnRpZXJcIjtcclxuaW1wb3J0IFRhcEVmZmljaWVudEZyb250aWVyQUkgZnJvbSBcIi4vdGFwQ29tcG9uZW50L1RhcEVmZmljaWVudEZyb250aWVyQUlcIjtcclxuaW1wb3J0IHsgRVRGRGF0YSB9IGZyb20gXCJzcmMvc2VydmljZS9nZXRTaW1pbGFyRVRGXCI7XHJcbmltcG9ydCBUYXBTaW1pbGFyRVRGIGZyb20gXCIuL3RhcENvbXBvbmVudC9UYXBTaW1pbGFyRVRGXCI7XHJcbmltcG9ydCB7IEhvbGRpbmcgfSBmcm9tIFwiLi4vLi4vLi4vQ3JlYXRlUGFnZVwiO1xyXG5pbXBvcnQgV2l0aExvYWRpbmcgZnJvbSBcInNyYy9jb21wb25lbnQvY29tbW9uL2hvYy9XaXRoTG9hZGluZ1wiO1xyXG5cclxuaW50ZXJmYWNlIFRhYlBhbmVsUHJvcHMge1xyXG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xyXG4gIGRpcj86IHN0cmluZztcclxuICBpbmRleDogYW55O1xyXG4gIHZhbHVlOiBhbnk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFRhYlBhbmVsKHByb3BzOiBUYWJQYW5lbFByb3BzKSB7XHJcbiAgY29uc3QgeyBjaGlsZHJlbiwgdmFsdWUsIGluZGV4LCAuLi5vdGhlciB9ID0gcHJvcHM7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2XHJcbiAgICAgIHJvbGU9XCJ0YWJwYW5lbFwiXHJcbiAgICAgIGhpZGRlbj17dmFsdWUgIT09IGluZGV4fVxyXG4gICAgICBpZD17YGZ1bGwtd2lkdGgtdGFicGFuZWwtJHtpbmRleH1gfVxyXG4gICAgICBhcmlhLWxhYmVsbGVkYnk9e2BmdWxsLXdpZHRoLXRhYi0ke2luZGV4fWB9XHJcbiAgICAgIHsuLi5vdGhlcn1cclxuICAgID5cclxuICAgICAge3ZhbHVlID09PSBpbmRleCAmJiAoXHJcbiAgICAgICAgPEJveCBwPXszfT5cclxuICAgICAgICAgIDxUeXBvZ3JhcGh5PntjaGlsZHJlbn08L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgPC9Cb3g+XHJcbiAgICAgICl9XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhMTF5UHJvcHMoaW5kZXg6IGFueSkge1xyXG4gIHJldHVybiB7XHJcbiAgICBpZDogYGZ1bGwtd2lkdGgtdGFiLSR7aW5kZXh9YCxcclxuICAgIFwiYXJpYS1jb250cm9sc1wiOiBgZnVsbC13aWR0aC10YWJwYW5lbC0ke2luZGV4fWAsXHJcbiAgfTtcclxufVxyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWU6IFRoZW1lKSA9PiAoe1xyXG4gIHJvb3Q6IHtcclxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxyXG4gICAgd2lkdGg6IDEwMDAsXHJcbiAgICBcIiYgc3BhblwiOiB7XHJcbiAgICAgIGZvbnRTaXplOiBcIjFyZW1cIixcclxuICAgIH0sXHJcbiAgfSxcclxufSkpO1xyXG5cclxuaW50ZXJmYWNlIFBvcnRmb2xpb1RhYkxheW91dFByb3Age1xyXG4gIGhvbGRpbmdzOiBIb2xkaW5nW107XHJcbiAgaGFuZGxlU2VsZWN0ZWRQRjogKHBvcnRmb2xpbzogUlJTVykgPT4gdm9pZDtcclxuICBmcm9udGllckRhdGE6IEZyb250aWVyRGF0YSB8IHVuZGVmaW5lZDtcclxuICBmcm9udGllckFJRGF0YTogRnJvbnRpZXJEYXRhIHwgdW5kZWZpbmVkO1xyXG4gIHNpbWlsYXJFVEZEYXRhOiBFVEZEYXRhW10gfCB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmNvbnN0IFRhcEVmZmljaWVudEZyb250aWVyV2l0aExvYWRpbmcgPSBXaXRoTG9hZGluZyhcIu2PrO2KuO2PtOumrOyYpCDrtoTshJ3spJFcIiwgXCI5MDBweFwiLCBcIjUwOHB4XCIpKFRhcEVmZmljaWVudEZyb250aWVyKTtcclxuY29uc3QgVGFwRWZmaWNpZW50RnJvbnRpZXJBSVdpdGhMb2FkaW5nID0gV2l0aExvYWRpbmcoXCJBSSDrtoTshJ3spJEuLi5cIiwgXCI5MDBweFwiLCBcIjUwOHB4XCIpKFRhcEVmZmljaWVudEZyb250aWVyQUkpO1xyXG5jb25zdCBUYXBSZWNvbW1lbmRQb3J0Zm9saW9XaXRoTG9hZGluZyA9IFdpdGhMb2FkaW5nKFwiRHIu7Y+066as7JikIOy2lOyynOykkS4uLlwiLCBcIjkwMHB4XCIsIFwiNTA4cHhcIikoVGFwUmVjb21tZW5kUG9ydGZvbGlvKTtcclxuY29uc3QgVGFwU2ltaWxhckVURldpdGhMb2FkaW5nID0gV2l0aExvYWRpbmcoXCJFVEYg67aE7ISd7KSRLi4uXCIsIFwiOTAwcHhcIiwgXCI1MDhweFwiKShUYXBTaW1pbGFyRVRGKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBvcnRmb2xpb1RhYkxheW91dCh7XHJcbiAgaG9sZGluZ3MsXHJcbiAgZnJvbnRpZXJEYXRhLFxyXG4gIGZyb250aWVyQUlEYXRhLFxyXG4gIHNpbWlsYXJFVEZEYXRhLFxyXG4gIGhhbmRsZVNlbGVjdGVkUEYsXHJcbn06IFBvcnRmb2xpb1RhYkxheW91dFByb3ApIHtcclxuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xyXG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoMCk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8e30+LCBuZXdWYWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICBzZXRWYWx1ZShuZXdWYWx1ZSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaGFuZGxlQ2hhbmdlSW5kZXggPSAoaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgc2V0VmFsdWUoaW5kZXgpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cclxuICAgICAgPEFwcEJhciBwb3NpdGlvbj1cInN0YXRpY1wiIGNvbG9yPVwiZGVmYXVsdFwiPlxyXG4gICAgICAgIDxUYWJzXHJcbiAgICAgICAgICB2YWx1ZT17dmFsdWV9XHJcbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgaW5kaWNhdG9yQ29sb3I9XCJwcmltYXJ5XCJcclxuICAgICAgICAgIHRleHRDb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgdmFyaWFudD1cImZ1bGxXaWR0aFwiXHJcbiAgICAgICAgICBhcmlhLWxhYmVsPVwiZnVsbCB3aWR0aCB0YWJzIGV4YW1wbGVcIlxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxUYWIgbGFiZWw9XCLrpqzsiqTtgawgdnMuIOuztOyDgVwiIHsuLi5hMTF5UHJvcHMoMCl9IC8+XHJcbiAgICAgICAgICA8VGFiIGxhYmVsPVwiKEFJIOq4sOuwmCkg66as7Iqk7YGsIHZzLiDrs7Tsg4FcIiB7Li4uYTExeVByb3BzKDEpfSAvPlxyXG4gICAgICAgICAgPFRhYiBsYWJlbD1cIkRyLu2PtOumrOyYpCDstpTsspxcIiB7Li4uYTExeVByb3BzKDIpfSAvPlxyXG4gICAgICAgICAgPFRhYiBsYWJlbD1cIuq0gOugqCBFVEYg7LaU7LKcXCIgey4uLmExMXlQcm9wcygzKX0gLz5cclxuICAgICAgICA8L1RhYnM+XHJcbiAgICAgIDwvQXBwQmFyPlxyXG4gICAgICA8U3dpcGVhYmxlVmlld3NcclxuICAgICAgICBheGlzPXt0aGVtZS5kaXJlY3Rpb24gPT09IFwicnRsXCIgPyBcIngtcmV2ZXJzZVwiIDogXCJ4XCJ9XHJcbiAgICAgICAgaW5kZXg9e3ZhbHVlfVxyXG4gICAgICAgIG9uQ2hhbmdlSW5kZXg9e2hhbmRsZUNoYW5nZUluZGV4fVxyXG4gICAgICA+XHJcbiAgICAgICAgPFRhYlBhbmVsIHZhbHVlPXt2YWx1ZX0gaW5kZXg9ezB9IGRpcj17dGhlbWUuZGlyZWN0aW9ufT5cclxuICAgICAgICAgIDxUYXBFZmZpY2llbnRGcm9udGllcldpdGhMb2FkaW5nXHJcbiAgICAgICAgICAgIGxvYWRpbmc9e2Zyb250aWVyRGF0YSA9PT0gdW5kZWZpbmVkfVxyXG4gICAgICAgICAgICBoYW5kbGVTZWxlY3RlZFBGPXtoYW5kbGVTZWxlY3RlZFBGfVxyXG4gICAgICAgICAgICBob2xkaW5ncz17aG9sZGluZ3N9XHJcbiAgICAgICAgICAgIGZyb250aWVyRGF0YT17ZnJvbnRpZXJEYXRhIX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9UYWJQYW5lbD5cclxuICAgICAgICA8VGFiUGFuZWwgdmFsdWU9e3ZhbHVlfSBpbmRleD17MX0gZGlyPXt0aGVtZS5kaXJlY3Rpb259PlxyXG4gICAgICAgICAgPFRhcEVmZmljaWVudEZyb250aWVyQUlXaXRoTG9hZGluZ1xyXG4gICAgICAgICAgICBsb2FkaW5nPXtmcm9udGllckFJRGF0YSA9PT0gdW5kZWZpbmVkfVxyXG4gICAgICAgICAgICBoYW5kbGVTZWxlY3RlZFBGPXtoYW5kbGVTZWxlY3RlZFBGfVxyXG4gICAgICAgICAgICBob2xkaW5ncz17aG9sZGluZ3N9XHJcbiAgICAgICAgICAgIGZyb250aWVyRGF0YT17ZnJvbnRpZXJBSURhdGEhfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L1RhYlBhbmVsPlxyXG4gICAgICAgIDxUYWJQYW5lbCB2YWx1ZT17dmFsdWV9IGluZGV4PXsyfSBkaXI9e3RoZW1lLmRpcmVjdGlvbn0+XHJcbiAgICAgICAgICA8VGFwUmVjb21tZW5kUG9ydGZvbGlvV2l0aExvYWRpbmdcclxuICAgICAgICAgICAgbG9hZGluZz17ZnJvbnRpZXJEYXRhID09PSB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgIGhhbmRsZVNlbGVjdGVkUEY9e2hhbmRsZVNlbGVjdGVkUEZ9XHJcbiAgICAgICAgICAgIHJlY29tbW5lZERhdGE9e2Zyb250aWVyRGF0YSF9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvVGFiUGFuZWw+XHJcbiAgICAgICAgPFRhYlBhbmVsIHZhbHVlPXt2YWx1ZX0gaW5kZXg9ezN9IGRpcj17dGhlbWUuZGlyZWN0aW9ufT5cclxuICAgICAgICAgIDxUYXBTaW1pbGFyRVRGV2l0aExvYWRpbmdcclxuICAgICAgICAgICAgbG9hZGluZz17c2ltaWxhckVURkRhdGEgPT09IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgaGFuZGxlU2VsZWN0ZWRQRj17aGFuZGxlU2VsZWN0ZWRQRn1cclxuICAgICAgICAgICAgaG9sZGluZ3M9e2hvbGRpbmdzfVxyXG4gICAgICAgICAgICBzaW1pbGFyRVRGRGF0YT17c2ltaWxhckVURkRhdGEhfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L1RhYlBhbmVsPlxyXG4gICAgICA8L1N3aXBlYWJsZVZpZXdzPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBTa2VsZXRvbiBmcm9tIFwiQG1hdGVyaWFsLXVpL2xhYi9Ta2VsZXRvblwiO1xyXG5cclxuY29uc3QgU2VsZWN0ZWRQRlNrZWxldG9uID0gKCkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6IFwiZmxleFwiLCBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIiwgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIiwgYWxpZ25JdGVtczogXCJjZW50ZXJcIiB9fT5cclxuICAgICAgPFNrZWxldG9uIHZhcmlhbnQ9XCJ0ZXh0XCIgc3R5bGU9e3sgd2lkdGg6IFwiNzAlXCIsIGhlaWdodDogXCIzcmVtXCIgfX0gLz5cclxuICAgICAgPFNrZWxldG9uIHZhcmlhbnQ9XCJjaXJjbGVcIiBzdHlsZT17eyB3aWR0aDogXCIxNXJlbVwiLCBoZWlnaHQ6IFwiMTVyZW1cIiwgcGFkZGluZ1RvcDogXCIxcmVtXCIgfX0gLz5cclxuICAgICAgPGRpdiBzdHlsZT17eyB3aWR0aDogXCIxMDAlXCIsIGRpc3BsYXk6IFwiZmxleFwiLCBqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1hcm91bmRcIiwgcGFkZGluZ1RvcDogXCIxLjVyZW1cIiB9fT5cclxuICAgICAgICA8U2tlbGV0b24gdmFyaWFudD1cInJlY3RcIiB3aWR0aD17XCI0cmVtXCJ9IGhlaWdodD17XCI0cmVtXCJ9IC8+XHJcbiAgICAgICAgPFNrZWxldG9uIHZhcmlhbnQ9XCJyZWN0XCIgd2lkdGg9e1wiNHJlbVwifSBoZWlnaHQ9e1wiNHJlbVwifSAvPlxyXG4gICAgICAgIDxTa2VsZXRvbiB2YXJpYW50PVwicmVjdFwiIHdpZHRoPXtcIjRyZW1cIn0gaGVpZ2h0PXtcIjRyZW1cIn0gLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6IFwiOTAlXCIsIGRpc3BsYXk6IFwiZmxleFwiLCBqdXN0aWZ5Q29udGVudDogXCJmbGV4LWVuZFwiLCBwYWRkaW5nVG9wOiBcIjFyZW1cIiB9fT5cclxuICAgICAgICA8U2tlbGV0b24gdmFyaWFudD1cInJlY3RcIiB3aWR0aD17XCI1cmVtXCJ9IGhlaWdodD17XCIycmVtXCJ9IC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdGVkUEZTa2VsZXRvbjtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbnRlcmZhY2UgUG9ydEZvbGlvU3RhdGUge1xyXG4gIHJldHVybnM6IG51bWJlcjtcclxuICByaXNrOiBudW1iZXI7XHJcbiAgc2hhcnBlOiBudW1iZXI7XHJcbiAgd2VpZ2h0czoge1xyXG4gICAgaXRlbXM6IHN0cmluZ1tdO1xyXG4gICAgdmFsdWVzOiBudW1iZXJbXTtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2VsZWN0ZWRQb3J0Rm9saW9Db250ZXh0ID0gY3JlYXRlQ29udGV4dDx7XHJcbiAgc2VsZWN0ZWRQRjogUG9ydEZvbGlvU3RhdGUgfCB1bmRlZmluZWQ7XHJcbiAgc2V0U2VsZWN0ZWRQRjogKHBmOiBQb3J0Rm9saW9TdGF0ZSkgPT4gdm9pZDtcclxuICB1cGRhdGVJdGVtczogKGl0ZW1zOiBzdHJpbmdbXSkgPT4gdm9pZDtcclxufT4oe1xyXG4gIHNlbGVjdGVkUEY6IHVuZGVmaW5lZCxcclxuICBzZXRTZWxlY3RlZFBGKCkge30sXHJcbiAgdXBkYXRlSXRlbXMoKSB7fSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgU2VsZWN0ZWRQb3J0Rm9saW9Qcm92aWRlcjogUmVhY3QuRkMgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XHJcbiAgY29uc3QgW3NlbGVjdGVkUEYsIHNldFNlbGVjdGVkUEZdID0gdXNlU3RhdGU8UG9ydEZvbGlvU3RhdGUgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XHJcblxyXG4gIGNvbnN0IHVwZGF0ZUl0ZW1zID0gKGl0ZW1zOiBzdHJpbmdbXSkgPT4ge1xyXG4gICAgaWYgKHNlbGVjdGVkUEYgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgbGV0IHByZXZpb3VzUEYgPSBzZWxlY3RlZFBGO1xyXG4gICAgcHJldmlvdXNQRi53ZWlnaHRzLml0ZW1zID0gaXRlbXM7XHJcbiAgICBzZXRTZWxlY3RlZFBGKHByZXZpb3VzUEYpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGluaXRhbFZhbHVlID0ge1xyXG4gICAgc2VsZWN0ZWRQRjogc2VsZWN0ZWRQRixcclxuICAgIHNldFNlbGVjdGVkUEY6IHNldFNlbGVjdGVkUEYsXHJcbiAgICB1cGRhdGVJdGVtczogdXBkYXRlSXRlbXMsXHJcbiAgfTtcclxuICByZXR1cm4gPFNlbGVjdGVkUG9ydEZvbGlvQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17aW5pdGFsVmFsdWV9PntjaGlsZHJlbn08L1NlbGVjdGVkUG9ydEZvbGlvQ29udGV4dC5Qcm92aWRlcj47XHJcbn07XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xyXG5pbXBvcnQgeyBDYXJkIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XHJcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBMb2FkaW5nUHJvZ3Jlc3MgZnJvbSBcInNyYy9jb21wb25lbnQvY29tbW9uL3dpZGdldC9Mb2FkaW5nUHJvZ3Jlc3NcIjtcclxuaW1wb3J0IHsgRnJvbnRpZXJEYXRhLCBnZXRFZmZpY2llbnRGcm9udGllciwgUlJTVyB9IGZyb20gXCJzcmMvc2VydmljZS9nZXRFZmZpY2llbnRGcm9udGllclwiO1xyXG5pbXBvcnQgQ3VycmVudFNlbGVjdGVkUEYgZnJvbSBcIi4vY29tcG9uZW50L0N1cnJlbnRTZWxlY3RlZFBGXCI7XHJcbmltcG9ydCBQb3J0Zm9saW9UYWJMYXlvdXQgZnJvbSBcIi4vY29tcG9uZW50L1BvcnRmb2xpb1RhYkxheW91dFwiO1xyXG5pbXBvcnQgRG91YmxlQXJyb3dJY29uIGZyb20gXCJAbWF0ZXJpYWwtdWkvaWNvbnMvRG91YmxlQXJyb3dcIjtcclxuaW1wb3J0IHsgRVRGRGF0YSwgZ2V0U2ltaWxhckVURiB9IGZyb20gXCJzcmMvc2VydmljZS9nZXRTaW1pbGFyRVRGXCI7XHJcbmltcG9ydCBTZWxlY3RlZFBGU2tlbGV0b24gZnJvbSBcInNyYy9jb21wb25lbnQvY29tbW9uL3dpZGdldC9TZWxlY3RlZFBGU2tlbGV0b25cIjtcclxuaW1wb3J0IHsgSG9sZGluZyB9IGZyb20gXCIuLi8uLi9DcmVhdGVQYWdlXCI7XHJcbmltcG9ydCBXaXRoTG9hZGluZyBmcm9tIFwic3JjL2NvbXBvbmVudC9jb21tb24vaG9jL1dpdGhMb2FkaW5nXCI7XHJcbmltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgU2VsZWN0ZWRQb3J0Rm9saW9Db250ZXh0IH0gZnJvbSBcInNyYy9jb250ZXh0cy9TZWxlY3RlZFBvcnRGb2xpb0NvbnRleHRcIjtcclxuXHJcbmludGVyZmFjZSBIb2xkaW5nc1dlaWdodCB7XHJcbiAgbmFtZT86IHN0cmluZztcclxuICBjb2RlPzogc3RyaW5nO1xyXG4gIHdlaWdodDogbnVtYmVyO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU2VsZWN0ZWRQb3J0Zm9saW9Qcm9wIHtcclxuICBob2xkaW5nczogSG9sZGluZ1tdO1xyXG4gIC8vIHNlbGVjdGVkUEY6IFJSU1cgfCB1bmRlZmluZWQ7XHJcbiAgLy8gb25DaGFuZ2VTZWxlY3RlZFBGOiAoUEY6IFJSU1cpID0+IHZvaWQ7XHJcbn1cclxuY29uc3QgQ3VycmVudFNlbGVjdGVkUEZXaXRoTG9hZGluZyA9IFdpdGhMb2FkaW5nKCkoQ3VycmVudFNlbGVjdGVkUEYpO1xyXG5cclxuY29uc3QgU2VsZWN0ZWRQb3J0Zm9saW8gPSAoeyBob2xkaW5ncyB9OiBTZWxlY3RlZFBvcnRmb2xpb1Byb3ApID0+IHtcclxuICBjb25zdCBbZnJvbnRpZXJEYXRhLCBzZXRGcm9udGllckRhdGFdID0gdXNlU3RhdGU8RnJvbnRpZXJEYXRhPigpO1xyXG4gIGNvbnN0IFtmcm9udGllckFJRGF0YSwgc2V0RnJvbnRpZXJBSURhdGFdID0gdXNlU3RhdGU8RnJvbnRpZXJEYXRhPigpO1xyXG4gIGNvbnN0IFtzaW1pbGFyRVRGRGF0YSwgc2V0U2ltaWxhckVURkRhdGFdID0gdXNlU3RhdGU8RVRGRGF0YVtdPigpO1xyXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbaG9sZGluZ3NXZWlnaHRzLCBzZXRIb2xkaW5nc1dlaWdodHNdID0gdXNlU3RhdGU8SG9sZGluZ3NXZWlnaHRbXT4oKTtcclxuICBjb25zdCB0aW1lciA9IFJlYWN0LnVzZVJlZjxudW1iZXI+KCk7XHJcblxyXG4gIGNvbnN0IHsgc2VsZWN0ZWRQRiwgc2V0U2VsZWN0ZWRQRiB9ID0gdXNlQ29udGV4dChTZWxlY3RlZFBvcnRGb2xpb0NvbnRleHQpO1xyXG4gIGNvbnN0IGhhbmRsZVNlbGVjdGVkUEYgPSAocG9ydGZvbGlvOiBSUlNXKSA9PiB7XHJcbiAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgY29uc29sZS5sb2coXCJoYW5kbGVTZWxlY3RlZFBGXCIsIHBvcnRmb2xpbyk7XHJcbiAgICBzZXRTZWxlY3RlZFBGKHBvcnRmb2xpbyk7XHJcbiAgICB0aW1lci5jdXJyZW50ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0sIDUwMCk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGxldCB0YXJnZXRIb2xkaW5ncyA9IGhvbGRpbmdzLm1hcCgoaG9sZGluZykgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIG5hbWU6IGhvbGRpbmcubmFtZSxcclxuICAgICAgICBjb2RlOiBob2xkaW5nLmNvZGUsXHJcbiAgICAgICAgd2VpZ2h0OlxyXG4gICAgICAgICAgaG9sZGluZ3NXZWlnaHRzPy5maW5kKChpdGVtOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uY29kZSA9PT0gaG9sZGluZy5jb2RlIHx8IGl0ZW0ubmFtZSA9PT0gaG9sZGluZy5uYW1lO1xyXG4gICAgICAgICAgfSk/LndlaWdodCB8fCAwLFxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgZ2V0RWZmaWNpZW50RnJvbnRpZXIodGFyZ2V0SG9sZGluZ3MsIFwic2VtaV92YXJpYW5jZVwiKS50aGVuKChyZXMpID0+IHtcclxuICAgICAgc2V0RnJvbnRpZXJEYXRhKHJlcyk7XHJcbiAgICB9KTtcclxuICAgIGdldEVmZmljaWVudEZyb250aWVyKHRhcmdldEhvbGRpbmdzLCBcInNlbWlfYWJzb2x1dGVcIikudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIHNldEZyb250aWVyQUlEYXRhKHJlcyk7XHJcbiAgICB9KTtcclxuICAgIGdldFNpbWlsYXJFVEYodGFyZ2V0SG9sZGluZ3MpLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBzZXRTaW1pbGFyRVRGRGF0YShyZXMpO1xyXG4gICAgfSk7XHJcbiAgfSwgW2hvbGRpbmdzLCBob2xkaW5nc1dlaWdodHNdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiU2VsZWN0ZWRQb3J0Zm9saW9cIiBzdHlsZT17eyBkaXNwbGF5OiBcImZsZXhcIiB9fT5cclxuICAgICAgICA8ZGl2IHN0eWxlPXt7IHBhZGRpbmdSaWdodDogXCIyMHB4XCIgfX0+XHJcbiAgICAgICAgICA8UG9ydGZvbGlvVGFiTGF5b3V0XHJcbiAgICAgICAgICAgIGhhbmRsZVNlbGVjdGVkUEY9e2hhbmRsZVNlbGVjdGVkUEZ9XHJcbiAgICAgICAgICAgIGhvbGRpbmdzPXtob2xkaW5nc31cclxuICAgICAgICAgICAgZnJvbnRpZXJEYXRhPXtmcm9udGllckRhdGF9XHJcbiAgICAgICAgICAgIGZyb250aWVyQUlEYXRhPXtmcm9udGllckFJRGF0YX1cclxuICAgICAgICAgICAgc2ltaWxhckVURkRhdGE9e3NpbWlsYXJFVEZEYXRhfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8RG91YmxlQXJyb3dJY29uIHN0eWxlPXt7IGZvbnRTaXplOiBcIjVyZW1cIiwgbWFyZ2luOiBcImF1dG9cIiwgbWFyZ2luTGVmdDogXCIxMHB4XCIsIG1hcmdpblJpZ2h0OiBcIjEwcHhcIiB9fSAvPlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8Q2FyZCBzdHlsZT17eyB3aWR0aDogXCIxNy41cmVtXCIsIGhlaWdodDogXCIyOHJlbVwiLCB0ZXh0QWxpZ246IFwiY2VudGVyXCIsIG1hcmdpblRvcDogXCI3M3B4XCIgfX0+XHJcbiAgICAgICAgICAgIHtzZWxlY3RlZFBGID09PSB1bmRlZmluZWQgPyAoXHJcbiAgICAgICAgICAgICAgPFNlbGVjdGVkUEZTa2VsZXRvbiAvPlxyXG4gICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgIDxDdXJyZW50U2VsZWN0ZWRQRldpdGhMb2FkaW5nIGxvYWRpbmc9e2xvYWRpbmd9IHNlbGVjdGVkUEY9e3NlbGVjdGVkUEZ9IC8+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICA8L0NhcmQ+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdGVkUG9ydGZvbGlvO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XHJcbmltcG9ydCBHcmlkIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9HcmlkXCI7XHJcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5XCI7XHJcbmltcG9ydCBTbGlkZXIgZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL1NsaWRlclwiO1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyh7XHJcbiAgcm9vdDoge1xyXG4gICAgd2lkdGg6IDI1MCxcclxuICB9LFxyXG4gIHN0b2NrTmFtZToge1xyXG4gICAgd2lkdGg6IFwiMTAwcHhcIixcclxuICAgIHdoaXRlU3BhY2U6IFwibm93cmFwXCIsXHJcbiAgICB0ZXh0T3ZlcmZsb3c6IFwiZWxsaXBzaXNcIixcclxuICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuaW50ZXJmYWNlIFJhdGlvU2xpZGVyUHJvcCB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHZhbHVlOiBudW1iZXI7XHJcbiAgb25DaGFuZ2UobmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gV2VpZ2h0U2xpZGVyKHByb3A6IFJhdGlvU2xpZGVyUHJvcCkge1xyXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcclxuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlciB8IHN0cmluZyB8IEFycmF5PG51bWJlciB8IHN0cmluZz4+KHByb3AudmFsdWUpO1xyXG4gIGNvbnN0IGhhbmRsZVNsaWRlckNoYW5nZSA9IChldmVudDogYW55LCBuZXdWYWx1ZTogbnVtYmVyIHwgbnVtYmVyW10pID0+IHtcclxuICAgIHNldFZhbHVlKG5ld1ZhbHVlKTtcclxuICAgIHByb3Aub25DaGFuZ2UocHJvcC5uYW1lLCBOdW1iZXIodmFsdWUpKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XHJcbiAgICAgIDxHcmlkIGNvbnRhaW5lciBzcGFjaW5nPXsyfSBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XHJcbiAgICAgICAgPFR5cG9ncmFwaHkgY2xhc3NOYW1lPXtjbGFzc2VzLnN0b2NrTmFtZX0gaWQ9XCJpbnB1dC1zbGlkZXJcIiBndXR0ZXJCb3R0b20+XHJcbiAgICAgICAgICB7cHJvcC5uYW1lfVxyXG4gICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICA8R3JpZCBpdGVtIHhzPlxyXG4gICAgICAgICAgPFNsaWRlclxyXG4gICAgICAgICAgICB2YWx1ZT17dHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiID8gcHJvcC52YWx1ZSA6IDB9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVTbGlkZXJDaGFuZ2V9XHJcbiAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT1cImlucHV0LXNsaWRlclwiXHJcbiAgICAgICAgICAgIG1pbj17MH1cclxuICAgICAgICAgICAgbWF4PXsxfVxyXG4gICAgICAgICAgICBzdGVwPXswLjAwMX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9HcmlkPlxyXG4gICAgICA8L0dyaWQ+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbiIsImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0IHsgc2VydmljZU9uT2ZmLCBzbGVlcCB9IGZyb20gXCIuL3NlcnZpY2VTZXR0aW5nXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERpc2NyZXRlQW1vdW50IHtcclxuICBhbW91bnRzOiBEaXNjcmV0ZUFtb3VudEl0ZW1bXTtcclxuICByZW1haW5zOiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBEaXNjcmV0ZUFtb3VudEl0ZW0ge1xyXG4gIGNvZGU6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgcHJpY2U6IG51bWJlcjtcclxuICBhbW91bnQ6IG51bWJlcjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0b2NrTGlzdCB7XHJcbiAgY29kZTogc3RyaW5nW107XHJcbiAgd2VpZ2h0OiBudW1iZXJbXTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldERpc2NyZXRlQW1vdW50KHN0b2NrTGlzdDogU3RvY2tMaXN0LCBjYXNoOiBudW1iZXIgPSAxMDAwMDAwMCk6IFByb21pc2U8RGlzY3JldGVBbW91bnQgfCB1bmRlZmluZWQ+IHtcclxuICBsZXQgcmVzdWx0OiBEaXNjcmV0ZUFtb3VudCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICBpZiAoc2VydmljZU9uT2ZmID09PSBmYWxzZSkge1xyXG4gICAgcmVzdWx0ID0gdGVzdEFtb3VudDtcclxuICAgIGF3YWl0IHNsZWVwKDIwMDApO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGF3YWl0IGF4aW9zKHtcclxuICAgIG1ldGhvZDogXCJwb3N0XCIsXHJcbiAgICB1cmw6IFwiaHR0cDovLzE5Mi4xNjguMTc1LjE0MDo1MDAwL2Rpc2NyZXRlXCIsXHJcbiAgICBoZWFkZXJzOiB7XHJcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgfSxcclxuICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgY29kZXM6IHN0b2NrTGlzdC5jb2RlLFxyXG4gICAgICB3ZWlnaHRzOiBzdG9ja0xpc3Qud2VpZ2h0LFxyXG4gICAgICBjYXNoOiBjYXNoLFxyXG4gICAgfSksXHJcbiAgfSlcclxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICByZXN1bHQgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgfSk7XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmxldCB0ZXN0QW1vdW50ID0ge1xyXG4gIGFtb3VudHM6IFtcclxuICAgIHtcclxuICAgICAgYW1vdW50OiA4LFxyXG4gICAgICBjb2RlOiBcIjAwMzU1MFwiLFxyXG4gICAgICBuYW1lOiBcIkxHXCIsXHJcbiAgICAgIHByaWNlOiAxMjgwMDAuMCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGFtb3VudDogOSxcclxuICAgICAgY29kZTogXCIwMDUzODBcIixcclxuICAgICAgbmFtZTogXCLtmITrjIDssKhcIixcclxuICAgICAgcHJpY2U6IDEyNjUwMC4wLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgYW1vdW50OiA0LFxyXG4gICAgICBjb2RlOiBcIjAzNjU3MFwiLFxyXG4gICAgICBuYW1lOiBcIuyXlOyUqOyGjO2UhO2KuFwiLFxyXG4gICAgICBwcmljZTogMjEyMDAwLjAsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBhbW91bnQ6IDExLFxyXG4gICAgICBjb2RlOiBcIjAzNTcyMFwiLFxyXG4gICAgICBuYW1lOiBcIuy5tOy5tOyYpFwiLFxyXG4gICAgICBwcmljZTogODE1MDAuMCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGFtb3VudDogNDUsXHJcbiAgICAgIGNvZGU6IFwiMDAwNjYwXCIsXHJcbiAgICAgIG5hbWU6IFwiU0vtlZjsnbTri4nsiqRcIixcclxuICAgICAgcHJpY2U6IDIzNjUwLjAsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBhbW91bnQ6IDE3LFxyXG4gICAgICBjb2RlOiBcIjAxNTc2MFwiLFxyXG4gICAgICBuYW1lOiBcIu2VnOq1reyghOugpVwiLFxyXG4gICAgICBwcmljZTogMTEzNTAwLjAsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBhbW91bnQ6IDIsXHJcbiAgICAgIGNvZGU6IFwiMDA1OTMwXCIsXHJcbiAgICAgIG5hbWU6IFwi7IK87ISx7KCE7J6QXCIsXHJcbiAgICAgIHByaWNlOiA4MzAwMDAuMCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGFtb3VudDogNSxcclxuICAgICAgY29kZTogXCIwNjgyNzBcIixcclxuICAgICAgbmFtZTogXCLshYDtirjrpqzsmKhcIixcclxuICAgICAgcHJpY2U6IDI2NjAwMC4wLFxyXG4gICAgfSxcclxuICBdLFxyXG4gIHJlbWFpbnM6IDEwOTI1MC4wLFxyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XHJcbmltcG9ydCBQYXBlciBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvUGFwZXJcIjtcclxuaW1wb3J0IFRhYmxlIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZVwiO1xyXG5pbXBvcnQgVGFibGVCb2R5IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUJvZHlcIjtcclxuaW1wb3J0IFRhYmxlQ2VsbCBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVDZWxsXCI7XHJcbmltcG9ydCBUYWJsZUNvbnRhaW5lciBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVDb250YWluZXJcIjtcclxuaW1wb3J0IFRhYmxlSGVhZCBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVIZWFkXCI7XHJcbmltcG9ydCBUYWJsZVJvdyBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVSb3dcIjtcclxuaW1wb3J0IHsgRGlzY3JldGVBbW91bnRJdGVtIH0gZnJvbSBcInNyYy9zZXJ2aWNlL2dldERpc2NyZXRlQW1vdW50XCI7XHJcblxyXG5pbnRlcmZhY2UgQ29sdW1uIHtcclxuICBpZDogXCJuYW1lXCIgfCBcInByaWNlXCIgfCBcImFtb3VudFwiO1xyXG4gIGxhYmVsOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IGNvbHVtbnM6IENvbHVtbltdID0gW1xyXG4gIHsgaWQ6IFwibmFtZVwiLCBsYWJlbDogXCLsooXrqqlcIiB9LFxyXG4gIHsgaWQ6IFwicHJpY2VcIiwgbGFiZWw6IFwi6rCA6rKpXCIgfSxcclxuICB7IGlkOiBcImFtb3VudFwiLCBsYWJlbDogXCLsiJjrn4lcIiB9LFxyXG5dO1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyh7XHJcbiAgcm9vdDoge1xyXG4gICAgd2lkdGg6IFwiMTAwJVwiLFxyXG4gIH0sXHJcbiAgY29udGFpbmVyOiB7XHJcbiAgICBtYXhIZWlnaHQ6IDI3MCxcclxuICAgIG1heFdpZHRoOiAzMDAsXHJcbiAgfSxcclxufSk7XHJcbmludGVyZmFjZSBTdG9ja1RhYmxlUHJvcCB7XHJcbiAgYW1vdW50czogRGlzY3JldGVBbW91bnRJdGVtW107XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3RvY2tUYWJsZSh7IGFtb3VudHMgfTogU3RvY2tUYWJsZVByb3ApIHtcclxuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8UGFwZXIgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9IGVsZXZhdGlvbj17MH0+XHJcbiAgICAgIDxUYWJsZUNvbnRhaW5lciBjbGFzc05hbWU9e2NsYXNzZXMuY29udGFpbmVyfT5cclxuICAgICAgICA8VGFibGUgc3RpY2t5SGVhZGVyIGFyaWEtbGFiZWw9XCJzdGlja3kgdGFibGVcIiBzaXplPVwic21hbGxcIj5cclxuICAgICAgICAgIDxUYWJsZUhlYWQ+XHJcbiAgICAgICAgICAgIDxUYWJsZVJvdz5cclxuICAgICAgICAgICAgICB7Y29sdW1ucy5tYXAoKGNvbHVtbikgPT4gKFxyXG4gICAgICAgICAgICAgICAgPFRhYmxlQ2VsbCBrZXk9e2NvbHVtbi5pZH0+e2NvbHVtbi5sYWJlbH08L1RhYmxlQ2VsbD5cclxuICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgPC9UYWJsZVJvdz5cclxuICAgICAgICAgIDwvVGFibGVIZWFkPlxyXG4gICAgICAgICAgPFRhYmxlQm9keT5cclxuICAgICAgICAgICAge2Ftb3VudHMubWFwKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxUYWJsZVJvdyBob3ZlciByb2xlPVwiY2hlY2tib3hcIiB0YWJJbmRleD17MH0ga2V5PXtpdGVtLmNvZGUgKyBcInRhYmxlXCJ9PlxyXG4gICAgICAgICAgICAgICAgICA8VGFibGVDZWxsIGtleT17aXRlbS5jb2RlfSBhbGlnbj17XCJsZWZ0XCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtpdGVtLm5hbWV9XHJcbiAgICAgICAgICAgICAgICAgIDwvVGFibGVDZWxsPlxyXG4gICAgICAgICAgICAgICAgICA8VGFibGVDZWxsIGtleT17aXRlbS5jb2RlfSBhbGlnbj17XCJsZWZ0XCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtpdGVtLnByaWNlfVxyXG4gICAgICAgICAgICAgICAgICA8L1RhYmxlQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgPFRhYmxlQ2VsbCBrZXk9e2l0ZW0uY29kZX0gYWxpZ249e1wiY2VudGVyXCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtpdGVtLmFtb3VudH1cclxuICAgICAgICAgICAgICAgICAgPC9UYWJsZUNlbGw+XHJcbiAgICAgICAgICAgICAgICA8L1RhYmxlUm93PlxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgPC9UYWJsZUJvZHk+XHJcbiAgICAgICAgPC9UYWJsZT5cclxuICAgICAgPC9UYWJsZUNvbnRhaW5lcj5cclxuICAgIDwvUGFwZXI+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVTdHlsZXMsIG1ha2VTdHlsZXMsIFRoZW1lIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlc1wiO1xyXG5pbXBvcnQgeyBEaWFsb2csIEJ1dHRvbiB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZVwiO1xyXG5pbXBvcnQgUGxvdCBmcm9tIFwicmVhY3QtcGxvdGx5LmpzXCI7XHJcbmltcG9ydCB7IERpc2NyZXRlQW1vdW50LCBnZXREaXNjcmV0ZUFtb3VudCB9IGZyb20gXCJzcmMvc2VydmljZS9nZXREaXNjcmV0ZUFtb3VudFwiO1xyXG5pbXBvcnQgTG9hZGluZ1Byb2dyZXNzIGZyb20gXCJzcmMvY29tcG9uZW50L2NvbW1vbi93aWRnZXQvTG9hZGluZ1Byb2dyZXNzXCI7XHJcbmltcG9ydCB7IEJhY2tUZXN0RGF0YSwgZ2V0QmFja1Rlc3QgfSBmcm9tIFwic3JjL3NlcnZpY2UvZ2V0QmFja1Rlc3RcIjtcclxuaW1wb3J0IFN0b2NrVGFibGUgZnJvbSBcIi4vU3RvY2tUYWJsZVwiO1xyXG5pbXBvcnQgeyBIb2xkaW5nIH0gZnJvbSBcIi4uLy4uLy4uL0NyZWF0ZVBhZ2VcIjtcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lOiBUaGVtZSkgPT5cclxuICBjcmVhdGVTdHlsZXMoe1xyXG4gICAgcm9vdDogeyB3aWR0aDogXCI4MDBweFwiLCBoZWlnaHQ6IFwiNTAwcHhcIiB9LFxyXG4gICAgY2FyZDoge1xyXG4gICAgICBib3hTaGFkb3c6IFwiMCA0cHggOHB4IDAgcmdiYSgwLCAwLCAwLCAwLjIpXCIsXHJcbiAgICAgIGhlaWdodDogXCI1MDBweFwiLFxyXG4gICAgICBtYXJnaW46IFwiMTBweCAxMDBweCAxMDBweCAxMDBweFwiLFxyXG4gICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxyXG4gICAgfSxcclxuICAgIGJ1dHRvbjoge1xyXG4gICAgICBcIiYgLk11aVN2Z0ljb24tcm9vdFwiOiB7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogXCJhbGwgMC4zcyBlYXNlXCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIFwiJjpob3ZlclwiOiB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogXCIjQjZFQkZGXCIsXHJcbiAgICAgICAgYm94U2hhZG93OiBcIjAgMTZweCAyNHB4IDAgcmdiYSgxNzIsIDM0LCAzNCwgMC4yKVwiLFxyXG4gICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXHJcbiAgICAgICAgXCImIC5NdWlTdmdJY29uLXJvb3RcIjoge1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZSgxODBkZWcpXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBcIkBnbG9iYWxcIjoge1xyXG4gICAgICBcIio6Oi13ZWJraXQtc2Nyb2xsYmFyXCI6IHtcclxuICAgICAgICB3aWR0aDogXCIwLjRlbVwiLFxyXG4gICAgICB9LFxyXG4gICAgICBcIio6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrXCI6IHtcclxuICAgICAgICBcIi13ZWJraXQtYm94LXNoYWRvd1wiOiBcImluc2V0IDAgMCA2cHggcmdiYSgwLDAsMCwwLjAwKVwiLFxyXG4gICAgICB9LFxyXG4gICAgICBcIio6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iXCI6IHtcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzJFMkUyRVwiLFxyXG4gICAgICAgIG91dGxpbmU6IFwiMXB4IHNvbGlkICNFNkU2RkZcIixcclxuICAgICAgICBib3JkZXJSYWRpdXM6IFwiMjBweFwiLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIGJhY2tUZXN0RGVzY3JpcHRpb246IHtcclxuICAgICAgZm9udFNpemU6IFwiMS4wcmVtXCIsXHJcbiAgICB9LFxyXG4gIH0pXHJcbik7XHJcblxyXG5pbnRlcmZhY2UgQ29uZmlybURpYWxvZ1Byb3Age1xyXG4gIG9wZW46IGJvb2xlYW47XHJcbiAgZmluYWxXZWlnaHRMaXN0OiB7XHJcbiAgICBpdGVtczogc3RyaW5nW107XHJcbiAgICB2YWx1ZXM6IG51bWJlcltdO1xyXG4gIH07XHJcbiAgb25DbG9zZTogKCkgPT4gdm9pZDtcclxuICBob2xkaW5nczogSG9sZGluZ1tdO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb25maXJtRGlhbG9nKHsgaG9sZGluZ3MsIG9wZW4sIGZpbmFsV2VpZ2h0TGlzdCwgb25DbG9zZSB9OiBDb25maXJtRGlhbG9nUHJvcCkge1xyXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcclxuICBjb25zdCBbZGlzY3JldGVBbW91bnQsIHNldERpc2NyZXRlQW1vdW50XSA9IHVzZVN0YXRlPERpc2NyZXRlQW1vdW50PigpO1xyXG4gIGNvbnN0IFtiYWNrVGVzdCwgc2V0QmFja1Rlc3RdID0gdXNlU3RhdGU8QmFja1Rlc3REYXRhPigpO1xyXG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gKCkgPT4ge1xyXG4gICAgb25DbG9zZSgpO1xyXG4gIH07XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoIW9wZW4pIHJldHVybjtcclxuICAgIGxldCBjb2RlTGlzdCA9IGZpbmFsV2VpZ2h0TGlzdC5pdGVtcy5tYXAoKGl0ZW0pID0+IHtcclxuICAgICAgcmV0dXJuIGhvbGRpbmdzLmZpbmQoKHRhcmdldCkgPT4gKHRhcmdldC5uYW1lID09PSBpdGVtID8gdGFyZ2V0LmNvZGUgOiBcIlwiKSk/LmNvZGUgfHwgXCJcIjtcclxuICAgIH0pO1xyXG4gICAgZ2V0RGlzY3JldGVBbW91bnQoeyBjb2RlOiBjb2RlTGlzdCwgd2VpZ2h0OiBmaW5hbFdlaWdodExpc3QudmFsdWVzIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBzZXREaXNjcmV0ZUFtb3VudChyZXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZ2V0QmFja1Rlc3QoeyBjb2RlOiBjb2RlTGlzdCwgd2VpZ2h0OiBmaW5hbFdlaWdodExpc3QudmFsdWVzIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBzZXRCYWNrVGVzdChyZXMpO1xyXG4gICAgfSk7XHJcbiAgfSwgW2ZpbmFsV2VpZ2h0TGlzdCwgb3BlbiwgaG9sZGluZ3NdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxEaWFsb2cgb25DbG9zZT17aGFuZGxlQ2xvc2V9IGFyaWEtbGFiZWxsZWRieT1cInNpbXBsZS1kaWFsb2ctdGl0bGVcIiBvcGVuPXtvcGVufSBtYXhXaWR0aD17XCJtZFwifT5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XHJcbiAgICAgICAgPGgxIHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiBcIjMwMHB4XCIgfX0+7LWc7KKFIO2IrOyekCDsoJXrs7Q8L2gxPlxyXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZmxvYXQ6IFwibGVmdFwiLCB3aWR0aDogXCI1MCVcIiB9fT5cclxuICAgICAgICAgIHtiYWNrVGVzdCAhPT0gdW5kZWZpbmVkID8gKFxyXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiBcIjYwcHhcIiwgcGFkZGluZ1RvcDogXCIzMHB4XCIgfX0+XHJcbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBmb250U2l6ZTogXCIxLjJyZW1cIiwgcGFkZGluZ0xlZnQ6IFwiMTAwcHhcIiB9fT4g7JiI7IOBIO2IrOyekCDsi6TsoIE8L2Rpdj5cclxuICAgICAgICAgICAgICA8UGxvdFxyXG4gICAgICAgICAgICAgICAgZGF0YT17W1xyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogYmFja1Rlc3QuZGF5cyxcclxuICAgICAgICAgICAgICAgICAgICB5OiBiYWNrVGVzdC52YWx1ZXMubWFwKChpdGVtKSA9PiBNYXRoLnJvdW5kKGl0ZW0gKiAxMDAwKSksXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJsaW5lc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IHsgc2hhcGU6IFwic3BsaW5lXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkxpbmVzXCIsXHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdfVxyXG4gICAgICAgICAgICAgICAgbGF5b3V0PXt7XHJcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogeyB0OiAwLCBiOiAzMCwgcjogNTAsIGw6IDAgfSxcclxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDMwMCxcclxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAsXHJcbiAgICAgICAgICAgICAgICAgIHNob3dsZWdlbmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpY2tmb3JtYXQ6IFwiJVkgJWIgJWRcIixcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaWRlOiBcInJpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgY29uZmlnPXt7IGRpc3BsYXlNb2RlQmFyOiBmYWxzZSB9fVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuYmFja1Rlc3REZXNjcmlwdGlvbn0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PiAxMDAw66eM7JuQIO2IrOyekOyLnDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAg7JiI7IOBIO2PieqwgOyVoSA6XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcImJsYWNrXCIsIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLCBmb250U2l6ZTogXCIxLjJyZW1cIiB9fT5cclxuICAgICAgICAgICAgICAgICAgICB7XCIgXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAge01hdGgucm91bmQoYmFja1Rlc3QudmFsdWVzW2JhY2tUZXN0LnZhbHVlcy5sZW5ndGggLSAxXSAqIDEwMDApfVxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIOunjOybkFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICDsmIjsg4Eg7IiY7J217JyoIDpcclxuICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiYmxhY2tcIiwgZm9udFdlaWdodDogXCJib2xkXCIsIGZvbnRTaXplOiBcIjEuMnJlbVwiIH19PlxyXG4gICAgICAgICAgICAgICAgICAgIHtcIiBcIn1cclxuICAgICAgICAgICAgICAgICAgICB7TWF0aC5yb3VuZChiYWNrVGVzdC52YWx1ZXNbYmFja1Rlc3QudmFsdWVzLmxlbmd0aCAtIDFdICogMTAwKX1cclxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAlXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgIDxMb2FkaW5nUHJvZ3Jlc3Mgd2lkdGg9ezMwMH0gaGVpZ2h0PXsyMDB9IGRlc2NyaXB0aW9uPXtcIkVURiDrtoTshJ3spJEuLi5cIn0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZmxvYXQ6IFwibGVmdFwiLCB3aWR0aDogXCI1MCVcIiB9fT5cclxuICAgICAgICAgIDxkaXYgc3R5bGU9e3sgcGFkZGluZ0xlZnQ6IFwiNjBweFwiLCBwYWRkaW5nVG9wOiBcIjIwcHhcIiB9fT5cclxuICAgICAgICAgICAge2Rpc2NyZXRlQW1vdW50ICE9PSB1bmRlZmluZWQgPyAoXHJcbiAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6IFwiMTAwcHhcIiwgZmxvYXQ6IFwibGVmdFwiIH19PiDstJ0g7Yis7J6QIOq4iOyVoSA6PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PiAxMDAw66eM7JuQPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHdpZHRoOiBcIjEwMHB4XCIsIGZsb2F0OiBcImxlZnRcIiB9fT4g64Ko7J2AIOq4iOyVoSA6PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PiB7TWF0aC5yb3VuZChkaXNjcmV0ZUFtb3VudC5yZW1haW5zIC8gMTAwMDApfeunjOybkDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICA8U3RvY2tUYWJsZSBhbW91bnRzPXtkaXNjcmV0ZUFtb3VudC5hbW91bnRzfSAvPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8TG9hZGluZ1Byb2dyZXNzIHdpZHRoPXszMDB9IGhlaWdodD17MjAwfSBkZXNjcmlwdGlvbj17XCJFVEYg67aE7ISd7KSRLi4uXCJ9IC8+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcclxuICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICBzaXplPVwibWVkaXVtXCJcclxuICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXHJcbiAgICAgICAgICAgIGJvdHRvbTogXCIxMHB4XCIsXHJcbiAgICAgICAgICAgIHJpZ2h0OiBcIjEwcHhcIixcclxuICAgICAgICAgIH19XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgQnV5XHJcbiAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9EaWFsb2c+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgQnV0dG9uLCBDYXJkIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVN0eWxlcywgbWFrZVN0eWxlcywgVGhlbWUgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XHJcbmltcG9ydCBQbG90IGZyb20gXCJyZWFjdC1wbG90bHkuanNcIjtcclxuaW1wb3J0IFdlaWdodFNsaWRlciBmcm9tIFwiLi9jb21wb25lbnQvV2VpZ2h0U2xpZGVyXCI7XHJcbmltcG9ydCBDb25maXJtRGlhbG9nIGZyb20gXCIuL2NvbXBvbmVudC9Db25maXJtRGlhbG9nXCI7XHJcbmltcG9ydCBSZWZyZXNoSWNvbiBmcm9tIFwiQG1hdGVyaWFsLXVpL2ljb25zL1JlZnJlc2hcIjtcclxuaW1wb3J0IHsgUlJTVyB9IGZyb20gXCJzcmMvc2VydmljZS9nZXRFZmZpY2llbnRGcm9udGllclwiO1xyXG5pbXBvcnQgeyBIb2xkaW5nIH0gZnJvbSBcIi4uLy4uL0NyZWF0ZVBhZ2VcIjtcclxuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBTZWxlY3RlZFBvcnRGb2xpb0NvbnRleHQgfSBmcm9tIFwic3JjL2NvbnRleHRzL1NlbGVjdGVkUG9ydEZvbGlvQ29udGV4dFwiO1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWU6IFRoZW1lKSA9PlxyXG4gIGNyZWF0ZVN0eWxlcyh7XHJcbiAgICByb290OiB7IHdpZHRoOiBcIjgwMHB4XCIsIGhlaWdodDogXCI1MDBweFwiIH0sXHJcbiAgICBjYXJkOiB7XHJcbiAgICAgIGJveFNoYWRvdzogXCIwIDRweCA4cHggMCByZ2JhKDAsIDAsIDAsIDAuMilcIixcclxuICAgICAgd2lkdGg6IFwiODAwcHhcIixcclxuICAgICAgaGVpZ2h0OiBcIjUwMHB4XCIsXHJcbiAgICAgIG1hcmdpbjogXCIxMHB4IDEwMHB4IDEwMHB4IDEwMHB4XCIsXHJcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXHJcbiAgICB9LFxyXG4gICAgc3RvY2tTbGlkZXI6IHtcclxuICAgICAgZmxvYXQ6IFwibGVmdFwiLFxyXG4gICAgICBwYWRkaW5nTGVmdDogXCI4MHB4XCIsXHJcbiAgICAgIHBhZGRpbmdSaWdodDogXCIxMHB4XCIsXHJcbiAgICAgIG1heEhlaWdodDogXCIzMDBweFwiLFxyXG4gICAgICBvdmVyZmxvd1k6IFwic2Nyb2xsXCIsXHJcbiAgICAgIG92ZXJmbG93WDogXCJoaWRkZW5cIixcclxuICAgIH0sXHJcbiAgICBidXR0b246IHtcclxuICAgICAgXCImIC5NdWlTdmdJY29uLXJvb3RcIjoge1xyXG4gICAgICAgIHRyYW5zaXRpb246IFwiYWxsIDAuM3MgZWFzZVwiLFxyXG4gICAgICB9LFxyXG4gICAgICBcIiY6aG92ZXJcIjoge1xyXG4gICAgICAgIGJhY2tncm91bmQ6IFwiI0I2RUJGRlwiLFxyXG4gICAgICAgIGJveFNoYWRvdzogXCIwIDE2cHggMjRweCAwIHJnYmEoMTcyLCAzNCwgMzQsIDAuMilcIixcclxuICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxyXG4gICAgICAgIFwiJiAuTXVpU3ZnSWNvbi1yb290XCI6IHtcclxuICAgICAgICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoMTgwZGVnKVwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgXCJAZ2xvYmFsXCI6IHtcclxuICAgICAgXCIqOjotd2Via2l0LXNjcm9sbGJhclwiOiB7XHJcbiAgICAgICAgd2lkdGg6IFwiMC40ZW1cIixcclxuICAgICAgfSxcclxuICAgICAgXCIqOjotd2Via2l0LXNjcm9sbGJhci10cmFja1wiOiB7XHJcbiAgICAgICAgXCItd2Via2l0LWJveC1zaGFkb3dcIjogXCJpbnNldCAwIDAgNnB4IHJnYmEoMCwwLDAsMC4wMClcIixcclxuICAgICAgfSxcclxuICAgICAgXCIqOjotd2Via2l0LXNjcm9sbGJhci10aHVtYlwiOiB7XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiMyRTJFMkVcIixcclxuICAgICAgICBvdXRsaW5lOiBcIjFweCBzb2xpZCAjRTZFNkZGXCIsXHJcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjIwcHhcIixcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfSlcclxuKTtcclxuXHJcbmludGVyZmFjZSBDb25maXJtUG9ydGZvbGlvUHJvcCB7XHJcbiAgaG9sZGluZ3M6IEhvbGRpbmdbXTtcclxufVxyXG5cclxuY29uc3QgQ29uZmlybVBvcnRmb2xpbyA9ICh7IGhvbGRpbmdzIH06IENvbmZpcm1Qb3J0Zm9saW9Qcm9wKSA9PiB7XHJcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG4gIGxldCB7IHNlbGVjdGVkUEYsIHNldFNlbGVjdGVkUEYgfSA9IHVzZUNvbnRleHQoU2VsZWN0ZWRQb3J0Rm9saW9Db250ZXh0KTtcclxuICBpZiAoc2VsZWN0ZWRQRiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBzZWxlY3RlZFBGID0ge1xyXG4gICAgICByZXR1cm5zOiAwLFxyXG4gICAgICByaXNrOiAwLFxyXG4gICAgICBzaGFycGU6IDAsXHJcbiAgICAgIHdlaWdodHM6IHtcclxuICAgICAgICBpdGVtczogW1wibm9uZVwiXSxcclxuICAgICAgICB2YWx1ZXM6IFsxXSxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb25zdCBvcmlnaW5hbFdlaWdodDogbnVtYmVyW10gPSBbLi4uc2VsZWN0ZWRQRi53ZWlnaHRzLnZhbHVlc107XHJcbiAgY29uc3QgW3dlaWdodExpc3QsIHNldFdlaWdodExpc3RdID0gdXNlU3RhdGUoe1xyXG4gICAgaXRlbXM6IFsuLi5zZWxlY3RlZFBGLndlaWdodHMuaXRlbXNdLFxyXG4gICAgdmFsdWVzOiBbLi4uc2VsZWN0ZWRQRi53ZWlnaHRzLnZhbHVlc10sXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IG9uQ2hhbmdlID0gKG5hbWU6IHN0cmluZywgdmFsdWU6IG51bWJlcikgPT4ge1xyXG4gICAgbGV0IGNoYW5nZWQgPSB7IGl0ZW1zOiBbLi4ud2VpZ2h0TGlzdC5pdGVtc10sIHZhbHVlczogWy4uLndlaWdodExpc3QudmFsdWVzXSB9O1xyXG4gICAgY2hhbmdlZC52YWx1ZXNbY2hhbmdlZC5pdGVtcy5pbmRleE9mKG5hbWUpXSA9IHZhbHVlO1xyXG4gICAgc2V0V2VpZ2h0TGlzdChjaGFuZ2VkKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBbb3Blbiwgc2V0T3Blbl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgaGFuZGxlQ2xpY2tPcGVuID0gKCkgPT4ge1xyXG4gICAgc2V0T3Blbih0cnVlKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBoYW5kbGVDbG9zZSA9ICgpID0+IHtcclxuICAgIHNldE9wZW4oZmFsc2UpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHJlc2V0V2VpZ2h0ID0gKCkgPT4ge1xyXG4gICAgc2V0V2VpZ2h0TGlzdCh7IGl0ZW1zOiBbLi4ud2VpZ2h0TGlzdC5pdGVtc10sIHZhbHVlczogWy4uLm9yaWdpbmFsV2VpZ2h0XSB9KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XHJcbiAgICAgICAgPENhcmQgY2xhc3NOYW1lPXtjbGFzc2VzLmNhcmR9PlxyXG4gICAgICAgICAgPGgyIHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiBcIjMwMHB4XCIgfX0+7Y+s7Yq47Y+066as7JikIOy1nOyihSDqsrDsoJU8L2gyPlxyXG4gICAgICAgICAgPGRpdiBzdHlsZT17eyBmbG9hdDogXCJsZWZ0XCIsIHdpZHRoOiBcIjUwJVwiIH19PlxyXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiBcIjYwcHhcIiwgcGFkZGluZ1RvcDogXCIyMHB4XCIgfX0+XHJcbiAgICAgICAgICAgICAgPFBsb3RcclxuICAgICAgICAgICAgICAgIGRhdGE9e1tcclxuICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsczogd2VpZ2h0TGlzdC5pdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHdlaWdodExpc3QudmFsdWVzLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicGllXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaG92ZXJpbmZvOiBcImxhYmVsK3BlcmNlbnRcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0aW5mbzogXCJsYWJlbCtwZXJjZW50XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dGZvbnQ6IHsgc2l6ZTogMTUsIGZhbWlseTogXCJcIiwgY29sb3I6IFwiXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICBzb3J0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0cG9zaXRpb246IFwiaW5zaWRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5zaWRldGV4dG9yaWVudGF0aW9uOiBcImhvcml6b250YWxcIixcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAgICAgICBsYXlvdXQ9e3tcclxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDMwMCxcclxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDAsXHJcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogeyB0OiAzMCwgYjogMjAsIHI6IDAsIGw6IDAgfSxcclxuICAgICAgICAgICAgICAgICAgc2hvd2xlZ2VuZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgY29uZmlnPXt7IGRpc3BsYXlNb2RlQmFyOiBmYWxzZSB9fVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGZsb2F0OiBcImxlZnRcIiwgd2lkdGg6IFwiNTAlXCIgfX0+XHJcbiAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPXtjbGFzc2VzLmJ1dHRvbn0gc3R5bGU9e3sgZmxvYXQ6IFwicmlnaHRcIiwgbWFyZ2luUmlnaHQ6IFwiNjBweFwiIH19IG9uQ2xpY2s9e3Jlc2V0V2VpZ2h0fT5cclxuICAgICAgICAgICAgICA8UmVmcmVzaEljb24gLz4g65CY64+M66as6riwXHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5zdG9ja1NsaWRlcn0+XHJcbiAgICAgICAgICAgICAge3dlaWdodExpc3QudmFsdWVzLm1hcCgodmFsdWUsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICA8V2VpZ2h0U2xpZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZT17d2VpZ2h0TGlzdC5pdGVtc1tpbmRleF19XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgIGtleT17d2VpZ2h0TGlzdC5pdGVtc1tpbmRleF19XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcclxuICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgIHNpemU9XCJtZWRpdW1cIlxyXG4gICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tOiBcIjEwcHhcIixcclxuICAgICAgICAgICAgICAgIHJpZ2h0OiBcIjEwcHhcIixcclxuICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrT3Blbn1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIGNvbmZpcm1cclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDxDb25maXJtRGlhbG9nIGhvbGRpbmdzPXtob2xkaW5nc30gZmluYWxXZWlnaHRMaXN0PXt3ZWlnaHRMaXN0fSBvcGVuPXtvcGVufSBvbkNsb3NlPXtoYW5kbGVDbG9zZX0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvQ2FyZD5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29uZmlybVBvcnRmb2xpbztcclxuIiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MgKi9cclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzLCBUaGVtZSwgY3JlYXRlU3R5bGVzIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlc1wiO1xyXG5pbXBvcnQgU3RlcHBlciBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvU3RlcHBlclwiO1xyXG5pbXBvcnQgU3RlcCBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvU3RlcFwiO1xyXG5pbXBvcnQgU3RlcExhYmVsIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9TdGVwTGFiZWxcIjtcclxuaW1wb3J0IFN0ZXBDb250ZW50IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9TdGVwQ29udGVudFwiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25cIjtcclxuaW1wb3J0IFBhcGVyIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9QYXBlclwiO1xyXG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeVwiO1xyXG5pbXBvcnQgU3RvY2tDaGlwR3JvdXAgZnJvbSBcIi4vY29tcG9uZW50L3N0b2NrQ2hpcEdyb3VwL1N0b2NrQ2hpcEdyb3VwXCI7XHJcbmltcG9ydCBTZWxlY3RlZFBvcnRmb2xpbyBmcm9tIFwiLi9jb21wb25lbnQvc2VsZWN0ZWRQb3J0Zm9saW8vU2VsZWN0ZWRQb3J0Zm9saW9cIjtcclxuaW1wb3J0IENvbmZpcm1Qb3J0Zm9saW8gZnJvbSBcIi4vY29tcG9uZW50L2NvbmZpcm1Qb3J0Zm9saW8vQ29uZmlybVBvcnRmb2xpb1wiO1xyXG5pbXBvcnQgeyBSUlNXIH0gZnJvbSBcInNyYy9zZXJ2aWNlL2dldEVmZmljaWVudEZyb250aWVyXCI7XHJcbmltcG9ydCB7IFNlbGVjdGVkUG9ydEZvbGlvUHJvdmlkZXIgfSBmcm9tIFwic3JjL2NvbnRleHRzL1NlbGVjdGVkUG9ydEZvbGlvQ29udGV4dFwiO1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWU6IFRoZW1lKSA9PlxyXG4gIGNyZWF0ZVN0eWxlcyh7XHJcbiAgICByb290OiB7XHJcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcclxuICAgIH0sXHJcbiAgICBidXR0b246IHtcclxuICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nKDEpLFxyXG4gICAgICBtYXJnaW5SaWdodDogdGhlbWUuc3BhY2luZygxKSxcclxuICAgIH0sXHJcbiAgICBhY3Rpb25zQ29udGFpbmVyOiB7XHJcbiAgICAgIG1hcmdpbkJvdHRvbTogdGhlbWUuc3BhY2luZygyKSxcclxuICAgIH0sXHJcbiAgICByZXNldENvbnRhaW5lcjoge1xyXG4gICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDMpLFxyXG4gICAgfSxcclxuICB9KVxyXG4pO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIb2xkaW5nIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgY29kZTogc3RyaW5nO1xyXG4gIHdlaWdodD86IG51bWJlcjtcclxufVxyXG5cclxuaW50ZXJmYWNlIHN0ZXBDb250ZW50UHJvcCB7XHJcbiAgc3RlcDogbnVtYmVyO1xyXG4gIGhvbGRpbmdzOiBIb2xkaW5nW107XHJcbiAgb25DaGFuZ2U6IChuYW1lOiBzdHJpbmcsIHZhbHVlOiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgb25EZWxldGU6IChuYW1lOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgb25BZGQ6IChuYW1lOiBzdHJpbmcsIGNvZGU6IHN0cmluZykgPT4gdm9pZDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U3RlcENvbnRlbnQoeyBzdGVwLCBob2xkaW5ncywgb25DaGFuZ2UsIG9uRGVsZXRlLCBvbkFkZCB9OiBzdGVwQ29udGVudFByb3ApIHtcclxuICBzd2l0Y2ggKHN0ZXApIHtcclxuICAgIGNhc2UgMDpcclxuICAgICAgcmV0dXJuIDxTdG9ja0NoaXBHcm91cCBob2xkaW5ncz17aG9sZGluZ3N9IG9uQ2hhbmdlPXtvbkNoYW5nZX0gb25EZWxldGU9e29uRGVsZXRlfSBvbkFkZD17b25BZGR9IC8+O1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICByZXR1cm4gPFNlbGVjdGVkUG9ydGZvbGlvIGhvbGRpbmdzPXtob2xkaW5nc30gLz47XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHJldHVybiA8Q29uZmlybVBvcnRmb2xpbyBob2xkaW5ncz17aG9sZGluZ3N9IC8+O1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIFwiVW5rbm93biBzdGVwXCI7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDcmVhdGVQYWdlKCkge1xyXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcclxuICBjb25zdCBbYWN0aXZlU3RlcCwgc2V0QWN0aXZlU3RlcF0gPSBSZWFjdC51c2VTdGF0ZSgwKTtcclxuICBjb25zdCBzdGVwcyA9IFtcIkNob29zZSBTdG9ja1wiLCBcIlNlbGVjdCBQb3J0Zm9saW9cIiwgXCJDb25maXJtIFBvcnRmb2xpb1wiXTtcclxuXHJcbiAgY29uc3QgaGFuZGxlTmV4dCA9ICgpID0+IHtcclxuICAgIHNldEFjdGl2ZVN0ZXAoKHByZXZBY3RpdmVTdGVwKSA9PiBwcmV2QWN0aXZlU3RlcCArIDEpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGhhbmRsZUJhY2sgPSAoKSA9PiB7XHJcbiAgICBzZXRBY3RpdmVTdGVwKChwcmV2QWN0aXZlU3RlcCkgPT4gcHJldkFjdGl2ZVN0ZXAgLSAxKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBoYW5kbGVSZXNldCA9ICgpID0+IHtcclxuICAgIHNldEFjdGl2ZVN0ZXAoMCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdGVzdEhvbGRpbmdzID0gW1xyXG4gICAgeyBuYW1lOiBcIlNL7ZWY7J2064uJ7IqkXCIsIGNvZGU6IFwiMDAzNTUwXCIgfSxcclxuICAgIHsgbmFtZTogXCJMR1wiLCBjb2RlOiBcIjAwNTM4MFwiIH0sXHJcbiAgICB7IG5hbWU6IFwi7ZiE64yA7LCoXCIsIGNvZGU6IFwiMDM2NTcwXCIgfSxcclxuICAgIHsgbmFtZTogXCLsgrzshLHsoITsnpBcIiwgY29kZTogXCIwMzU3MjBcIiB9LFxyXG4gICAgeyBuYW1lOiBcIu2VnOq1reyghOugpVwiLCBjb2RlOiBcIjAwMDY2MFwiIH0sXHJcbiAgICB7IG5hbWU6IFwi7Lm07Lm07JikXCIsIGNvZGU6IFwiMDE1NzYwXCIgfSxcclxuICAgIHsgbmFtZTogXCLsl5TslKjshoztlITtirhcIiwgY29kZTogXCIwMDU5MzBcIiB9LFxyXG4gICAgeyBuYW1lOiBcIuyFgO2KuOumrOyYqFwiLCBjb2RlOiBcIjA2ODI3MFwiIH0sXHJcbiAgXTtcclxuICBjb25zdCBbaG9sZGluZ3MsIHNldEhvbGRpbmdzXSA9IFJlYWN0LnVzZVN0YXRlPEhvbGRpbmdbXT4odGVzdEhvbGRpbmdzKTtcclxuXHJcbiAgY29uc3Qgb25DaGFuZ2UgPSAobmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICBzZXRIb2xkaW5ncygoaG9sZGluZ3MpID0+XHJcbiAgICAgIGhvbGRpbmdzLm1hcCgoaG9sZGluZykgPT5cclxuICAgICAgICBob2xkaW5nLm5hbWUgIT09IG5hbWUgPyBob2xkaW5nIDogeyBuYW1lOiBob2xkaW5nLm5hbWUsIGNvZGU6IGhvbGRpbmcuY29kZSwgd2VpZ2h0OiB2YWx1ZSB9XHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgb25BZGQgPSAobmFtZTogc3RyaW5nLCBjb2RlOiBzdHJpbmcpID0+IHtcclxuICAgIGlmIChob2xkaW5ncy5maW5kKChpdGVtOiBIb2xkaW5nKSA9PiBpdGVtLm5hbWUgPT09IG5hbWUgfHwgaXRlbS5jb2RlID09PSBjb2RlKSkgcmV0dXJuO1xyXG4gICAgc2V0SG9sZGluZ3MoKGhvbGRpbmdzKSA9PiBob2xkaW5ncy5jb25jYXQoeyBuYW1lOiBuYW1lLCBjb2RlOiBjb2RlIH0pKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBvbkRlbGV0ZSA9IChuYW1lOiBzdHJpbmcpID0+IHtcclxuICAgIHNldEhvbGRpbmdzKChob2xkaW5ncykgPT4gaG9sZGluZ3MuZmlsdGVyKChob2xkaW5nKSA9PiBob2xkaW5nLm5hbWUgIT09IG5hbWUpKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XHJcbiAgICAgIDxTZWxlY3RlZFBvcnRGb2xpb1Byb3ZpZGVyPlxyXG4gICAgICAgIDxTdGVwcGVyIGFjdGl2ZVN0ZXA9e2FjdGl2ZVN0ZXB9IG9yaWVudGF0aW9uPVwidmVydGljYWxcIj5cclxuICAgICAgICAgIHtzdGVwcy5tYXAoKGxhYmVsLCBpbmRleCkgPT4gKFxyXG4gICAgICAgICAgICA8U3RlcCBrZXk9e2xhYmVsfT5cclxuICAgICAgICAgICAgICA8U3RlcExhYmVsPntsYWJlbH08L1N0ZXBMYWJlbD5cclxuICAgICAgICAgICAgICA8U3RlcENvbnRlbnQ+XHJcbiAgICAgICAgICAgICAgICB7Z2V0U3RlcENvbnRlbnQoe1xyXG4gICAgICAgICAgICAgICAgICBzdGVwOiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgaG9sZGluZ3MsXHJcbiAgICAgICAgICAgICAgICAgIG9uQWRkLFxyXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZSxcclxuICAgICAgICAgICAgICAgICAgb25EZWxldGUsXHJcbiAgICAgICAgICAgICAgICB9KX1cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5hY3Rpb25zQ29udGFpbmVyfT5cclxuICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGRpc2FibGVkPXthY3RpdmVTdGVwID09PSAwfSBvbkNsaWNrPXtoYW5kbGVCYWNrfSBjbGFzc05hbWU9e2NsYXNzZXMuYnV0dG9ufT5cclxuICAgICAgICAgICAgICAgICAgICAgIEJhY2tcclxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJjb250YWluZWRcIiBjb2xvcj1cInByaW1hcnlcIiBvbkNsaWNrPXtoYW5kbGVOZXh0fSBjbGFzc05hbWU9e2NsYXNzZXMuYnV0dG9ufT5cclxuICAgICAgICAgICAgICAgICAgICAgIHthY3RpdmVTdGVwID09PSBzdGVwcy5sZW5ndGggLSAxID8gXCJGaW5pc2hcIiA6IFwiTmV4dFwifVxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvU3RlcENvbnRlbnQ+XHJcbiAgICAgICAgICAgIDwvU3RlcD5cclxuICAgICAgICAgICkpfVxyXG4gICAgICAgIDwvU3RlcHBlcj5cclxuICAgICAgPC9TZWxlY3RlZFBvcnRGb2xpb1Byb3ZpZGVyPlxyXG4gICAgICB7YWN0aXZlU3RlcCA9PT0gc3RlcHMubGVuZ3RoICYmIChcclxuICAgICAgICA8UGFwZXIgc3F1YXJlIGVsZXZhdGlvbj17MH0gY2xhc3NOYW1lPXtjbGFzc2VzLnJlc2V0Q29udGFpbmVyfT5cclxuICAgICAgICAgIDxUeXBvZ3JhcGh5PkFsbCBzdGVwcyBjb21wbGV0ZWQgLSB5b3UmYXBvcztyZSBmaW5pc2hlZDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17aGFuZGxlUmVzZXR9IGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b259PlxyXG4gICAgICAgICAgICBSZXNldFxyXG4gICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgPC9QYXBlcj5cclxuICAgICAgKX1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==