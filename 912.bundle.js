(self.webpackChunkmy_app=self.webpackChunkmy_app||[]).push([[912],{8466:(e,r,n)=>{"use strict";n.d(r,{Z:()=>t});var a=n(7294).createContext();const t=a},2601:(e,r,n)=>{"use strict";n.d(r,{Z:()=>o});var a=n(7294),t=n(8466);function o(){return a.useContext(t.Z)}},6608:(e,r,n)=>{"use strict";n.d(r,{Z:()=>m});var a=n(2122),t=n(4699),o=n(1253),l=n(7294),i=(n(5697),n(6010)),c=n(2775),s=n(2601),d=n(4670),u=n(7812),f=l.forwardRef((function(e,r){var n=e.autoFocus,d=e.checked,f=e.checkedIcon,m=e.classes,p=e.className,h=e.defaultChecked,v=e.disabled,b=e.icon,g=e.id,y=e.inputProps,Z=e.inputRef,k=e.name,C=e.onBlur,E=e.onChange,w=e.onFocus,R=e.readOnly,x=e.required,I=e.tabIndex,S=e.type,O=e.value,N=(0,o.Z)(e,["autoFocus","checked","checkedIcon","classes","className","defaultChecked","disabled","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value"]),P=(0,c.Z)({controlled:d,default:Boolean(h),name:"SwitchBase",state:"checked"}),q=(0,t.Z)(P,2),F=q[0],B=q[1],$=(0,s.Z)(),j=v;$&&void 0===j&&(j=$.disabled);var z="checkbox"===S||"radio"===S;return l.createElement(u.Z,(0,a.Z)({component:"span",className:(0,i.Z)(m.root,p,F&&m.checked,j&&m.disabled),disabled:j,tabIndex:null,role:void 0,onFocus:function(e){w&&w(e),$&&$.onFocus&&$.onFocus(e)},onBlur:function(e){C&&C(e),$&&$.onBlur&&$.onBlur(e)},ref:r},N),l.createElement("input",(0,a.Z)({autoFocus:n,checked:d,defaultChecked:h,className:m.input,disabled:j,id:z&&g,name:k,onChange:function(e){var r=e.target.checked;B(r),E&&E(e,r)},readOnly:R,ref:Z,required:x,tabIndex:I,type:S,value:O},y)),F?f:b)}));const m=(0,d.Z)({root:{padding:9},checked:{},disabled:{},input:{cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0,zIndex:1}},{name:"PrivateSwitchBase"})(f)},4631:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>T});var a=n(7294),t=n(1120),o=n(2122),l=n(1253),i=(n(5697),n(6010)),c=n(6608),s=n(3786);const d=(0,s.Z)(a.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}),"RadioButtonUnchecked"),u=(0,s.Z)(a.createElement("path",{d:"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"}),"RadioButtonChecked");var f=n(4670);const m=(0,f.Z)((function(e){return{root:{position:"relative",display:"flex","&$checked $layer":{transform:"scale(1)",transition:e.transitions.create("transform",{easing:e.transitions.easing.easeOut,duration:e.transitions.duration.shortest})}},layer:{left:0,position:"absolute",transform:"scale(0)",transition:e.transitions.create("transform",{easing:e.transitions.easing.easeIn,duration:e.transitions.duration.shortest})},checked:{}}}),{name:"PrivateRadioButtonIcon"})((function(e){var r=e.checked,n=e.classes,t=e.fontSize;return a.createElement("div",{className:(0,i.Z)(n.root,r&&n.checked)},a.createElement(d,{fontSize:t}),a.createElement(u,{fontSize:t,className:n.layer}))}));var p=n(9693),h=n(3871),v=n(2568);const b=a.createContext();var g=a.createElement(m,{checked:!0}),y=a.createElement(m,null),Z=a.forwardRef((function(e,r){var n=e.checked,t=e.classes,s=e.color,d=void 0===s?"secondary":s,u=e.name,f=e.onChange,m=e.size,p=void 0===m?"medium":m,Z=(0,l.Z)(e,["checked","classes","color","name","onChange","size"]),k=a.useContext(b),C=n,E=(0,v.Z)(f,k&&k.onChange),w=u;return k&&(void 0===C&&(C=k.value===e.value),void 0===w&&(w=k.name)),a.createElement(c.Z,(0,o.Z)({color:d,type:"radio",icon:a.cloneElement(y,{fontSize:"small"===p?"small":"default"}),checkedIcon:a.cloneElement(g,{fontSize:"small"===p?"small":"default"}),classes:{root:(0,i.Z)(t.root,t["color".concat((0,h.Z)(d))]),checked:t.checked,disabled:t.disabled},name:w,checked:C,onChange:E,ref:r},Z))}));const k=(0,f.Z)((function(e){return{root:{color:e.palette.text.secondary},checked:{},disabled:{},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,p.U1)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,p.U1)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}}}}),{name:"MuiRadio"})(Z);var C=n(4699),E=a.forwardRef((function(e,r){var n=e.classes,t=e.className,c=e.row,s=void 0!==c&&c,d=(0,l.Z)(e,["classes","className","row"]);return a.createElement("div",(0,o.Z)({className:(0,i.Z)(n.root,t,s&&n.row),ref:r},d))}));const w=(0,f.Z)({root:{display:"flex",flexDirection:"column",flexWrap:"wrap"},row:{flexDirection:"row"}},{name:"MuiFormGroup"})(E);var R=n(3834),x=n(2775),I=n(5001);const S=a.forwardRef((function(e,r){var n=e.actions,t=e.children,i=e.name,c=e.value,s=e.onChange,d=(0,l.Z)(e,["actions","children","name","value","onChange"]),u=a.useRef(null),f=(0,x.Z)({controlled:c,default:e.defaultValue,name:"RadioGroup"}),m=(0,C.Z)(f,2),p=m[0],h=m[1];a.useImperativeHandle(n,(function(){return{focus:function(){var e=u.current.querySelector("input:not(:disabled):checked");e||(e=u.current.querySelector("input:not(:disabled)")),e&&e.focus()}}}),[]);var v=(0,R.Z)(r,u),g=(0,I.Z)(i);return a.createElement(b.Provider,{value:{name:g,onChange:function(e){h(e.target.value),s&&s(e,e.target.value)},value:p}},a.createElement(w,(0,o.Z)({role:"radiogroup",ref:v},d),t))}));var O=n(2601),N=n(2318),P=a.forwardRef((function(e,r){e.checked;var n=e.classes,t=e.className,c=e.control,s=e.disabled,d=(e.inputRef,e.label),u=e.labelPlacement,f=void 0===u?"end":u,m=(e.name,e.onChange,e.value,(0,l.Z)(e,["checked","classes","className","control","disabled","inputRef","label","labelPlacement","name","onChange","value"])),p=(0,O.Z)(),v=s;void 0===v&&void 0!==c.props.disabled&&(v=c.props.disabled),void 0===v&&p&&(v=p.disabled);var b={disabled:v};return["checked","name","onChange","value","inputRef"].forEach((function(r){void 0===c.props[r]&&void 0!==e[r]&&(b[r]=e[r])})),a.createElement("label",(0,o.Z)({className:(0,i.Z)(n.root,t,"end"!==f&&n["labelPlacement".concat((0,h.Z)(f))],v&&n.disabled),ref:r},m),a.cloneElement(c,b),a.createElement(N.Z,{component:"span",className:(0,i.Z)(n.label,v&&n.disabled)},d))}));const q=(0,f.Z)((function(e){return{root:{display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,"&$disabled":{cursor:"default"}},labelPlacementStart:{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},labelPlacementTop:{flexDirection:"column-reverse",marginLeft:16},labelPlacementBottom:{flexDirection:"column",marginLeft:16},disabled:{},label:{"&$disabled":{color:e.palette.text.disabled}}}}),{name:"MuiFormControlLabel"})(P);function F(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}var B=n(3711),$=n(8466),j=a.forwardRef((function(e,r){var n=e.children,t=e.classes,c=e.className,s=e.color,d=void 0===s?"primary":s,u=e.component,f=void 0===u?"div":u,m=e.disabled,p=void 0!==m&&m,v=e.error,b=void 0!==v&&v,g=e.fullWidth,y=void 0!==g&&g,Z=e.focused,k=e.hiddenLabel,C=void 0!==k&&k,E=e.margin,w=void 0===E?"none":E,R=e.required,x=void 0!==R&&R,I=e.size,S=e.variant,O=void 0===S?"standard":S,N=(0,l.Z)(e,["children","classes","className","color","component","disabled","error","fullWidth","focused","hiddenLabel","margin","required","size","variant"]),P=a.useState((function(){var e=!1;return n&&a.Children.forEach(n,(function(r){if((0,B.Z)(r,["Input","Select"])){var n=(0,B.Z)(r,["Select"])?r.props.input:r;n&&n.props.startAdornment&&(e=!0)}})),e})),q=P[0],j=P[1],z=a.useState((function(){var e=!1;return n&&a.Children.forEach(n,(function(r){(0,B.Z)(r,["Input","Select"])&&function(e){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(F(e.value)&&""!==e.value||r&&F(e.defaultValue)&&""!==e.defaultValue)}(r.props,!0)&&(e=!0)})),e})),D=z[0],W=z[1],L=a.useState(!1),U=L[0],M=L[1],A=void 0!==Z?Z:U;p&&A&&M(!1);var T=a.useCallback((function(){W(!0)}),[]),H={adornedStart:q,setAdornedStart:j,color:d,disabled:p,error:b,filled:D,focused:A,fullWidth:y,hiddenLabel:C,margin:("small"===I?"dense":void 0)||w,onBlur:function(){M(!1)},onEmpty:a.useCallback((function(){W(!1)}),[]),onFilled:T,onFocus:function(){M(!0)},registerEffect:undefined,required:x,variant:O};return a.createElement($.Z.Provider,{value:H},a.createElement(f,(0,o.Z)({className:(0,i.Z)(t.root,c,"none"!==w&&t["margin".concat((0,h.Z)(w))],y&&t.fullWidth),ref:r},N),n))}));const z=(0,f.Z)({root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},marginNormal:{marginTop:16,marginBottom:8},marginDense:{marginTop:8,marginBottom:4},fullWidth:{width:"100%"}},{name:"MuiFormControl"})(j);var D=a.forwardRef((function(e,r){var n=e.children,t=e.classes,c=e.className,s=(e.color,e.component),d=void 0===s?"label":s,u=(e.disabled,e.error,e.filled,e.focused,e.required,(0,l.Z)(e,["children","classes","className","color","component","disabled","error","filled","focused","required"])),f=function(e){var r=e.props,n=e.states,a=e.muiFormControl;return n.reduce((function(e,n){return e[n]=r[n],a&&void 0===r[n]&&(e[n]=a[n]),e}),{})}({props:e,muiFormControl:(0,O.Z)(),states:["color","required","focused","disabled","error","filled"]});return a.createElement(d,(0,o.Z)({className:(0,i.Z)(t.root,t["color".concat((0,h.Z)(f.color||"primary"))],c,f.disabled&&t.disabled,f.error&&t.error,f.filled&&t.filled,f.focused&&t.focused,f.required&&t.required),ref:r},u),n,f.required&&a.createElement("span",{"aria-hidden":!0,className:(0,i.Z)(t.asterisk,f.error&&t.error)}," ","*"))}));const W=(0,f.Z)((function(e){return{root:(0,o.Z)({color:e.palette.text.secondary},e.typography.body1,{lineHeight:1,padding:0,"&$focused":{color:e.palette.primary.main},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),colorSecondary:{"&$focused":{color:e.palette.secondary.main}},focused:{},disabled:{},error:{},filled:{},required:{},asterisk:{"&$error":{color:e.palette.error.main}}}}),{name:"MuiFormLabel"})(D);function L({question:e,userInfo:r,type:n,answers:t,handleUserInfo:o}){const[l,i]=a.useState(r||t[0]);return a.createElement(z,{component:"fieldset",style:{paddingRight:"50px"}},a.createElement(W,{component:"legend"},e),a.createElement(S,{"aria-label":"gender",name:"gender1",value:l,onChange:e=>{i(e.target.value),o(n,e.target.value)}},t.map((e=>a.createElement(q,{value:e,control:a.createElement(k,{color:"primary"}),label:e})))))}function U(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,a)}return n}function M(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}const A=(0,t.Z)((e=>({root:{width:"100%"}}))),T=()=>{const e=A(),[r,n]=(0,a.useState)({age:"20~39",period:"1년 미만",affordableRisk:"상관 없음",annualReturn:"10%~30%",financialWeight:"50% 이하"}),t=(e,a)=>{const t=function(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?U(Object(n),!0).forEach((function(r){M(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):U(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}({},r);t[e]&&(t[e]=a),n(t)};return a.createElement(a.Fragment,null,a.createElement("div",{className:e.root},a.createElement("div",null,a.createElement(L,{question:"연령대",userInfo:r.age,answers:["19세 이하","20~39","40~59","60세 이상"],type:"age",handleUserInfo:t}),a.createElement(L,{question:"투자 예상 기간",userInfo:r.period,type:"period",answers:["1년 미만","1~3년","3년 이상"],handleUserInfo:t}),a.createElement(L,{question:"감당 가능한 손실 수준",userInfo:r.affordableRisk,type:"affordableRisk",answers:["투자원금 보전","투자원금 중 일부","상관 없음"],handleUserInfo:t}),a.createElement(L,{question:"목표 연 수익률",userInfo:r.annualReturn,type:"annualReturn",answers:["10% 이하","10%~30%","30% 이상"],handleUserInfo:t}),a.createElement(L,{question:"총 자산대비 금융자산 비중",userInfo:r.financialWeight,type:"financialWeight",answers:["10% 이하","30% 이하","50% 이하","70% 이하","70% 초과"],handleUserInfo:t}))))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,