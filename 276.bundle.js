(self.webpackChunkmy_app=self.webpackChunkmy_app||[]).push([[276],{8276:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>me});var a=n(7294),r=n(1120),l=n(7623),i=n(5059),o=n(1594),s=n(7257),c=n(4022),m=n(282),d=n(9895),p=n(2318),u=n(1267),f=n(3901),h=n(7585);const g=(0,r.Z)((e=>(0,l.Z)({root:{display:"flex",justifyContent:"left",flexWrap:"wrap",listStyle:"none",width:"100%",padding:e.spacing(.5),margin:"10px 10px 10px 10px",maxWidth:"800px"},chip:{margin:e.spacing(.5),"& .MuiChip-deleteIcon":{visibility:"hidden"},"&:hover":{"& .MuiChip-deleteIcon":{visibility:"visible"}}},placeHolderText:{fontSize:"0.8rem",color:"gray",marginTop:"4px",marginLeft:"10px"},button:{margin:"10px 10px 10px 10px",padding:"0px 20px 0px 10px",height:"2rem",minWidth:"130px",borderRadius:"10px",fontSize:"1rem","& .MuiSvgIcon-root":{transition:"all 0.3s ease",marginRight:"10px"},"&:hover":{color:"white",fontWeight:"normal",background:"#303F9F",boxShadow:"0 8px 16px 0 rgba(172, 34, 34, 0.2)",cursor:"pointer","& .MuiSvgIcon-root":{transform:"rotate(90deg)"}}}})));function E(e){const t=g();return a.createElement(a.Fragment,null,a.createElement("div",null,a.createElement(d.Z,{elevation:0,style:{display:"flex"}},a.createElement(d.Z,{component:"ul",className:t.root},0===e.stockList.length?a.createElement("div",{className:t.placeHolderText},"주식 추가 버튼을 클릭하여 주식을 추가하세요"):void 0,e.stockList.map((n=>{return a.createElement("li",{key:n.name},a.createElement(u.Z,{avatar:a.createElement(f.Z,null,"S"),label:n.name,onDelete:(r=n.name,()=>{e.onDelete(r)}),className:t.chip}));var r}))),a.createElement(h.Z,{stockList:e.stockList,onAdd:e.onAdd,onChange:e.onChange,onDelete:e.onDelete}))))}var x=n(8463),v=n(9046),b=n(8588),k=n(2305),y=n(8660);const w=({selectedPF:e,stockList:t,previousBackTest:n})=>{const[r,l]=(0,a.useState)(),[i,o]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{let n=e.weights.items.map((e=>{var n;return(null===(n=t.find((t=>t.name===e?t.code:"")))||void 0===n?void 0:n.code)||""}));(0,k.o)({code:n,weight:e.weights.values}).then((e=>{l(e),o(!0)}))}),[e,t]),a.createElement(a.Fragment,null,a.createElement("div",{style:{fontSize:"1.5rem"}},"모델 실행 결과"),a.createElement(d.Z,{elevation:0},i&&void 0!==r?a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("div",null," 1000만원 투자시"),a.createElement("div",null,"기존 평가액 :",a.createElement("span",{style:{color:"red",fontWeight:"bold",fontSize:"1rem"}}," ",Math.round(1e3*n.values[r.values.length-1])),"만원"),a.createElement("div",null,"개선 평가액 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}}," ",Math.round(1e3*r.values[r.values.length-1])),"만원"),a.createElement("div",null,"예상 수익율 :",a.createElement("span",{style:{color:"black",fontWeight:"bold",fontSize:"1.2rem"}}," ",Math.round(100*r.values[r.values.length-1])),"%"),a.createElement(y.Z,{data:[{x:r.days,y:n.values.map((e=>Math.round(1e3*e))),mode:"lines",line:{shape:"spline"},name:"Lines",marker:{color:"red"}},{x:r.days,y:r.values.map((e=>Math.round(1e3*e))),mode:"lines",line:{shape:"spline"},name:"Lines",marker:{color:"black"}}],layout:{margin:{t:0,b:30,r:50,l:0},width:300,height:200,showlegend:!1,xaxis:{tickformat:"%Y %b %d"},yaxis:{side:"right"}},config:{displayModeBar:!1}})):a.createElement("div",null,a.createElement(v.Z,{width:300,height:300,description:"백테스팅 진행중..."}))))};var S=n(7314),Z=n(8920),F=n(5258),C=n(65),L=n(1423),N=n(7748),P=n(7968),D=n(2063);const z=(0,r.Z)((e=>(0,l.Z)({root:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto",fontSize:"1.2rem"}},infoCard:{float:"left",textAlign:"center"},description:{fontSize:"1.1rem","& > div":{fontSize:"1rem",fontWeight:"bold",letterSpacing:"1px",lineHeight:"216%"}},EfExplainIcon:{fontSize:"1.2rem",paddingLeft:"2px",fontStyle:"italic ",float:"left",color:"gray",transition:"all 0.3s ease","&:hover":{cursor:"pointer",color:"black",transform:"rotate(20deg)"}}}))),R=({handleSelectedPF:e,frontierData:t,stockList:n,portfolioPerformance:r})=>{const l=z(),[i,o]=(0,a.useState)(t.frontier[0]);let s=[],c=[],m=[],p=[];t.frontier.forEach((e=>{s.push(e.risk),c.push(e.returns)}));for(let e in t.specific)"max_returns"!==e&&"max_sharpe"!==e&&"min_risk"!==e||(m.push(t.specific[e].risk),p.push(t.specific[e].returns));return a.createElement(a.Fragment,null,a.createElement("div",{className:l.root},a.createElement("div",null,a.createElement(d.Z,{className:l.infoCard,elevation:0},a.createElement("div",{style:{marginLeft:"20px"}},a.createElement("div",{style:{paddingLeft:"60px",paddingBottom:"2px",float:"left"}},"효율적 경계선 모델"),a.createElement(D.Z,{className:l.EfExplainIcon,onMouseEnter:()=>{},onMouseLeave:()=>{}})),a.createElement(y.Z,{data:[{x:s,y:c,mode:"lines",line:{shape:"spline"},name:"EF 모델 추천",hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"},{x:[r.performance.risk],y:[r.performance.returns],mode:"markers",name:"기존",marker:{size:20,symbol:"star",color:"red"},hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"},{x:[r.enhance.risk],y:[r.enhance.returns],mode:"markers",name:"Dr.폴리오 추천",marker:{size:20,symbol:"star",color:"black"},hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"}],layout:{margin:{t:0,b:10,r:0,l:10},width:300,height:300,xaxis:{showticklabels:!1,title:"risk"},yaxis:{showticklabels:!1,title:"return"},showlegend:!1},config:{displayModeBar:!1},onClick:e=>{o(t.frontier[e.points[0].pointIndex])}}),a.createElement("div",{className:l.description}," ",a.createElement("div",null,a.createElement("span",{style:{color:"red",fontWeight:"bold"}},"★")," : 기존 포트폴리오"),a.createElement("div",null,a.createElement("span",{style:{color:"black",fontWeight:"bold"}},"★")," : 개선된 포트폴리오")))),a.createElement(P.Z,{title:"기존 포트폴리오",info:r.performance}),a.createElement(P.Z,{title:"개선된 포트폴리오",info:r.enhance,onPfClick:e})))},I=(0,r.Z)((e=>(0,l.Z)({root:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto"}}}))),M=({handleSelectedPF:e,recommnedData:t})=>{const n=I();let r=t;return a.createElement(a.Fragment,null,a.createElement("div",{className:n.root},a.createElement(P.Z,{title:"안정 중시형",info:r.min_risk,onPfClick:e}),a.createElement(P.Z,{title:"밸런스형",info:r.max_sharpe,onPfClick:e}),a.createElement(P.Z,{title:"수익 중시형",info:r.max_returns,onPfClick:e})))},T=(0,r.Z)((e=>(0,l.Z)({root:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto",fontSize:"1.2rem"}},infoCard:{float:"left",textAlign:"center"},description:{fontSize:"1.1rem","& > div":{fontSize:"1rem",fontWeight:"bold",letterSpacing:"1px",lineHeight:"216%"}},EfExplainIcon:{fontSize:"1.2rem",paddingLeft:"2px",fontStyle:"italic ",float:"left",color:"gray",transition:"all 0.3s ease","&:hover":{cursor:"pointer",color:"black",transform:"rotate(20deg)"}}}))),W=({handleSelectedPF:e,frontierData:t,stockList:n,portfolioPerformance:r})=>{const l=T(),[i,o]=(0,a.useState)(t.frontier[0]);let s=[],c=[],m=[],p=[];t.frontier.forEach((e=>{s.push(e.risk),c.push(e.returns)}));for(let e in t.specific)"max_returns"!==e&&"max_sharpe"!==e&&"min_risk"!==e||(m.push(t.specific[e].risk),p.push(t.specific[e].returns));return a.createElement(a.Fragment,null,a.createElement("div",{className:l.root},a.createElement("div",null,a.createElement(d.Z,{className:l.infoCard,elevation:0},a.createElement("div",{style:{marginLeft:"20px"}},a.createElement("div",{style:{paddingLeft:"60px",paddingBottom:"2px",float:"left"}},"효율적 경계선 모델"),a.createElement(D.Z,{className:l.EfExplainIcon,onMouseEnter:()=>{},onMouseLeave:()=>{}})),a.createElement(y.Z,{data:[{x:s,y:c,mode:"lines",line:{shape:"spline"},name:"EF 모델 추천",hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"},{x:[r.performance.risk],y:[r.performance.returns],mode:"markers",name:"기존",marker:{size:20,symbol:"star",color:"red"},hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"},{x:[r.enhance.risk],y:[r.enhance.returns],mode:"markers",name:"Dr.폴리오 추천",marker:{size:20,symbol:"star",color:"black"},hovertemplate:"<b>Return</b>: %{y:.5f}<br><b>Risk</b>: %{x:.5f}<br>"}],layout:{margin:{t:0,b:10,r:0,l:10},width:300,height:300,xaxis:{showticklabels:!1,title:"risk"},yaxis:{showticklabels:!1,title:"return"},showlegend:!1},config:{displayModeBar:!1},onClick:e=>{o(t.frontier[e.points[0].pointIndex])}}),a.createElement("div",{className:l.description}," ",a.createElement("div",null,a.createElement("span",{style:{color:"red",fontWeight:"bold"}},"★")," : 기존 포트폴리오"),a.createElement("div",null,a.createElement("span",{style:{color:"black",fontWeight:"bold"}},"★")," : 개선된 포트폴리오")))),a.createElement(P.Z,{title:"기존 포트폴리오",info:r.performance}),a.createElement(P.Z,{title:"개선된 포트폴리오",info:r.enhance,onPfClick:e})))};var O=n(991),A=n.n(O);n(1421);const _=(0,r.Z)((e=>(0,l.Z)({root:{height:"460px"},slider:{overflow:"hidden",height:"100%"},content:{display:"flex",flexWrap:"wrap","& > *":{margin:"auto",fontSize:"1rem"}}}))),B=({handleSelectedPF:e,stockList:t,similarETFData:n})=>{const r=_();let l=n;return a.createElement(a.Fragment,null,a.createElement("div",{className:r.root},a.createElement(A(),{className:r.slider,style:{}},l.map(((t,n)=>{let l={returns:t.returns,risk:t.risk,sharpe:1,weights:{items:t.info.map((e=>e.name)),values:t.info.map((e=>Number((Number(e.percent)/100).toFixed(2))))}};return a.createElement("div",{className:r.content,key:t.name,style:{backgroundColor:"white"}},a.createElement(P.Z,{title:t.name,info:l,onPfClick:e}),a.createElement(d.Z,{elevation:0,style:{paddingLeft:"20px",marginTop:"120px"}},a.createElement("div",{style:{fontSize:"1.5rem"}},"ETF 정보"),a.createElement("div",null,"ETF명 : ",t.name),a.createElement("div",null,"종목코드 : ",t.code),a.createElement("div",null,"유사율 : ",t.match_weight.toFixed(2),"%"),a.createElement("div",null,"순위 : ",n+1)))})))))},j=["children","value","index"];function H(){return(H=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function K(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function $(e){const{children:t,value:n,index:r}=e,l=K(e,j);return a.createElement("div",H({role:"tabpanel",hidden:n!==r,id:`full-width-tabpanel-${r}`,"aria-labelledby":`full-width-tab-${r}`},l),n===r&&a.createElement(N.Z,{p:3},a.createElement(p.Z,null,t)))}function G(e){return{id:`full-width-tab-${e}`,"aria-controls":`full-width-tabpanel-${e}`}}const J=(0,r.Z)((e=>({root:{backgroundColor:e.palette.background.paper,width:1e3,"& span":{fontSize:"1rem"}},loading:{display:"flex",height:"500px",justifyContent:"center",flexDirection:"column",alignItems:"center"}})));function Y({stockList:e,frontierData:t,frontierAIData:n,similarETFData:r,portfolioPerformance:l,handleSelectedPF:i}){const o=J(),s=(0,Z.Z)(),[c,m]=a.useState(0);return a.createElement("div",{className:o.root},a.createElement(F.Z,{position:"static",color:"default"},a.createElement(C.Z,{value:c,onChange:(e,t)=>{m(t)},indicatorColor:"primary",textColor:"primary",variant:"fullWidth","aria-label":"full width tabs example"},a.createElement(L.Z,H({label:"리스크 vs. 보상"},G(0))),a.createElement(L.Z,H({label:"(AI 기반) 리스크 vs. 보상"},G(1))),a.createElement(L.Z,H({label:"Dr.폴리오 추천"},G(2))),a.createElement(L.Z,H({label:"관련 ETF 추천"},G(3))))),a.createElement(S.Z,{axis:"rtl"===s.direction?"x-reverse":"x",index:c,onChangeIndex:e=>{m(e)}},a.createElement($,{value:c,index:0,dir:s.direction},void 0!==t&&void 0!==l?a.createElement(R,{handleSelectedPF:i,frontierData:t,portfolioPerformance:l,stockList:e}):a.createElement(a.Fragment,null,a.createElement(v.Z,{height:500,description:"포트폴리오 분석중..."}))),a.createElement($,{value:c,index:1,dir:s.direction},void 0!==n&&void 0!==l?a.createElement(W,{handleSelectedPF:i,frontierData:n,portfolioPerformance:l,stockList:e}):a.createElement(a.Fragment,null,a.createElement(v.Z,{height:500,description:"AI 분석중..."}))),a.createElement($,{value:c,index:2,dir:s.direction},void 0!==t?a.createElement(M,{handleSelectedPF:i,recommnedData:t.specific}):a.createElement(a.Fragment,null,a.createElement(v.Z,{height:500,description:"Dr.폴리오 추천중..."}))),a.createElement($,{value:c,index:3,dir:s.direction},void 0!==r?a.createElement(B,{handleSelectedPF:i,similarETFData:r,stockList:e}):a.createElement(a.Fragment,null,a.createElement(v.Z,{height:500,description:"ETF 분석중..."})))))}var q=n(5886),U=n(8642),X=n(9669),Q=n.n(X),V=n(3318);let ee={enhance:{returns:.1507537819548937,risk:.12673778713994588,sharpe:1.0316874304465589,weights:{items:["SK하이닉스","LG","현대차","삼성전자","한국전력","카카오","엔씨소프트","셀트리온"],values:[.03824,.03326,.05083,.30736,.16573,.19633,.10676,.10148]}},performance:{returns:.12816186535910157,risk:.126696827046503,sharpe:.8537061888645535,weights:{items:["LG","현대차","엔씨소프트","카카오","SK하이닉스","한국전력","삼성전자","셀트리온"],values:[.09686,.11502,.08973,.08755,.10606,.19005,.17356,.14116]}}};const te=({stockList:e,selectedPF:t,modifiedStockList:n,onChangeSelectedPF:r})=>{const[l,i]=(0,a.useState)(),[o,s]=(0,a.useState)(),[c,m]=(0,a.useState)(),[d,p]=(0,a.useState)(),[u,f]=(0,a.useState)(),[h,g]=a.useState(!1),E=a.useRef();return(0,a.useEffect)((()=>{(0,b.u)(n,"semi_variance").then((e=>{i(e)})),(0,b.u)(n,"semi_absolute").then((e=>{s(e)})),(0,U.y)(n).then((e=>{m(e)})),async function(e){let t;return!1===V.nL?(t=ee,await(0,V._v)(2e3),t):(await Q()({method:"post",url:"http://192.168.175.140:5000/portfolio",headers:{"Content-Type":"application/json"},data:JSON.stringify({codes:e.map((e=>e.code)),weights:e.map((e=>e.weight))})}).then((function(e){t=e.data})).catch((function(e){})),t)}(n).then((e=>{p(e)})),(0,k.o)({code:n.map((e=>e.code)),weight:n.map((e=>e.weight))}).then((e=>{f(e)}))}),[n,e]),a.createElement(a.Fragment,null,a.createElement("div",{className:"SelectedPortfolio",style:{display:"flex"}},a.createElement("div",{style:{paddingRight:"20px"}},a.createElement(Y,{handleSelectedPF:e=>{g(!0),r(e),E.current=window.setTimeout((()=>{g(!1)}),500)},stockList:n,frontierData:l,frontierAIData:o,similarETFData:c,portfolioPerformance:d})),a.createElement(q.Z,{style:{fontSize:"5rem",margin:"auto",marginLeft:"10px",marginRight:"10px"}}),a.createElement("div",null,a.createElement(x.Z,{style:{textAlign:"center",marginTop:"73px"}},h||void 0===u?a.createElement(x.Z,{style:{textAlign:"center",backgroundColor:"#F5F5F5",width:"280px",height:"450px"}},a.createElement(v.Z,{height:350,description:"포트폴리오 적용중..."})):a.createElement(w,{selectedPF:t,stockList:e,previousBackTest:u})))))};var ne=n(1749),ae=n(4845);const re=(0,r.Z)({root:{width:250},stockName:{width:"100px",whiteSpace:"nowrap",textOverflow:"ellipsis",overflow:"hidden"}});function le(e){const t=re(),[n,r]=a.useState(e.value);return a.createElement("div",{className:t.root},a.createElement(ne.Z,{container:!0,spacing:2,alignItems:"center"},a.createElement(p.Z,{className:t.stockName,id:"input-slider",gutterBottom:!0},e.name),a.createElement(ne.Z,{item:!0,xs:!0},a.createElement(ae.Z,{value:"number"==typeof n?e.value:0,onChange:(t,a)=>{r(a),e.onChange(e.name,Number(n))},"aria-labelledby":"input-slider",min:0,max:1,step:.001}))))}var ie=n(6210);const oe=(0,r.Z)((e=>(0,l.Z)({root:{width:"800px",height:"500px"},card:{boxShadow:"0 4px 8px 0 rgba(0, 0, 0, 0.2)",width:"800px",height:"500px",margin:"10px 100px 100px 100px",position:"relative"},stockSlider:{float:"left",paddingLeft:"80px",paddingRight:"10px",maxHeight:"300px",overflowY:"scroll",overflowX:"hidden"},button:{"& .MuiSvgIcon-root":{transition:"all 0.3s ease"},"&:hover":{background:"#B6EBFF",boxShadow:"0 16px 24px 0 rgba(172, 34, 34, 0.2)",cursor:"pointer","& .MuiSvgIcon-root":{transform:"rotate(180deg)"}}},"@global":{"*::-webkit-scrollbar":{width:"0.4em"},"*::-webkit-scrollbar-track":{"-webkit-box-shadow":"inset 0 0 6px rgba(0,0,0,0.00)"},"*::-webkit-scrollbar-thumb":{backgroundColor:"#2E2E2E",outline:"1px solid #E6E6FF",borderRadius:"20px"}}}))),se=({stockList:e,modifiedStockList:t})=>{const n=oe(),r=[...e.map((e=>e.weight))],[l,i]=(0,a.useState)({items:[...e.map((e=>e.name))],values:[...e.map((e=>e.weight))]}),o=(e,t)=>{let n={items:[...l.items],values:[...l.values]};n.values[n.items.indexOf(e)]=t,i(n)};return a.createElement(a.Fragment,null,a.createElement("div",{className:n.root},a.createElement(x.Z,{className:n.card},a.createElement("h2",{style:{paddingLeft:"300px"}},"포트폴리오 수정"),a.createElement("div",{style:{float:"left",width:"50%"}},a.createElement("div",{style:{paddingLeft:"60px",paddingTop:"20px"}},a.createElement(y.Z,{data:[{labels:l.items,values:l.values,type:"pie",hoverinfo:"label+percent",textinfo:"label+percent",textfont:{size:15,family:"",color:""},sort:!1,textposition:"inside",insidetextorientation:"horizontal"}],layout:{width:300,height:300,margin:{t:30,b:20,r:0,l:0},showlegend:!1},config:{displayModeBar:!1}}))),a.createElement("div",{style:{float:"left",width:"50%"}},a.createElement(m.Z,{className:n.button,style:{float:"right",marginRight:"60px"},onClick:()=>{i({items:[...l.items],values:[...r]})}},a.createElement(ie.Z,null)," 되돌리기"),a.createElement("div",{className:n.stockSlider},l.items.map(((e,t)=>a.createElement(le,{name:e,value:l.values[t],key:e,onChange:o})))),a.createElement(m.Z,{variant:"contained",color:"primary",size:"medium",style:{position:"absolute",bottom:"10px",right:"10px"},onClick:()=>{let e=l.values.reduce(((e,t)=>e+t),0);e>1&&(t=t.map(((t,n)=>({name:t.name,code:t.code,weight:Number((l.values[n]/e).toFixed(4))}))))}},"confirm")))))},ce=(0,r.Z)((e=>(0,l.Z)({root:{width:"100%"},button:{marginTop:e.spacing(1),marginRight:e.spacing(1)},actionsContainer:{marginBottom:e.spacing(2)},resetContainer:{padding:e.spacing(3)}})));function me(){const e=ce(),[t,n]=a.useState(0),r=["Choose Stock","Modify Portfolio","Analysis Portfolio"],l=()=>{n((e=>e+1))},u=()=>{n((e=>e-1))},[f,h]=a.useState([{name:"SK하이닉스",code:"003550",weight:.1},{name:"LG",code:"005380",weight:.2},{name:"현대차",code:"036570",weight:.1},{name:"삼성전자",code:"035720",weight:.1},{name:"한국전력",code:"000660",weight:.2},{name:"카카오",code:"015760",weight:.1},{name:"엔씨소프트",code:"005930",weight:.1},{name:"셀트리온",code:"068270",weight:.1}]),g=(e,t)=>{let n=[...f];n=n.map((n=>n.name!==e?n:{name:n.name,code:n.code,weight:t})),h(n)},x=(e,t)=>{if(f.find((n=>n.name===e||n.code===t)))return;let n=[...f];n.push({name:e,code:t,weight:0}),h(n)},v=e=>{let t=[...f];t=t.filter((t=>t.name!==e)),h(t)},[b,k]=a.useState({returns:.17909763448675378,risk:.18606897117477664,sharpe:.8550465640899988,weights:{items:["현대차","삼성전자","SK텔레콤"],values:[.3,.4,.3]}}),y=e=>{k(e)},w=JSON.parse(JSON.stringify(f));return a.createElement("div",{className:e.root},a.createElement(i.Z,{activeStep:t,orientation:"vertical"},r.map(((n,i)=>a.createElement(o.Z,{key:n},a.createElement(s.Z,null,n),a.createElement(c.Z,null,function({step:e,sharesHeldList:t,modifiedStockList:n,selectedPF:r,onChange:l,onDelete:i,onAdd:o,onChangeSelectedPF:s}){switch(e){case 0:return a.createElement(E,{stockList:t,onChange:l,onDelete:i,onAdd:o});case 1:return a.createElement(se,{stockList:t,modifiedStockList:n});case 2:return a.createElement(te,{stockList:t,modifiedStockList:n,selectedPF:r,onChangeSelectedPF:s});default:return"Unknown step"}}({step:i,sharesHeldList:f,modifiedStockList:w,selectedPF:b,onChange:g,onDelete:v,onAdd:x,onChangeSelectedPF:y}),a.createElement("div",{className:e.actionsContainer},a.createElement("div",null,a.createElement(m.Z,{disabled:0===t,onClick:u,className:e.button},"Back"),a.createElement(m.Z,{variant:"contained",color:"primary",onClick:l,className:e.button},t===r.length-1?"Finish":"Next")))))))),t===r.length&&a.createElement(d.Z,{square:!0,elevation:0,className:e.resetContainer},a.createElement(p.Z,null,"All steps completed - you're finished"),a.createElement(m.Z,{onClick:()=>{n(0)},className:e.button},"Reset")))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,